[1mdiff --git a/src/app/api/orders/route.ts b/src/app/api/orders/route.ts[m
[1mindex 264f9b79..4fec52b6 100644[m
[1m--- a/src/app/api/orders/route.ts[m
[1m+++ b/src/app/api/orders/route.ts[m
[36m@@ -1,6 +1,6 @@[m
 import { NextRequest, NextResponse } from 'next/server';[m
 import { Order } from '@/types';[m
[31m-import { getOrders, addOrder } from '@/lib/supabaseDatabase';[m
[32m+[m[32mimport { getOrders, addOrder, deductStockFromOrder } from '@/lib/supabaseDatabase';[m
 [m
 // Ensure we use Node.js runtime for Supabase compatibility[m
 export const runtime = 'nodejs';[m
[36m@@ -51,31 +51,68 @@[m [mexport async function POST(request: NextRequest) {[m
   try {[m
     const orderData = await request.json();[m
     [m
[31m-    // Validate required fields[m
[31m-    if (!orderData.customer || !orderData.items || !orderData.total) {[m
[32m+[m[32m    console.log('Orders API: Received order data:', orderData);[m
[32m+[m[41m    [m
[32m+[m[32m    // Validate required fields - check for Order interface format[m
[32m+[m[32m    if (!orderData.customerName || !orderData.productId || !orderData.total) {[m
[32m+[m[32m      console.error('Orders API: Missing required fields:', {[m
[32m+[m[32m        hasCustomerName: !!orderData.customerName,[m
[32m+[m[32m        hasProductId: !!orderData.productId,[m
[32m+[m[32m        hasTotal: !!orderData.total,[m
[32m+[m[32m        receivedFields: Object.keys(orderData)[m
[32m+[m[32m      });[m
       return NextResponse.json([m
[31m-        { success: false, error: 'Customer, items, and total are required' },[m
[32m+[m[32m        { success: false, error: 'Customer name, product ID, and total are required' },[m
         { status: 400 }[m
       );[m
     }[m
 [m
[31m-    // Generate unique ID[m
[32m+[m[32m    // Generate unique ID and create complete Order object[m
     const newOrder: Order = {[m
       id: `ORD-${Date.now()}`,[m
[31m-      ...orderData,[m
[31m-      orderDate: new Date(),[m
[32m+[m[32m      customerName: orderData.customerName,[m
[32m+[m[32m      customerEmail: orderData.customerEmail || '',[m
[32m+[m[32m      customerPhone: orderData.customerPhone || '',[m
[32m+[m[32m      customerAddress: orderData.customerAddress || '',[m
[32m+[m[32m      wilayaId: orderData.wilayaId || 0,[m
[32m+[m[32m      wilayaName: orderData.wilayaName || '',[m
[32m+[m[32m      productId: orderData.productId,[m
[32m+[m[32m      productName: orderData.productName || '',[m
[32m+[m[32m      productImage: orderData.productImage || '',[m
[32m+[m[32m      selectedSize: orderData.selectedSize || 'M',[m
[32m+[m[32m      selectedColor: orderData.selectedColor || 'Black',[m
[32m+[m[32m      quantity: orderData.quantity || 1,[m
[32m+[m[32m      subtotal: orderData.subtotal || 0,[m
[32m+[m[32m      shippingCost: orderData.shippingCost || 0,[m
[32m+[m[32m      total: orderData.total,[m
[32m+[m[32m      shippingType: orderData.shippingType || 'homeDelivery',[m
[32m+[m[32m      paymentMethod: orderData.paymentMethod || 'cod',[m
[32m+[m[32m      paymentStatus: 'pending',[m
       status: 'pending',[m
[31m-      paymentStatus: 'pending'[m
[32m+[m[32m      orderDate: new Date(),[m
[32m+[m[32m      notes: orderData.notes || '',[m
[32m+[m[32m      trackingNumber: '',[m
[32m+[m[32m      estimatedDelivery: orderData.estimatedDelivery || '',[m
[32m+[m[32m      createdAt: new Date(),[m
[32m+[m[32m      updatedAt: new Date()[m
     };[m
 [m
     const addedOrder = await addOrder(newOrder);[m
     [m
[32m+[m[32m    // Automatically deduct stock from inventory[m
[32m+[m[32m    const stockDeducted = await deductStockFromOrder(newOrder);[m
[32m+[m[32m    if (!stockDeducted) {[m
[32m+[m[32m      console.warn('Orders API: Failed to deduct stock for order:', newOrder.id);[m
[32m+[m[32m      // Note: We still return success for the order, but log the stock issue[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
     console.log('Orders API: POST request - created order:', newOrder.id);[m
     [m
     return NextResponse.json({[m
       success: true,[m
       data: addedOrder,[m
       message: 'Order created successfully',[m
[32m+[m[32m      stockDeducted: stockDeducted,[m
       timestamp: Date.now()[m
     }, { status: 201 });[m
   } catch (error) {[m
