"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_src_lib_preferencesService_ts"],{

/***/ "(app-pages-browser)/./src/lib/preferencesService.ts":
/*!***************************************!*\
  !*** ./src/lib/preferencesService.ts ***!
  \***************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _supabaseDatabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabaseDatabase */ \"(app-pages-browser)/./src/lib/supabaseDatabase.ts\");\n// Preferences service for managing user preferences (language, theme, etc.)\n\nclass PreferencesService {\n    static getInstance() {\n        if (!PreferencesService.instance) {\n            PreferencesService.instance = new PreferencesService();\n        }\n        return PreferencesService.instance;\n    }\n    generateSessionId() {\n        if (true) {\n            let sessionId = sessionStorage.getItem(\"obsidian-preferences-session-id\");\n            if (!sessionId) {\n                sessionId = \"prefs_\" + Date.now() + \"_\" + Math.random().toString(36).substr(2, 9);\n                sessionStorage.setItem(\"obsidian-preferences-session-id\", sessionId);\n            }\n            return sessionId;\n        }\n        return \"server_\" + Date.now();\n    }\n    async getPreferences() {\n        // Check cache first\n        const now = Date.now();\n        if (this.cache && now - this.cacheTime < this.CACHE_DURATION) {\n            return this.cache;\n        }\n        try {\n            const { data, error } = await _supabaseDatabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"user_preferences\").select(\"*\").eq(\"session_id\", this.sessionId).single();\n            if (error && error.code !== \"PGRST116\") {\n                console.error(\"Error fetching preferences:\", error);\n                return null;\n            }\n            if (data) {\n                this.cache = data;\n                this.cacheTime = now;\n                return data;\n            }\n            return null;\n        } catch (error) {\n            console.error(\"Error fetching preferences:\", error);\n            return null;\n        }\n    }\n    async setLanguage(language) {\n        try {\n            const { error } = await _supabaseDatabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"user_preferences\").upsert({\n                session_id: this.sessionId,\n                language,\n                updated_at: new Date().toISOString()\n            });\n            if (error) {\n                console.error(\"Error setting language:\", error);\n                return false;\n            }\n            // Clear cache\n            this.cache = null;\n            this.cacheTime = 0;\n            return true;\n        } catch (error) {\n            console.error(\"Error setting language:\", error);\n            return false;\n        }\n    }\n    async setTheme(theme) {\n        try {\n            const { error } = await _supabaseDatabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"user_preferences\").upsert({\n                session_id: this.sessionId,\n                theme,\n                updated_at: new Date().toISOString()\n            });\n            if (error) {\n                console.error(\"Error setting theme:\", error);\n                return false;\n            }\n            // Clear cache\n            this.cache = null;\n            this.cacheTime = 0;\n            return true;\n        } catch (error) {\n            console.error(\"Error setting theme:\", error);\n            return false;\n        }\n    }\n    async getLanguage() {\n        const prefs = await this.getPreferences();\n        return (prefs === null || prefs === void 0 ? void 0 : prefs.language) || \"en\";\n    }\n    async getTheme() {\n        const prefs = await this.getPreferences();\n        return (prefs === null || prefs === void 0 ? void 0 : prefs.theme) || \"dark\";\n    }\n    // Fallback to localStorage for immediate response\n    getLanguageSync() {\n        if (true) {\n            return localStorage.getItem(\"obsidian-language\") || \"en\";\n        }\n        return \"en\";\n    }\n    getThemeSync() {\n        if (true) {\n            return localStorage.getItem(\"admin-theme\") || \"dark\";\n        }\n        return \"dark\";\n    }\n    // Sync localStorage to database\n    async syncFromLocalStorage() {\n        if (true) {\n            const language = localStorage.getItem(\"obsidian-language\");\n            const theme = localStorage.getItem(\"admin-theme\");\n            if (language) {\n                await this.setLanguage(language);\n            }\n            if (theme) {\n                await this.setTheme(theme);\n            }\n        }\n    }\n    constructor(){\n        this.cache = null;\n        this.cacheTime = 0;\n        this.CACHE_DURATION = 30000 // 30 seconds\n        ;\n        this.sessionId = this.generateSessionId();\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (PreferencesService.getInstance());\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/preferencesService.ts\n"));

/***/ })

}]);