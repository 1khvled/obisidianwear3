"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_src_lib_inventoryService_ts"],{

/***/ "(app-pages-browser)/./src/lib/inventoryService.ts":
/*!*************************************!*\
  !*** ./src/lib/inventoryService.ts ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addInventory: function() { return /* binding */ addInventory; },\n/* harmony export */   checkStock: function() { return /* binding */ checkStock; },\n/* harmony export */   getInventory: function() { return /* binding */ getInventory; },\n/* harmony export */   getInventoryTransactions: function() { return /* binding */ getInventoryTransactions; },\n/* harmony export */   getLowStockItems: function() { return /* binding */ getLowStockItems; },\n/* harmony export */   getProductInventory: function() { return /* binding */ getProductInventory; },\n/* harmony export */   initializeProductInventory: function() { return /* binding */ initializeProductInventory; },\n/* harmony export */   updateInventoryQuantity: function() { return /* binding */ updateInventoryQuantity; }\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(app-pages-browser)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nconst supabaseUrl = \"https://twlegtqcyydgjkycxngw.supabase.co\";\nconst supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InR3bGVndHFjeXlkZ2preWN4bmd3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTcxNzQ2MDAsImV4cCI6MjA3Mjc1MDYwMH0.uD9GD_ksHCDgmmPAgR7fcLUAJHRJtTkT-J-SVjU-WR0\";\nif (!supabaseUrl || !supabaseKey) {\n    throw new Error(\"Missing Supabase environment variables\");\n}\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseKey);\n// Get all inventory records\nasync function getInventory() {\n    try {\n        const { data, error } = await supabase.from(\"inventory\").select(\"\\n        *,\\n        products (\\n          id,\\n          name,\\n          image,\\n          price\\n        )\\n      \").order(\"created_at\", {\n            ascending: false\n        });\n        if (error) {\n            console.error(\"Inventory service: getInventory error:\", error);\n            return [];\n        }\n        return data || [];\n    } catch (error) {\n        console.error(\"Inventory service: getInventory error:\", error);\n        return [];\n    }\n}\n// Get inventory for a specific product\nasync function getProductInventory(productId) {\n    try {\n        const { data, error } = await supabase.from(\"inventory\").select(\"\\n        *,\\n        products (\\n          id,\\n          name,\\n          image,\\n          price\\n        )\\n      \").eq(\"product_id\", productId).order(\"size\", {\n            ascending: true\n        });\n        if (error) {\n            console.error(\"Inventory service: getProductInventory error:\", error);\n            return [];\n        }\n        return data || [];\n    } catch (error) {\n        console.error(\"Inventory service: getProductInventory error:\", error);\n        return [];\n    }\n}\n// Update inventory quantity\nasync function updateInventoryQuantity(inventoryId, newQuantity, reason, createdBy) {\n    try {\n        // Get current record\n        const { data: currentRecord, error: fetchError } = await supabase.from(\"inventory\").select(\"*\").eq(\"id\", inventoryId).single();\n        if (fetchError || !currentRecord) {\n            console.error(\"Inventory service: Record not found:\", inventoryId);\n            return false;\n        }\n        // Update inventory\n        const { error: updateError } = await supabase.from(\"inventory\").update({\n            quantity: newQuantity,\n            updated_at: new Date().toISOString()\n        }).eq(\"id\", inventoryId);\n        if (updateError) {\n            console.error(\"Inventory service: updateInventoryQuantity error:\", updateError);\n            return false;\n        }\n        // Log transaction\n        const quantityChange = newQuantity - currentRecord.quantity;\n        if (quantityChange !== 0) {\n            await supabase.from(\"inventory_transactions\").insert([\n                {\n                    id: \"TXN-\".concat(Date.now(), \"-\").concat(inventoryId),\n                    product_id: currentRecord.product_id,\n                    size: currentRecord.size,\n                    color: currentRecord.color,\n                    transaction_type: \"adjustment\",\n                    quantity_change: quantityChange,\n                    previous_quantity: currentRecord.quantity,\n                    new_quantity: newQuantity,\n                    reason: reason || \"Manual adjustment\",\n                    created_by: createdBy || \"admin\"\n                }\n            ]);\n        }\n        return true;\n    } catch (error) {\n        console.error(\"Inventory service: updateInventoryQuantity error:\", error);\n        return false;\n    }\n}\n// Add inventory (stock in)\nasync function addInventory(productId, size, color, quantity, reason, createdBy) {\n    try {\n        const inventoryId = \"INV-\".concat(productId, \"-\").concat(size, \"-\").concat(color);\n        // Get current record\n        const { data: currentRecord, error: fetchError } = await supabase.from(\"inventory\").select(\"*\").eq(\"id\", inventoryId).single();\n        const currentQuantity = (currentRecord === null || currentRecord === void 0 ? void 0 : currentRecord.quantity) || 0;\n        const newQuantity = currentQuantity + quantity;\n        // Upsert inventory record\n        const { error: upsertError } = await supabase.from(\"inventory\").upsert([\n            {\n                id: inventoryId,\n                product_id: productId,\n                size,\n                color,\n                quantity: newQuantity,\n                reserved_quantity: (currentRecord === null || currentRecord === void 0 ? void 0 : currentRecord.reserved_quantity) || 0,\n                min_stock_level: (currentRecord === null || currentRecord === void 0 ? void 0 : currentRecord.min_stock_level) || 5,\n                max_stock_level: (currentRecord === null || currentRecord === void 0 ? void 0 : currentRecord.max_stock_level) || 100\n            }\n        ]);\n        if (upsertError) {\n            console.error(\"Inventory service: addInventory error:\", upsertError);\n            return false;\n        }\n        // Log transaction\n        await supabase.from(\"inventory_transactions\").insert([\n            {\n                id: \"TXN-\".concat(Date.now(), \"-\").concat(inventoryId),\n                product_id: productId,\n                size,\n                color,\n                transaction_type: \"in\",\n                quantity_change: quantity,\n                previous_quantity: currentQuantity,\n                new_quantity: newQuantity,\n                reason: reason || \"Stock added\",\n                created_by: createdBy || \"admin\"\n            }\n        ]);\n        return true;\n    } catch (error) {\n        console.error(\"Inventory service: addInventory error:\", error);\n        return false;\n    }\n}\n// Check if product has sufficient stock\nasync function checkStock(productId, size, color, requestedQuantity) {\n    try {\n        const { data, error } = await supabase.from(\"inventory\").select(\"available_quantity\").eq(\"product_id\", productId).eq(\"size\", size).eq(\"color\", color).single();\n        if (error || !data) {\n            return {\n                available: false,\n                currentStock: 0\n            };\n        }\n        return {\n            available: data.available_quantity >= requestedQuantity,\n            currentStock: data.available_quantity\n        };\n    } catch (error) {\n        console.error(\"Inventory service: checkStock error:\", error);\n        return {\n            available: false,\n            currentStock: 0\n        };\n    }\n}\n// Get low stock items\nasync function getLowStockItems() {\n    try {\n        const { data, error } = await supabase.from(\"inventory\").select(\"\\n        *,\\n        products (\\n          id,\\n          name,\\n          image,\\n          price\\n        )\\n      \").lte(\"available_quantity\", 10) // Simple threshold for now\n        .order(\"available_quantity\", {\n            ascending: true\n        });\n        if (error) {\n            console.error(\"Inventory service: getLowStockItems error:\", error);\n            return [];\n        }\n        return data || [];\n    } catch (error) {\n        console.error(\"Inventory service: getLowStockItems error:\", error);\n        return [];\n    }\n}\n// Get inventory transactions\nasync function getInventoryTransactions(productId) {\n    let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 50;\n    try {\n        let query = supabase.from(\"inventory_transactions\").select(\"*\").order(\"created_at\", {\n            ascending: false\n        }).limit(limit);\n        if (productId) {\n            query = query.eq(\"product_id\", productId);\n        }\n        const { data, error } = await query;\n        if (error) {\n            console.error(\"Inventory service: getInventoryTransactions error:\", error);\n            return [];\n        }\n        return data || [];\n    } catch (error) {\n        console.error(\"Inventory service: getInventoryTransactions error:\", error);\n        return [];\n    }\n}\n// Initialize inventory for a product\nasync function initializeProductInventory(productId) {\n    try {\n        // Get product details\n        const { data: product, error: productError } = await supabase.from(\"products\").select(\"sizes, colors, stock\").eq(\"id\", productId).single();\n        if (productError || !product) {\n            console.error(\"Inventory service: Product not found:\", productId);\n            return false;\n        }\n        const sizes = product.sizes || [];\n        const colors = product.colors || [];\n        const stock = product.stock || {};\n        // Create inventory records for each size/color combination\n        const inventoryRecords = [];\n        for (const size of sizes){\n            for (const color of colors){\n                var _stock_size;\n                const stockQuantity = ((_stock_size = stock[size]) === null || _stock_size === void 0 ? void 0 : _stock_size[color]) || 0;\n                inventoryRecords.push({\n                    id: \"INV-\".concat(productId, \"-\").concat(size, \"-\").concat(color),\n                    product_id: productId,\n                    size,\n                    color,\n                    quantity: stockQuantity,\n                    reserved_quantity: 0,\n                    min_stock_level: 5,\n                    max_stock_level: 100\n                });\n            }\n        }\n        if (inventoryRecords.length > 0) {\n            const { error: insertError } = await supabase.from(\"inventory\").upsert(inventoryRecords);\n            if (insertError) {\n                console.error(\"Inventory service: initializeProductInventory error:\", insertError);\n                return false;\n            }\n        }\n        return true;\n    } catch (error) {\n        console.error(\"Inventory service: initializeProductInventory error:\", error);\n        return false;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/inventoryService.ts\n"));

/***/ })

}]);