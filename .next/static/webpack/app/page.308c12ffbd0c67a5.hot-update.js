"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/context/CartContext.tsx":
/*!*************************************!*\
  !*** ./src/context/CartContext.tsx ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CartProvider: function() { return /* binding */ CartProvider; },\n/* harmony export */   useCart: function() { return /* binding */ useCart; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ CartProvider,useCart auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\nconst CartContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nconst CartProvider = (param)=>{\n    let { children } = param;\n    _s();\n    const [items, setItems] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [isCartLoaded, setIsCartLoaded] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [cartError, setCartError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Load cart from localStorage on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const loadCartFromStorage = ()=>{\n            if (false) {}\n            try {\n                const savedCart = localStorage.getItem(\"obsidian-cart\");\n                if (savedCart) {\n                    const parsedCart = JSON.parse(savedCart);\n                    // Validate cart data structure\n                    if (Array.isArray(parsedCart)) {\n                        // Add addedAt timestamp to items that don't have it (for backward compatibility)\n                        const validatedCart = parsedCart.map((item)=>({\n                                ...item,\n                                addedAt: item.addedAt || new Date().toISOString()\n                            }));\n                        setItems(validatedCart);\n                        console.log(\"Cart loaded from localStorage:\", validatedCart.length, \"items\");\n                    } else {\n                        console.warn(\"Invalid cart data structure, clearing cart\");\n                        localStorage.removeItem(\"obsidian-cart\");\n                    }\n                }\n                setCartError(null);\n            } catch (error) {\n                console.error(\"Error loading cart from localStorage:\", error);\n                setCartError(\"Failed to load cart data\");\n                // Clear corrupted data\n                localStorage.removeItem(\"obsidian-cart\");\n            } finally{\n                setIsCartLoaded(true);\n            }\n        };\n        loadCartFromStorage();\n    }, []);\n    // Save cart to localStorage whenever it changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!isCartLoaded || \"object\" === \"undefined\") return;\n        try {\n            localStorage.setItem(\"obsidian-cart\", JSON.stringify(items));\n            console.log(\"Cart saved to localStorage:\", items.length, \"items\");\n            setCartError(null);\n        } catch (error) {\n            console.error(\"Error saving cart to localStorage:\", error);\n            setCartError(\"Failed to save cart data\");\n        }\n    }, [\n        items,\n        isCartLoaded\n    ]);\n    const addToCart = async (product, selectedSize, selectedColor, quantity)=>{\n        console.log(\"CartContext: addToCart called with:\", {\n            product,\n            selectedSize,\n            selectedColor,\n            quantity\n        });\n        const cartItemId = \"\".concat(product.id, \"-\").concat(selectedSize, \"-\").concat(selectedColor);\n        try {\n            // Check if this is a made-to-order product (no stock property)\n            const isMadeToOrder = !product.stock;\n            if (isMadeToOrder) {\n                alert('Made-to-order products cannot be added to cart. Please use the \"Order Now\" button to place your order.');\n                return;\n            }\n            if (!isMadeToOrder) {\n                var _product_stock_selectedSize, _product_stock;\n                // Simple stock check - no reservation, just check if available\n                const availableStock = ((_product_stock = product.stock) === null || _product_stock === void 0 ? void 0 : (_product_stock_selectedSize = _product_stock[selectedSize]) === null || _product_stock_selectedSize === void 0 ? void 0 : _product_stock_selectedSize[selectedColor]) || 0;\n                // Check if the specific size/color combination is available\n                if (availableStock === 0) {\n                    alert(\"❌ Size \".concat(selectedSize, \" in \").concat(selectedColor, \" is OUT OF STOCK!\"));\n                    return;\n                }\n                // Check if requested quantity exceeds available stock\n                if (quantity > availableStock) {\n                    alert(\"❌ Not enough stock available in \".concat(selectedSize, \" \").concat(selectedColor, \"! Only \").concat(availableStock, \" available.\"));\n                    return;\n                }\n                console.log(\"✅ Stock check passed - adding to cart\");\n            } else {\n                console.log(\"✅ Made-to-order product - no stock check needed\");\n            }\n            // If inventory reservation successful (or skipped for made-to-order), add to cart\n            setItems((prevItems)=>{\n                const existingItem = prevItems.find((item)=>item.id === cartItemId);\n                if (existingItem) {\n                    // Update existing item quantity\n                    const newQuantity = existingItem.quantity + quantity;\n                    return prevItems.map((item)=>item.id === cartItemId ? {\n                            ...item,\n                            quantity: newQuantity\n                        } : item);\n                } else {\n                    // Add new item\n                    const newItem = {\n                        id: cartItemId,\n                        productId: product.id,\n                        name: product.name,\n                        price: product.price,\n                        image: product.image,\n                        selectedSize,\n                        selectedColor,\n                        quantity,\n                        addedAt: new Date().toISOString()\n                    };\n                    return [\n                        ...prevItems,\n                        newItem\n                    ];\n                }\n            });\n            console.log(\"✅ Item added to cart and inventory reserved\");\n        } catch (error) {\n            console.error(\"❌ Error adding to cart:\", error);\n            alert(\"❌ Failed to add item to cart. Please try again.\");\n        }\n    };\n    const removeFromCart = async (id)=>{\n        const itemToRemove = items.find((item)=>item.id === id);\n        if (!itemToRemove) return;\n        try {\n            // Restore inventory when removing from cart\n            const restoreResponse = await fetch(\"/api/inventory/restore\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    productId: itemToRemove.productId,\n                    size: itemToRemove.selectedSize,\n                    color: itemToRemove.selectedColor,\n                    quantity: itemToRemove.quantity\n                })\n            });\n            if (!restoreResponse.ok) {\n                console.error(\"❌ Failed to restore inventory, but removing from cart anyway\");\n            }\n            setItems((prevItems)=>prevItems.filter((item)=>item.id !== id));\n            console.log(\"✅ Item removed from cart and inventory restored\");\n        } catch (error) {\n            console.error(\"❌ Error removing from cart:\", error);\n            // Still remove from cart even if inventory restore fails\n            setItems((prevItems)=>prevItems.filter((item)=>item.id !== id));\n        }\n    };\n    const updateQuantity = async (id, quantity)=>{\n        if (quantity <= 0) {\n            await removeFromCart(id);\n            return;\n        }\n        const item = items.find((item)=>item.id === id);\n        if (!item) return;\n        const currentQuantity = item.quantity;\n        const quantityDifference = quantity - currentQuantity;\n        if (quantityDifference === 0) return; // No change needed\n        try {\n            // Check if this is a made-to-order product (no stock property)\n            const isMadeToOrder = !item.stock;\n            if (!isMadeToOrder) {\n                if (quantityDifference > 0) {\n                    // Increasing quantity - reserve more inventory\n                    const reserveResponse = await fetch(\"/api/inventory/reserve\", {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify({\n                            productId: item.productId,\n                            size: item.selectedSize,\n                            color: item.selectedColor,\n                            quantity: quantityDifference\n                        })\n                    });\n                    if (!reserveResponse.ok) {\n                        const errorData = await reserveResponse.json();\n                        alert(\"❌ Cannot increase quantity: \".concat(errorData.error || \"Unknown error\"));\n                        return;\n                    }\n                } else {\n                    // Decreasing quantity - restore some inventory\n                    const restoreResponse = await fetch(\"/api/inventory/restore\", {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify({\n                            productId: item.productId,\n                            size: item.selectedSize,\n                            color: item.selectedColor,\n                            quantity: Math.abs(quantityDifference)\n                        })\n                    });\n                    if (!restoreResponse.ok) {\n                        console.error(\"❌ Failed to restore inventory, but updating quantity anyway\");\n                    }\n                }\n            } else {\n                console.log(\"✅ Skipping inventory operations for made-to-order product\");\n            }\n            // Update the cart\n            setItems((prevItems)=>prevItems.map((item)=>item.id === id ? {\n                        ...item,\n                        quantity\n                    } : item));\n            console.log(\"✅ Quantity updated and inventory synced\");\n        } catch (error) {\n            console.error(\"❌ Error updating quantity:\", error);\n            alert(\"❌ Failed to update quantity. Please try again.\");\n        }\n    };\n    const clearCart = async ()=>{\n        // Restore inventory for all items before clearing\n        for (const item of items){\n            try {\n                await fetch(\"/api/inventory/restore\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        productId: item.productId,\n                        size: item.selectedSize,\n                        color: item.selectedColor,\n                        quantity: item.quantity\n                    })\n                });\n            } catch (error) {\n                console.error(\"❌ Failed to restore inventory for item:\", item.id, error);\n            }\n        }\n        setItems([]);\n        // Also clear from localStorage\n        if (true) {\n            localStorage.removeItem(\"obsidian-cart\");\n        }\n        console.log(\"✅ Cart cleared and all inventory restored\");\n    };\n    // Function to clear cart data (useful for debugging or reset)\n    const clearCartData = ()=>{\n        setItems([]);\n        if (true) {\n            localStorage.removeItem(\"obsidian-cart\");\n        }\n        setCartError(null);\n    };\n    const getTotalItems = ()=>{\n        return items.reduce((total, item)=>total + item.quantity, 0);\n    };\n    const getTotalPrice = ()=>{\n        return items.reduce((total, item)=>total + item.price * item.quantity, 0);\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(CartContext.Provider, {\n        value: {\n            items,\n            addToCart,\n            removeFromCart,\n            updateQuantity,\n            clearCart,\n            getTotalItems,\n            getTotalPrice,\n            isCartLoaded,\n            cartError\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\HP\\\\Desktop\\\\Obsidian wear\\\\projectt\\\\src\\\\context\\\\CartContext.tsx\",\n        lineNumber: 307,\n        columnNumber: 5\n    }, undefined);\n};\n_s(CartProvider, \"A2jDBIPBxhVU6AU9PP6VbnYE1rQ=\");\n_c = CartProvider;\nconst useCart = ()=>{\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(CartContext);\n    if (context === undefined) {\n        throw new Error(\"useCart must be used within a CartProvider\");\n    }\n    return context;\n};\n_s1(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/context/CartContext.tsx\n"));

/***/ })

});