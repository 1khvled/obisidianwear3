"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/page",{

/***/ "(app-pages-browser)/./src/services/orderService.ts":
/*!**************************************!*\
  !*** ./src/services/orderService.ts ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   orderService: function() { return /* binding */ orderService; }\n/* harmony export */ });\n/* harmony import */ var _backendService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./backendService */ \"(app-pages-browser)/./src/services/backendService.ts\");\n/* __next_internal_client_entry_do_not_use__ orderService,default auto */ // Email notifications are now handled in the API routes\n\nclass OrderService {\n    async initializeOrders() {\n        await this.loadOrders();\n    }\n    // Load orders from shared data service\n    async loadOrders() {\n        this.orders = await _backendService__WEBPACK_IMPORTED_MODULE_0__.backendService.getOrders();\n    }\n    // Setup data synchronization\n    setupDataSync() {\n        if (true) {\n            const handleDataUpdate = (event)=>{\n                const data = event.detail;\n                if (data && data.orders) {\n                    this.orders = data.orders;\n                }\n            };\n            window.addEventListener(\"data-updated\", handleDataUpdate);\n        }\n    }\n    // Generate unique order ID\n    generateOrderId() {\n        const timestamp = Date.now().toString();\n        const random = Math.random().toString(36).substr(2, 4).toUpperCase();\n        return \"OBS\".concat(timestamp.slice(-6)).concat(random);\n    }\n    // Create new order\n    async createOrder(orderData, product) {\n        try {\n            // Check if this is a made-to-order product (no stock property)\n            const isMadeToOrder = !product.stock;\n            if (!isMadeToOrder) {\n                var _product_stock_orderData_selectedSize, _product_stock;\n                // Only validate and reserve inventory for regular products\n                const availableStock = ((_product_stock = product.stock) === null || _product_stock === void 0 ? void 0 : (_product_stock_orderData_selectedSize = _product_stock[orderData.selectedSize]) === null || _product_stock_orderData_selectedSize === void 0 ? void 0 : _product_stock_orderData_selectedSize[orderData.selectedColor]) || 0;\n                if (availableStock < orderData.quantity) {\n                    console.error(\"❌ Insufficient stock for order:\", {\n                        available: availableStock,\n                        requested: orderData.quantity,\n                        size: orderData.selectedSize,\n                        color: orderData.selectedColor\n                    });\n                    return {\n                        success: false,\n                        error: \"Not enough stock available. Only \".concat(availableStock, \" items available in \").concat(orderData.selectedSize, \" \").concat(orderData.selectedColor, \".\")\n                    };\n                }\n                console.log(\"✅ Stock validation passed for order\");\n            } else {\n                console.log(\"✅ Skipping inventory reservation for made-to-order product\");\n            }\n            const orderId = this.generateOrderId();\n            const now = new Date();\n            const order = {\n                id: orderId,\n                customerName: orderData.customerName,\n                customerEmail: orderData.customerEmail,\n                customerPhone: orderData.customerPhone,\n                customerAddress: orderData.customerAddress,\n                customerCity: orderData.customerCity || \"\",\n                wilayaId: orderData.wilayaId,\n                wilayaName: orderData.wilayaName,\n                productId: orderData.productId,\n                productName: product.name,\n                productImage: product.image,\n                selectedSize: orderData.selectedSize,\n                selectedColor: orderData.selectedColor,\n                quantity: orderData.quantity,\n                subtotal: orderData.subtotal,\n                shippingCost: orderData.shippingCost,\n                total: orderData.total,\n                shippingType: orderData.shippingType === \"domicileEcommerce\" ? \"homeDelivery\" : \"stopDesk\",\n                paymentMethod: orderData.paymentMethod,\n                paymentStatus: \"pending\",\n                status: \"pending\",\n                orderDate: now,\n                notes: orderData.notes || \"\",\n                trackingNumber: \"\",\n                estimatedDelivery: this.calculateEstimatedDelivery(orderData.shippingType),\n                createdAt: now,\n                updatedAt: now\n            };\n            // Add order to shared data service\n            await _backendService__WEBPACK_IMPORTED_MODULE_0__.backendService.addOrder(order);\n            this.orders.unshift(order); // Add to beginning for newest first\n            // Deduct stock after successful order (simple version)\n            if (!isMadeToOrder) {\n                try {\n                    const deductResponse = await fetch(\"/api/inventory/deduct\", {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify({\n                            productId: orderData.productId,\n                            size: orderData.selectedSize,\n                            color: orderData.selectedColor,\n                            quantity: orderData.quantity\n                        })\n                    });\n                    if (deductResponse.ok) {\n                        console.log(\"✅ Stock deducted successfully after order\");\n                    } else {\n                        console.log(\"⚠️ Stock deduction failed, but order was created\");\n                    }\n                } catch (error) {\n                    console.log(\"⚠️ Stock deduction error, but order was created:\", error);\n                }\n            }\n            // Email notifications are now handled automatically in the API routes\n            console.log(\"✅ Order created successfully, email will be sent via API\");\n            return {\n                success: true,\n                orderId\n            };\n        } catch (error) {\n            console.error(\"❌ Failed to create order:\", error);\n            return {\n                success: false,\n                error: \"Failed to create order. Please try again.\"\n            };\n        }\n    }\n    // Get all orders\n    getOrders() {\n        return this.orders;\n    }\n    // Get order by ID\n    getOrder(orderId) {\n        return this.orders.find((order)=>order.id === orderId);\n    }\n    // Update order status\n    async updateOrderStatus(orderId, status, trackingNumber) {\n        try {\n            const orderIndex = this.orders.findIndex((order)=>order.id === orderId);\n            if (orderIndex === -1) return false;\n            const updatedOrder = {\n                ...this.orders[orderIndex],\n                status,\n                trackingNumber: trackingNumber || this.orders[orderIndex].trackingNumber,\n                updatedAt: new Date()\n            };\n            // Update in shared data service\n            await _backendService__WEBPACK_IMPORTED_MODULE_0__.backendService.updateOrder(orderId, updatedOrder);\n            // Update local orders\n            this.orders[orderIndex] = updatedOrder;\n            return true;\n        } catch (error) {\n            console.error(\"Failed to update order status:\", error);\n            return false;\n        }\n    }\n    // Calculate estimated delivery\n    calculateEstimatedDelivery(shippingType) {\n        const deliveryDays = shippingType === \"domicileEcommerce\" ? 3 : 2;\n        const deliveryDate = new Date();\n        deliveryDate.setDate(deliveryDate.getDate() + deliveryDays);\n        return deliveryDate.toLocaleDateString(\"en-US\", {\n            weekday: \"long\",\n            year: \"numeric\",\n            month: \"long\",\n            day: \"numeric\"\n        });\n    }\n    // Get orders statistics\n    getOrderStats() {\n        const total = this.orders.length;\n        const pending = this.orders.filter((o)=>o.status === \"pending\").length;\n        const confirmed = this.orders.filter((o)=>o.status === \"confirmed\").length;\n        const shipped = this.orders.filter((o)=>o.status === \"shipped\").length;\n        const delivered = this.orders.filter((o)=>o.status === \"delivered\").length;\n        const cancelled = this.orders.filter((o)=>o.status === \"cancelled\").length;\n        const totalRevenue = this.orders.filter((o)=>o.status === \"delivered\").reduce((sum, order)=>sum + order.total, 0);\n        return {\n            total,\n            pending,\n            confirmed,\n            shipped,\n            delivered,\n            cancelled,\n            totalRevenue\n        };\n    }\n    // Set orders (for export functionality)\n    setOrders(orders) {\n        this.orders = orders;\n    }\n    // Export orders to CSV\n    exportOrdersCSV() {\n        const headers = [\n            \"Order ID\",\n            \"Date\",\n            \"Customer\",\n            \"Email\",\n            \"Phone\",\n            \"Product\",\n            \"Size\",\n            \"Color\",\n            \"Quantity\",\n            \"Total\",\n            \"Status\",\n            \"Wilaya\",\n            \"Shipping\"\n        ];\n        const rows = this.orders.map((order)=>{\n            // Handle date formatting - support both Date objects and strings\n            let formattedDate = \"\";\n            try {\n                if (order.orderDate instanceof Date) {\n                    formattedDate = order.orderDate.toISOString().split(\"T\")[0];\n                } else if (typeof order.orderDate === \"string\") {\n                    // Try to parse the string as a date\n                    const date = new Date(order.orderDate);\n                    if (!isNaN(date.getTime())) {\n                        formattedDate = date.toISOString().split(\"T\")[0];\n                    } else {\n                        formattedDate = order.orderDate; // Use as-is if can't parse\n                    }\n                } else {\n                    formattedDate = \"Unknown\";\n                }\n            } catch (error) {\n                console.warn(\"Error formatting date for order:\", order.id, error);\n                formattedDate = \"Unknown\";\n            }\n            return [\n                order.id || \"N/A\",\n                formattedDate,\n                order.customerName || \"N/A\",\n                order.customerEmail || \"N/A\",\n                order.customerPhone || \"N/A\",\n                order.productName || \"N/A\",\n                order.selectedSize || \"N/A\",\n                order.selectedColor || \"N/A\",\n                order.quantity || 0,\n                order.total || 0,\n                order.status || \"N/A\",\n                order.wilayaName || \"N/A\",\n                order.shippingType || \"N/A\"\n            ];\n        });\n        const csvContent = [\n            headers,\n            ...rows\n        ].map((row)=>row.map((field)=>'\"'.concat(String(field).replace(/\"/g, '\"\"'), '\"')).join(\",\")).join(\"\\n\");\n        return csvContent;\n    }\n    // Clear all orders (for testing)\n    clearOrders() {\n        this.orders = [];\n    // Note: This would need to be implemented in dataService if needed\n    }\n    constructor(){\n        this.orders = [];\n        this.initializeOrders();\n        this.setupDataSync();\n    }\n}\n// Create singleton instance\nconst orderService = new OrderService();\n/* harmony default export */ __webpack_exports__[\"default\"] = (orderService);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/orderService.ts\n"));

/***/ })

});