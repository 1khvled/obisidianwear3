"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_src_lib_optimizedDatabase_ts";
exports.ids = ["_rsc_src_lib_optimizedDatabase_ts"];
exports.modules = {

/***/ "(rsc)/./src/lib/optimizedDatabase.ts":
/*!**************************************!*\
  !*** ./src/lib/optimizedDatabase.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addOrder: () => (/* binding */ addOrder),\n/* harmony export */   addProduct: () => (/* binding */ addProduct),\n/* harmony export */   dbCache: () => (/* binding */ dbCache),\n/* harmony export */   deleteOrder: () => (/* binding */ deleteOrder),\n/* harmony export */   deleteProduct: () => (/* binding */ deleteProduct),\n/* harmony export */   getMaintenanceStatus: () => (/* binding */ getMaintenanceStatus),\n/* harmony export */   getOrder: () => (/* binding */ getOrder),\n/* harmony export */   getOrders: () => (/* binding */ getOrders),\n/* harmony export */   getProduct: () => (/* binding */ getProduct),\n/* harmony export */   getProducts: () => (/* binding */ getProducts),\n/* harmony export */   returnStockFromOrder: () => (/* binding */ returnStockFromOrder),\n/* harmony export */   setMaintenanceStatus: () => (/* binding */ setMaintenanceStatus),\n/* harmony export */   supabase: () => (/* binding */ supabase),\n/* harmony export */   updateOrder: () => (/* binding */ updateOrder),\n/* harmony export */   updateProduct: () => (/* binding */ updateProduct)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n// Optimized database service with aggressive caching and connection optimization\n\n// Supabase configuration\nconst supabaseUrl = \"https://zrmxcjklkthpyanfslsw.supabase.co\";\nconst supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpybXhjamtsa3RocHlhbmZzbHN3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY5MDYxMzAsImV4cCI6MjA3MjQ4MjEzMH0.2Tjh9pPzc6BUGoV3lDUBymXzE_dvAGs1O_WewTdetE0\";\n// Only throw error during server-side rendering, not during build or client-side\nif (!supabaseUrl || !supabaseKey) {\n    if (true) {\n        throw new Error(\"Missing Supabase environment variables\");\n    }\n}\n// Create optimized Supabase client with better connection settings\nconst supabase = supabaseUrl && supabaseKey ? (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseKey, {\n    db: {\n        schema: \"public\"\n    },\n    auth: {\n        persistSession: false,\n        autoRefreshToken: false\n    },\n    global: {\n        headers: {\n            \"Cache-Control\": \"max-age=60\"\n        }\n    }\n}) : null;\n// Aggressive caching system\nclass DatabaseCache {\n    set(key, data, ttl = this.DEFAULT_TTL) {\n        this.cache.set(key, {\n            data,\n            timestamp: Date.now(),\n            ttl\n        });\n    }\n    get(key) {\n        const item = this.cache.get(key);\n        if (!item) return null;\n        const now = Date.now();\n        if (now - item.timestamp > item.ttl) {\n            this.cache.delete(key);\n            return null;\n        }\n        return item.data;\n    }\n    invalidate(pattern) {\n        if (pattern) {\n            const keysToDelete = [];\n            this.cache.forEach((_, key)=>{\n                if (key.includes(pattern)) {\n                    keysToDelete.push(key);\n                }\n            });\n            keysToDelete.forEach((key)=>this.cache.delete(key));\n        } else {\n            this.cache.clear();\n        }\n    }\n    // Preload critical data\n    async preloadCriticalData() {\n        try {\n            console.log(\"Preloading critical data...\");\n            // Preload products\n            const products = await this.getProducts();\n            this.set(\"products\", products, this.LONG_TTL);\n            // Preload maintenance status\n            const maintenance = await this.getMaintenanceStatus();\n            this.set(\"maintenance\", maintenance, this.DEFAULT_TTL);\n            console.log(\"Critical data preloaded successfully\");\n        } catch (error) {\n            console.error(\"Error preloading data:\", error);\n        }\n    }\n    async getProducts() {\n        if (!supabase) {\n            console.error(\"Supabase client not initialized\");\n            return [];\n        }\n        const { data, error } = await supabase.from(\"products\").select(\"*\").order(\"created_at\", {\n            ascending: false\n        });\n        if (error) throw error;\n        return (data || []).map(convertDbProductToProduct);\n    }\n    async getMaintenanceStatus() {\n        if (!supabase) {\n            console.error(\"Supabase client not initialized\");\n            return {\n                is_maintenance: false,\n                drop_date: null\n            };\n        }\n        const { data, error } = await supabase.from(\"maintenance_status\").select(\"*\").single();\n        if (error) throw error;\n        return data;\n    }\n    constructor(){\n        this.cache = new Map();\n        this.DEFAULT_TTL = 60000 // 1 minute default\n        ;\n        this.LONG_TTL = 300000 // 5 minutes for static data\n        ;\n    }\n}\nconst dbCache = new DatabaseCache();\n// Helper function to convert database product to Product interface\nfunction convertDbProductToProduct(dbProduct) {\n    return {\n        id: dbProduct.id,\n        name: dbProduct.name,\n        description: dbProduct.description,\n        price: dbProduct.price,\n        originalPrice: dbProduct.original_price,\n        image: dbProduct.image,\n        images: dbProduct.images || [],\n        stock: dbProduct.stock || {},\n        category: dbProduct.category,\n        sizes: dbProduct.sizes || [],\n        colors: dbProduct.colors || [],\n        inStock: dbProduct.in_stock,\n        status: dbProduct.status || \"available\",\n        rating: dbProduct.rating || 0,\n        reviews: dbProduct.reviews || 0,\n        sku: dbProduct.sku,\n        weight: dbProduct.weight,\n        dimensions: dbProduct.dimensions,\n        tags: dbProduct.tags || [],\n        featured: dbProduct.featured || false,\n        createdAt: new Date(dbProduct.created_at),\n        updatedAt: new Date(dbProduct.updated_at)\n    };\n}\n// Optimized Products operations\nasync function getProducts() {\n    try {\n        if (!supabase) {\n            console.error(\"Supabase client not initialized\");\n            return [];\n        }\n        // Check cache first\n        const cached = dbCache.get(\"products\");\n        if (cached) {\n            console.log(\"Database: Returning cached products\");\n            return cached;\n        }\n        console.log(\"Database: Fetching products from Supabase\");\n        const { data, error } = await supabase.from(\"products\").select(\"*\").order(\"created_at\", {\n            ascending: false\n        });\n        if (error) {\n            console.error(\"Database getProducts error:\", error);\n            return [];\n        }\n        const products = (data || []).map(convertDbProductToProduct);\n        // Cache for 5 minutes (products don't change often)\n        dbCache.set(\"products\", products, 300000);\n        return products;\n    } catch (error) {\n        console.error(\"Database getProducts error:\", error);\n        return [];\n    }\n}\nasync function getProduct(id) {\n    try {\n        if (!supabase) {\n            console.error(\"Supabase client not initialized\");\n            return null;\n        }\n        // Check cache first\n        const cached = dbCache.get(`product_${id}`);\n        if (cached) {\n            return cached;\n        }\n        const { data, error } = await supabase.from(\"products\").select(\"*\").eq(\"id\", id).single();\n        if (error) {\n            console.error(\"Database getProduct error:\", error);\n            return null;\n        }\n        const product = convertDbProductToProduct(data);\n        // Cache for 5 minutes\n        dbCache.set(`product_${id}`, product, 300000);\n        return product;\n    } catch (error) {\n        console.error(\"Database getProduct error:\", error);\n        return null;\n    }\n}\nasync function addProduct(product) {\n    try {\n        if (!supabase) {\n            console.error(\"Supabase client not initialized\");\n            throw new Error(\"Database not available\");\n        }\n        const dbProduct = {\n            id: product.id,\n            name: product.name,\n            description: product.description,\n            price: product.price,\n            original_price: product.originalPrice,\n            image: product.image,\n            images: product.images || [],\n            stock: product.stock,\n            category: product.category,\n            sizes: product.sizes || [],\n            colors: product.colors || [],\n            in_stock: product.inStock,\n            rating: product.rating,\n            reviews: product.reviews,\n            sku: product.sku,\n            weight: product.weight,\n            dimensions: product.dimensions,\n            tags: product.tags || [],\n            featured: product.featured || false\n        };\n        const { data, error } = await supabase.from(\"products\").insert([\n            dbProduct\n        ]).select().single();\n        if (error) {\n            console.error(\"Database addProduct error:\", error);\n            throw error;\n        }\n        const newProduct = convertDbProductToProduct(data);\n        // Invalidate products cache\n        dbCache.invalidate(\"products\");\n        return newProduct;\n    } catch (error) {\n        console.error(\"Database addProduct error:\", error);\n        throw error;\n    }\n}\nasync function updateProduct(id, updates) {\n    try {\n        if (!supabase) {\n            console.error(\"Supabase client not initialized\");\n            throw new Error(\"Database not available\");\n        }\n        const dbUpdates = {};\n        if (updates.name !== undefined) dbUpdates.name = updates.name;\n        if (updates.description !== undefined) dbUpdates.description = updates.description;\n        if (updates.price !== undefined) dbUpdates.price = updates.price;\n        if (updates.originalPrice !== undefined) dbUpdates.original_price = updates.originalPrice;\n        if (updates.image !== undefined) dbUpdates.image = updates.image;\n        if (updates.images !== undefined) dbUpdates.images = updates.images;\n        if (updates.stock !== undefined) dbUpdates.stock = updates.stock;\n        if (updates.category !== undefined) dbUpdates.category = updates.category;\n        if (updates.sizes !== undefined) dbUpdates.sizes = updates.sizes;\n        if (updates.colors !== undefined) dbUpdates.colors = updates.colors;\n        if (updates.inStock !== undefined) dbUpdates.in_stock = updates.inStock;\n        if (updates.rating !== undefined) dbUpdates.rating = updates.rating;\n        if (updates.reviews !== undefined) dbUpdates.reviews = updates.reviews;\n        if (updates.sku !== undefined) dbUpdates.sku = updates.sku;\n        if (updates.weight !== undefined) dbUpdates.weight = updates.weight;\n        if (updates.dimensions !== undefined) dbUpdates.dimensions = updates.dimensions;\n        if (updates.tags !== undefined) dbUpdates.tags = updates.tags;\n        if (updates.featured !== undefined) dbUpdates.featured = updates.featured;\n        const { data, error } = await supabase.from(\"products\").update(dbUpdates).eq(\"id\", id).select().single();\n        if (error) {\n            console.error(\"Database updateProduct error:\", error);\n            throw error;\n        }\n        const updatedProduct = convertDbProductToProduct(data);\n        // Invalidate caches\n        dbCache.invalidate(\"products\");\n        dbCache.invalidate(`product_${id}`);\n        return updatedProduct;\n    } catch (error) {\n        console.error(\"Database updateProduct error:\", error);\n        throw error;\n    }\n}\nasync function deleteProduct(id) {\n    try {\n        if (!supabase) {\n            console.error(\"Supabase client not initialized\");\n            throw new Error(\"Database not available\");\n        }\n        const { error } = await supabase.from(\"products\").delete().eq(\"id\", id);\n        if (error) {\n            console.error(\"Database deleteProduct error:\", error);\n            throw error;\n        }\n        // Invalidate caches\n        dbCache.invalidate(\"products\");\n        dbCache.invalidate(`product_${id}`);\n    } catch (error) {\n        console.error(\"Database deleteProduct error:\", error);\n        throw error;\n    }\n}\n// Optimized Orders operations\nasync function getOrders() {\n    try {\n        if (!supabase) {\n            console.error(\"Supabase client not initialized\");\n            return [];\n        }\n        // Check cache first\n        const cached = dbCache.get(\"orders\");\n        if (cached) {\n            console.log(\"Database: Returning cached orders\");\n            return cached;\n        }\n        console.log(\"Database: Fetching orders from Supabase\");\n        const { data, error } = await supabase.from(\"orders\").select(\"*\").order(\"created_at\", {\n            ascending: false\n        });\n        if (error) {\n            console.error(\"Database getOrders error:\", error);\n            return [];\n        }\n        const orders = (data || []).map((order)=>({\n                ...order,\n                createdAt: new Date(order.created_at),\n                updatedAt: new Date(order.updated_at)\n            }));\n        // Cache for 1 minute (orders change more frequently)\n        dbCache.set(\"orders\", orders, 60000);\n        return orders;\n    } catch (error) {\n        console.error(\"Database getOrders error:\", error);\n        return [];\n    }\n}\nasync function getOrder(id) {\n    try {\n        if (!supabase) {\n            console.error(\"Supabase client not initialized\");\n            return null;\n        }\n        // Check cache first\n        const cached = dbCache.get(`order_${id}`);\n        if (cached) {\n            return cached;\n        }\n        const { data, error } = await supabase.from(\"orders\").select(\"*\").eq(\"id\", id).single();\n        if (error) {\n            console.error(\"Database getOrder error:\", error);\n            return null;\n        }\n        const order = {\n            ...data,\n            createdAt: new Date(data.created_at),\n            updatedAt: new Date(data.updated_at)\n        };\n        // Cache for 1 minute\n        dbCache.set(`order_${id}`, order, 60000);\n        return order;\n    } catch (error) {\n        console.error(\"Database getOrder error:\", error);\n        return null;\n    }\n}\nasync function addOrder(order) {\n    try {\n        if (!supabase) {\n            console.error(\"Supabase client not initialized\");\n            throw new Error(\"Database not available\");\n        }\n        const dbOrder = {\n            id: order.id,\n            product_id: order.productId,\n            product_name: order.productName,\n            product_image: order.productImage,\n            customer_name: order.customerName,\n            customer_email: order.customerEmail,\n            customer_phone: order.customerPhone,\n            customer_address: order.customerAddress,\n            wilaya_id: order.wilayaId,\n            wilaya_name: order.wilayaName,\n            shipping_type: order.shippingType,\n            shipping_cost: order.shippingCost,\n            quantity: order.quantity,\n            selected_size: order.selectedSize,\n            selected_color: order.selectedColor,\n            subtotal: order.subtotal,\n            total: order.total,\n            status: order.status,\n            tracking_number: order.trackingNumber,\n            notes: order.notes,\n            payment_method: order.paymentMethod,\n            payment_status: order.paymentStatus,\n            estimated_delivery: order.estimatedDelivery,\n            order_date: order.orderDate,\n            created_at: order.createdAt,\n            updated_at: order.updatedAt\n        };\n        const { data, error } = await supabase.from(\"orders\").insert([\n            dbOrder\n        ]).select().single();\n        if (error) {\n            console.error(\"Database addOrder error:\", error);\n            throw error;\n        }\n        const newOrder = {\n            ...data,\n            createdAt: new Date(data.created_at),\n            updatedAt: new Date(data.updated_at)\n        };\n        // Invalidate orders cache\n        dbCache.invalidate(\"orders\");\n        return newOrder;\n    } catch (error) {\n        console.error(\"Database addOrder error:\", error);\n        throw error;\n    }\n}\nasync function updateOrder(id, updates) {\n    try {\n        if (!supabase) {\n            console.error(\"Supabase client not initialized\");\n            throw new Error(\"Database not available\");\n        }\n        const dbUpdates = {};\n        if (updates.status !== undefined) dbUpdates.status = updates.status;\n        if (updates.customerName !== undefined) dbUpdates.customer_name = updates.customerName;\n        if (updates.customerEmail !== undefined) dbUpdates.customer_email = updates.customerEmail;\n        if (updates.customerPhone !== undefined) dbUpdates.customer_phone = updates.customerPhone;\n        if (updates.customerAddress !== undefined) dbUpdates.customer_address = updates.customerAddress;\n        if (updates.total !== undefined) dbUpdates.total = updates.total;\n        if (updates.paymentMethod !== undefined) dbUpdates.payment_method = updates.paymentMethod;\n        if (updates.notes !== undefined) dbUpdates.notes = updates.notes;\n        const { data, error } = await supabase.from(\"orders\").update(dbUpdates).eq(\"id\", id).select().single();\n        if (error) {\n            console.error(\"Database updateOrder error:\", error);\n            throw error;\n        }\n        const updatedOrder = {\n            ...data,\n            createdAt: new Date(data.created_at),\n            updatedAt: new Date(data.updated_at)\n        };\n        // Invalidate caches\n        dbCache.invalidate(\"orders\");\n        dbCache.invalidate(`order_${id}`);\n        return updatedOrder;\n    } catch (error) {\n        console.error(\"Database updateOrder error:\", error);\n        throw error;\n    }\n}\nasync function deleteOrder(id) {\n    try {\n        if (!supabase) {\n            console.error(\"Supabase client not initialized\");\n            throw new Error(\"Database not available\");\n        }\n        // First, get the order to return stock\n        const order = await getOrder(id);\n        if (order) {\n            // Return stock for the order\n            await returnStockFromOrder(order);\n        }\n        const { error } = await supabase.from(\"orders\").delete().eq(\"id\", id);\n        if (error) {\n            console.error(\"Database deleteOrder error:\", error);\n            throw error;\n        }\n        // Invalidate caches\n        dbCache.invalidate(\"orders\");\n        dbCache.invalidate(`order_${id}`);\n        dbCache.invalidate(\"products\"); // Invalidate products cache since stock changed\n    } catch (error) {\n        console.error(\"Database deleteOrder error:\", error);\n        throw error;\n    }\n}\n// Optimized Maintenance operations\nasync function getMaintenanceStatus() {\n    try {\n        if (!supabase) {\n            console.error(\"Supabase client not initialized\");\n            return {\n                is_maintenance: false,\n                drop_date: null\n            };\n        }\n        // Check cache first\n        const cached = dbCache.get(\"maintenance\");\n        if (cached) {\n            return cached;\n        }\n        const { data, error } = await supabase.from(\"maintenance_status\").select(\"*\").single();\n        if (error) {\n            console.error(\"Database getMaintenanceStatus error:\", error);\n            return null;\n        }\n        // Cache for 30 seconds\n        dbCache.set(\"maintenance\", data, 30000);\n        return data;\n    } catch (error) {\n        console.error(\"Database getMaintenanceStatus error:\", error);\n        return null;\n    }\n}\nasync function setMaintenanceStatus(isMaintenance, dropDate) {\n    try {\n        if (!supabase) {\n            console.error(\"Supabase client not initialized\");\n            return false;\n        }\n        const { error } = await supabase.from(\"maintenance_status\").upsert({\n            id: \"maintenance\",\n            is_maintenance: isMaintenance,\n            drop_date: dropDate || new Date().toISOString(),\n            updated_at: new Date().toISOString()\n        });\n        if (error) {\n            console.error(\"Database setMaintenanceStatus error:\", error);\n            return false;\n        }\n        // Invalidate maintenance cache\n        dbCache.invalidate(\"maintenance\");\n        return true;\n    } catch (error) {\n        console.error(\"Database setMaintenanceStatus error:\", error);\n        return false;\n    }\n}\n// Stock return function for cancelled/deleted orders\nasync function returnStockFromOrder(order) {\n    try {\n        if (!supabase) {\n            console.error(\"Supabase client not initialized\");\n            return false;\n        }\n        console.log(\"Database: Returning stock for order:\", order.id);\n        // Get the product\n        const product = await getProduct(order.productId);\n        if (!product) {\n            console.error(\"Database: Product not found for order:\", order.productId);\n            return false;\n        }\n        // Get current stock\n        const currentStock = product.stock?.[order.selectedSize]?.[order.selectedColor] || 0;\n        // Return the stock\n        const newStock = {\n            ...product.stock,\n            [order.selectedSize]: {\n                ...product.stock?.[order.selectedSize],\n                [order.selectedColor]: currentStock + order.quantity\n            }\n        };\n        // Update the product stock\n        const updatedProduct = await updateProduct(order.productId, {\n            stock: newStock,\n            inStock: calculateTotalStock(newStock) > 0\n        });\n        if (updatedProduct) {\n            console.log(\"Database: Successfully returned stock for order:\", order.id, {\n                productId: order.productId,\n                size: order.selectedSize,\n                color: order.selectedColor,\n                quantity: order.quantity,\n                newTotalStock: calculateTotalStock(newStock)\n            });\n            // Invalidate product cache\n            dbCache.invalidate(\"products\");\n            dbCache.invalidate(`product_${order.productId}`);\n            return true;\n        } else {\n            console.error(\"Database: Failed to return product stock for order:\", order.id);\n            return false;\n        }\n    } catch (error) {\n        console.error(\"Database: Error returning stock for order:\", error);\n        return false;\n    }\n}\n// Helper function to calculate total stock\nfunction calculateTotalStock(stock) {\n    if (!stock || typeof stock !== \"object\") return 0;\n    let total = 0;\n    Object.values(stock).forEach((colorStock)=>{\n        if (colorStock && typeof colorStock === \"object\") {\n            Object.values(colorStock).forEach((qty)=>{\n                if (typeof qty === \"number\") {\n                    total += qty;\n                }\n            });\n        }\n    });\n    return total;\n}\n// Initialize cache on module load\nif (false) {}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/optimizedDatabase.ts\n");

/***/ })

};
;