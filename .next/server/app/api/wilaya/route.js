"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/wilaya/route";
exports.ids = ["app/api/wilaya/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fwilaya%2Froute&page=%2Fapi%2Fwilaya%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fwilaya%2Froute.ts&appDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fwilaya%2Froute&page=%2Fapi%2Fwilaya%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fwilaya%2Froute.ts&appDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_HP_Desktop_projectt_src_app_api_wilaya_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/wilaya/route.ts */ \"(rsc)/./src/app/api/wilaya/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/wilaya/route\",\n        pathname: \"/api/wilaya\",\n        filename: \"route\",\n        bundlePath: \"app/api/wilaya/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projectt\\\\src\\\\app\\\\api\\\\wilaya\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_HP_Desktop_projectt_src_app_api_wilaya_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/wilaya/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZ3aWxheWElMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRndpbGF5YSUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRndpbGF5YSUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNIUCU1Q0Rlc2t0b3AlNUNwcm9qZWN0dCU1Q3NyYyU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q1VzZXJzJTVDSFAlNUNEZXNrdG9wJTVDcHJvamVjdHQmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9c3RhbmRhbG9uZSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ2lCO0FBQzlGO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsdUdBQXVHO0FBQy9HO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDNko7O0FBRTdKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2JzaWRpYW4td2Vhci8/ZGNjNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxIUFxcXFxEZXNrdG9wXFxcXHByb2plY3R0XFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXHdpbGF5YVxcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJzdGFuZGFsb25lXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3dpbGF5YS9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3dpbGF5YVwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvd2lsYXlhL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiQzpcXFxcVXNlcnNcXFxcSFBcXFxcRGVza3RvcFxcXFxwcm9qZWN0dFxcXFxzcmNcXFxcYXBwXFxcXGFwaVxcXFx3aWxheWFcXFxccm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgaGVhZGVySG9va3MsIHN0YXRpY0dlbmVyYXRpb25CYWlsb3V0IH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvd2lsYXlhL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCwgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fwilaya%2Froute&page=%2Fapi%2Fwilaya%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fwilaya%2Froute.ts&appDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/wilaya/route.ts":
/*!*************************************!*\
  !*** ./src/app/api/wilaya/route.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   PUT: () => (/* binding */ PUT)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var _lib_supabaseDatabase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/supabaseDatabase */ \"(rsc)/./src/lib/supabaseDatabase.ts\");\n\n\n// GET /api/wilaya - Get all wilaya tariffs\nasync function GET() {\n    try {\n        const wilayaTariffs = await (0,_lib_supabaseDatabase__WEBPACK_IMPORTED_MODULE_1__.getWilayaTariffs)();\n        console.log(\"Wilaya API: GET request - returning\", wilayaTariffs.length, \"wilaya tariffs\");\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: true,\n            data: wilayaTariffs,\n            count: wilayaTariffs.length,\n            timestamp: Date.now()\n        });\n    } catch (error) {\n        console.error(\"Wilaya API: GET error:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: false,\n            error: \"Failed to fetch wilaya tariffs\"\n        }, {\n            status: 500\n        });\n    }\n}\n// PUT /api/wilaya - Update wilaya tariffs\nasync function PUT(request) {\n    try {\n        const newTariffs = await request.json();\n        // Validate data structure\n        if (!Array.isArray(newTariffs)) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: \"Data must be an array of wilaya tariffs\"\n            }, {\n                status: 400\n            });\n        }\n        // Validate each tariff\n        for (const tariff of newTariffs){\n            if (!tariff.name || typeof tariff.homeDelivery !== \"number\" || typeof tariff.stopDesk !== \"number\") {\n                return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                    success: false,\n                    error: \"Each tariff must have name, homeDelivery, and stopDesk\"\n                }, {\n                    status: 400\n                });\n            }\n        }\n        await (0,_lib_supabaseDatabase__WEBPACK_IMPORTED_MODULE_1__.updateWilayaTariffs)(newTariffs);\n        const updatedTariffs = await (0,_lib_supabaseDatabase__WEBPACK_IMPORTED_MODULE_1__.getWilayaTariffs)();\n        console.log(\"Wilaya API: PUT request - updated\", updatedTariffs.length, \"wilaya tariffs\");\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: true,\n            data: updatedTariffs,\n            message: \"Wilaya tariffs updated successfully\",\n            timestamp: Date.now()\n        });\n    } catch (error) {\n        console.error(\"Wilaya API: PUT error:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: false,\n            error: \"Failed to update wilaya tariffs\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS93aWxheWEvcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF3RDtBQUN1QjtBQUUvRSwyQ0FBMkM7QUFDcEMsZUFBZUc7SUFDcEIsSUFBSTtRQUNGLE1BQU1DLGdCQUFnQixNQUFNSCx1RUFBZ0JBO1FBQzVDSSxRQUFRQyxHQUFHLENBQUMsdUNBQXVDRixjQUFjRyxNQUFNLEVBQUU7UUFDekUsT0FBT1Asa0ZBQVlBLENBQUNRLElBQUksQ0FBQztZQUN2QkMsU0FBUztZQUNUQyxNQUFNTjtZQUNOTyxPQUFPUCxjQUFjRyxNQUFNO1lBQzNCSyxXQUFXQyxLQUFLQyxHQUFHO1FBQ3JCO0lBQ0YsRUFBRSxPQUFPQyxPQUFPO1FBQ2RWLFFBQVFVLEtBQUssQ0FBQywwQkFBMEJBO1FBQ3hDLE9BQU9mLGtGQUFZQSxDQUFDUSxJQUFJLENBQ3RCO1lBQUVDLFNBQVM7WUFBT00sT0FBTztRQUFpQyxHQUMxRDtZQUFFQyxRQUFRO1FBQUk7SUFFbEI7QUFDRjtBQUVBLDBDQUEwQztBQUNuQyxlQUFlQyxJQUFJQyxPQUFvQjtJQUM1QyxJQUFJO1FBQ0YsTUFBTUMsYUFBYSxNQUFNRCxRQUFRVixJQUFJO1FBRXJDLDBCQUEwQjtRQUMxQixJQUFJLENBQUNZLE1BQU1DLE9BQU8sQ0FBQ0YsYUFBYTtZQUM5QixPQUFPbkIsa0ZBQVlBLENBQUNRLElBQUksQ0FDdEI7Z0JBQUVDLFNBQVM7Z0JBQU9NLE9BQU87WUFBMEMsR0FDbkU7Z0JBQUVDLFFBQVE7WUFBSTtRQUVsQjtRQUVBLHVCQUF1QjtRQUN2QixLQUFLLE1BQU1NLFVBQVVILFdBQVk7WUFDL0IsSUFBSSxDQUFDRyxPQUFPQyxJQUFJLElBQUksT0FBT0QsT0FBT0UsWUFBWSxLQUFLLFlBQVksT0FBT0YsT0FBT0csUUFBUSxLQUFLLFVBQVU7Z0JBQ2xHLE9BQU96QixrRkFBWUEsQ0FBQ1EsSUFBSSxDQUN0QjtvQkFBRUMsU0FBUztvQkFBT00sT0FBTztnQkFBeUQsR0FDbEY7b0JBQUVDLFFBQVE7Z0JBQUk7WUFFbEI7UUFDRjtRQUVBLE1BQU1kLDBFQUFtQkEsQ0FBQ2lCO1FBRTFCLE1BQU1PLGlCQUFpQixNQUFNekIsdUVBQWdCQTtRQUM3Q0ksUUFBUUMsR0FBRyxDQUFDLHFDQUFxQ29CLGVBQWVuQixNQUFNLEVBQUU7UUFFeEUsT0FBT1Asa0ZBQVlBLENBQUNRLElBQUksQ0FBQztZQUN2QkMsU0FBUztZQUNUQyxNQUFNZ0I7WUFDTkMsU0FBUztZQUNUZixXQUFXQyxLQUFLQyxHQUFHO1FBQ3JCO0lBQ0YsRUFBRSxPQUFPQyxPQUFPO1FBQ2RWLFFBQVFVLEtBQUssQ0FBQywwQkFBMEJBO1FBQ3hDLE9BQU9mLGtGQUFZQSxDQUFDUSxJQUFJLENBQ3RCO1lBQUVDLFNBQVM7WUFBT00sT0FBTztRQUFrQyxHQUMzRDtZQUFFQyxRQUFRO1FBQUk7SUFFbEI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL29ic2lkaWFuLXdlYXIvLi9zcmMvYXBwL2FwaS93aWxheWEvcm91dGUudHM/ZDdiYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xuaW1wb3J0IHsgZ2V0V2lsYXlhVGFyaWZmcywgdXBkYXRlV2lsYXlhVGFyaWZmcyB9IGZyb20gJ0AvbGliL3N1cGFiYXNlRGF0YWJhc2UnO1xuXG4vLyBHRVQgL2FwaS93aWxheWEgLSBHZXQgYWxsIHdpbGF5YSB0YXJpZmZzXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKCkge1xuICB0cnkge1xuICAgIGNvbnN0IHdpbGF5YVRhcmlmZnMgPSBhd2FpdCBnZXRXaWxheWFUYXJpZmZzKCk7XG4gICAgY29uc29sZS5sb2coJ1dpbGF5YSBBUEk6IEdFVCByZXF1ZXN0IC0gcmV0dXJuaW5nJywgd2lsYXlhVGFyaWZmcy5sZW5ndGgsICd3aWxheWEgdGFyaWZmcycpO1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgZGF0YTogd2lsYXlhVGFyaWZmcyxcbiAgICAgIGNvdW50OiB3aWxheWFUYXJpZmZzLmxlbmd0aCxcbiAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKVxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1dpbGF5YSBBUEk6IEdFVCBlcnJvcjonLCBlcnJvcik7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgeyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6ICdGYWlsZWQgdG8gZmV0Y2ggd2lsYXlhIHRhcmlmZnMnIH0sXG4gICAgICB7IHN0YXR1czogNTAwIH1cbiAgICApO1xuICB9XG59XG5cbi8vIFBVVCAvYXBpL3dpbGF5YSAtIFVwZGF0ZSB3aWxheWEgdGFyaWZmc1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBVVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICB0cnkge1xuICAgIGNvbnN0IG5ld1RhcmlmZnMgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKTtcbiAgICBcbiAgICAvLyBWYWxpZGF0ZSBkYXRhIHN0cnVjdHVyZVxuICAgIGlmICghQXJyYXkuaXNBcnJheShuZXdUYXJpZmZzKSkge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJ0RhdGEgbXVzdCBiZSBhbiBhcnJheSBvZiB3aWxheWEgdGFyaWZmcycgfSxcbiAgICAgICAgeyBzdGF0dXM6IDQwMCB9XG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIFZhbGlkYXRlIGVhY2ggdGFyaWZmXG4gICAgZm9yIChjb25zdCB0YXJpZmYgb2YgbmV3VGFyaWZmcykge1xuICAgICAgaWYgKCF0YXJpZmYubmFtZSB8fCB0eXBlb2YgdGFyaWZmLmhvbWVEZWxpdmVyeSAhPT0gJ251bWJlcicgfHwgdHlwZW9mIHRhcmlmZi5zdG9wRGVzayAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICAgIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiAnRWFjaCB0YXJpZmYgbXVzdCBoYXZlIG5hbWUsIGhvbWVEZWxpdmVyeSwgYW5kIHN0b3BEZXNrJyB9LFxuICAgICAgICAgIHsgc3RhdHVzOiA0MDAgfVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGF3YWl0IHVwZGF0ZVdpbGF5YVRhcmlmZnMobmV3VGFyaWZmcyk7XG4gICAgXG4gICAgY29uc3QgdXBkYXRlZFRhcmlmZnMgPSBhd2FpdCBnZXRXaWxheWFUYXJpZmZzKCk7XG4gICAgY29uc29sZS5sb2coJ1dpbGF5YSBBUEk6IFBVVCByZXF1ZXN0IC0gdXBkYXRlZCcsIHVwZGF0ZWRUYXJpZmZzLmxlbmd0aCwgJ3dpbGF5YSB0YXJpZmZzJyk7XG4gICAgXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiB1cGRhdGVkVGFyaWZmcyxcbiAgICAgIG1lc3NhZ2U6ICdXaWxheWEgdGFyaWZmcyB1cGRhdGVkIHN1Y2Nlc3NmdWxseScsXG4gICAgICB0aW1lc3RhbXA6IERhdGUubm93KClcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdXaWxheWEgQVBJOiBQVVQgZXJyb3I6JywgZXJyb3IpO1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiAnRmFpbGVkIHRvIHVwZGF0ZSB3aWxheWEgdGFyaWZmcycgfSxcbiAgICAgIHsgc3RhdHVzOiA1MDAgfVxuICAgICk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJnZXRXaWxheWFUYXJpZmZzIiwidXBkYXRlV2lsYXlhVGFyaWZmcyIsIkdFVCIsIndpbGF5YVRhcmlmZnMiLCJjb25zb2xlIiwibG9nIiwibGVuZ3RoIiwianNvbiIsInN1Y2Nlc3MiLCJkYXRhIiwiY291bnQiLCJ0aW1lc3RhbXAiLCJEYXRlIiwibm93IiwiZXJyb3IiLCJzdGF0dXMiLCJQVVQiLCJyZXF1ZXN0IiwibmV3VGFyaWZmcyIsIkFycmF5IiwiaXNBcnJheSIsInRhcmlmZiIsIm5hbWUiLCJob21lRGVsaXZlcnkiLCJzdG9wRGVzayIsInVwZGF0ZWRUYXJpZmZzIiwibWVzc2FnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/wilaya/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/supabaseDatabase.ts":
/*!*************************************!*\
  !*** ./src/lib/supabaseDatabase.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addCustomer: () => (/* binding */ addCustomer),\n/* harmony export */   addOrder: () => (/* binding */ addOrder),\n/* harmony export */   addProduct: () => (/* binding */ addProduct),\n/* harmony export */   clearProductsCache: () => (/* binding */ clearProductsCache),\n/* harmony export */   deductStockFromOrder: () => (/* binding */ deductStockFromOrder),\n/* harmony export */   deleteOrder: () => (/* binding */ deleteOrder),\n/* harmony export */   deleteProduct: () => (/* binding */ deleteProduct),\n/* harmony export */   getCustomers: () => (/* binding */ getCustomers),\n/* harmony export */   getInventory: () => (/* binding */ getInventory),\n/* harmony export */   getMaintenanceSettings: () => (/* binding */ getMaintenanceSettings),\n/* harmony export */   getOrder: () => (/* binding */ getOrder),\n/* harmony export */   getOrders: () => (/* binding */ getOrders),\n/* harmony export */   getProduct: () => (/* binding */ getProduct),\n/* harmony export */   getProducts: () => (/* binding */ getProducts),\n/* harmony export */   getWilayaTariffs: () => (/* binding */ getWilayaTariffs),\n/* harmony export */   supabase: () => (/* binding */ supabase),\n/* harmony export */   updateInventory: () => (/* binding */ updateInventory),\n/* harmony export */   updateMaintenanceSettings: () => (/* binding */ updateMaintenanceSettings),\n/* harmony export */   updateOrder: () => (/* binding */ updateOrder),\n/* harmony export */   updateProduct: () => (/* binding */ updateProduct),\n/* harmony export */   updateWilayaTariffs: () => (/* binding */ updateWilayaTariffs)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n// Database service using Supabase (free tier)\n// This provides persistent storage with a real database\n\n// Supabase configuration - MUST use environment variables\nconst supabaseUrl = \"https://twlegtqcyydgjkycxngw.supabase.co\";\nconst supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InR3bGVndHFjeXlkZ2preWN4bmd3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTcxNzQ2MDAsImV4cCI6MjA3Mjc1MDYwMH0.uD9GD_ksHCDgmmPAgR7fcLUAJHRJtTkT-J-SVjU-WR0\";\nif (!supabaseUrl || !supabaseKey) {\n    throw new Error(\"Missing Supabase environment variables. Please set NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY\");\n}\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseKey);\n// Export the supabase client for direct use\n\n// Helper function to convert database product to Product interface\nfunction convertDbProductToProduct(dbProduct) {\n    // Debug logging\n    console.log(\"\\uD83D\\uDD0D DEBUG: Raw price from DB:\", dbProduct.price, \"Type:\", typeof dbProduct.price);\n    console.log(\"\\uD83D\\uDD0D DEBUG: Parsed price:\", parseFloat(dbProduct.price), \"Type:\", typeof parseFloat(dbProduct.price));\n    const convertedProduct = {\n        id: dbProduct.id,\n        name: dbProduct.name,\n        description: dbProduct.description,\n        price: parseFloat(dbProduct.price),\n        originalPrice: dbProduct.original_price ? parseFloat(dbProduct.original_price) : undefined,\n        image: dbProduct.image,\n        images: dbProduct.images || [],\n        stock: dbProduct.stock || {},\n        category: dbProduct.category,\n        sizes: dbProduct.sizes || [],\n        colors: dbProduct.colors || [],\n        inStock: dbProduct.in_stock,\n        rating: parseFloat(dbProduct.rating || 0),\n        reviews: dbProduct.reviews || 0,\n        sku: dbProduct.sku,\n        weight: dbProduct.weight ? parseFloat(dbProduct.weight) : undefined,\n        dimensions: dbProduct.dimensions,\n        tags: dbProduct.tags || [],\n        featured: dbProduct.featured || false,\n        sizeChartCategory: dbProduct.size_chart_category || \"T-Shirts\",\n        customSizeChart: dbProduct.custom_size_chart || undefined,\n        useCustomSizeChart: dbProduct.use_custom_size_chart || false,\n        createdAt: new Date(dbProduct.created_at),\n        updatedAt: new Date(dbProduct.updated_at)\n    };\n    console.log(\"\\uD83D\\uDD0D DEBUG: Final converted product price:\", convertedProduct.price, \"Type:\", typeof convertedProduct.price);\n    return convertedProduct;\n}\n// Cache for products to reduce database calls\nlet productsCache = null;\nlet productsCacheTime = 0;\nconst CACHE_DURATION = 30000; // 30 seconds\n// Clear cache function\nfunction clearProductsCache() {\n    productsCache = null;\n    productsCacheTime = 0;\n    console.log(\"Supabase: Products cache cleared\");\n}\n// Force clear cache immediately to fix price formatting issue\nclearProductsCache();\n// Add timestamp to force cache invalidation\nconst CACHE_BUSTER = Date.now();\nconsole.log(\"\\uD83D\\uDE80 Cache buster timestamp:\", CACHE_BUSTER);\n// Products operations\nasync function getProducts() {\n    try {\n        // Return cached data if still fresh\n        if (productsCache && Date.now() - productsCacheTime < CACHE_DURATION) {\n            console.log(\"Supabase: Returning cached products\");\n            return productsCache;\n        }\n        const { data, error } = await supabase.from(\"products\").select(\"*\").order(\"created_at\", {\n            ascending: false\n        });\n        if (error) {\n            console.error(\"Supabase getProducts error:\", error);\n            return productsCache || [];\n        }\n        const products = (data || []).map(convertDbProductToProduct);\n        // Update cache\n        productsCache = products;\n        productsCacheTime = Date.now();\n        return products;\n    } catch (error) {\n        console.error(\"Supabase getProducts error:\", error);\n        return productsCache || [];\n    }\n}\nasync function getProduct(id) {\n    try {\n        const { data, error } = await supabase.from(\"products\").select(\"*\").eq(\"id\", id).single();\n        if (error) {\n            console.error(\"Supabase getProduct error:\", error);\n            return null;\n        }\n        return convertDbProductToProduct(data);\n    } catch (error) {\n        console.error(\"Supabase getProduct error:\", error);\n        return null;\n    }\n}\nasync function addProduct(product) {\n    try {\n        // Convert camelCase to snake_case for database\n        const dbProduct = {\n            id: product.id,\n            name: product.name,\n            description: product.description,\n            price: product.price,\n            original_price: product.originalPrice,\n            image: product.image,\n            images: product.images || [],\n            stock: product.stock,\n            category: product.category,\n            sizes: product.sizes || [],\n            colors: product.colors || [],\n            in_stock: product.inStock,\n            rating: product.rating,\n            reviews: product.reviews,\n            sku: product.sku,\n            weight: product.weight,\n            dimensions: product.dimensions,\n            tags: product.tags || [],\n            featured: product.featured || false,\n            size_chart_category: product.sizeChartCategory || \"T-Shirts\",\n            custom_size_chart: product.customSizeChart || null,\n            use_custom_size_chart: product.useCustomSizeChart || false\n        };\n        const { data, error } = await supabase.from(\"products\").insert([\n            dbProduct\n        ]).select().single();\n        if (error) {\n            console.error(\"Supabase addProduct error:\", error);\n            throw error;\n        }\n        console.log(\"Supabase: Added product:\", product.id);\n        // Initialize inventory for the new product\n        try {\n            const { initializeProductInventory } = await __webpack_require__.e(/*! import() */ \"_rsc_src_lib_inventoryService_ts\").then(__webpack_require__.bind(__webpack_require__, /*! ./inventoryService */ \"(rsc)/./src/lib/inventoryService.ts\"));\n            await initializeProductInventory(product.id);\n            console.log(\"Supabase: Initialized inventory for product:\", product.id);\n        } catch (inventoryError) {\n            console.error(\"Supabase: Failed to initialize inventory for product:\", product.id, inventoryError);\n        // Don't throw error here, product creation should still succeed\n        }\n        // Invalidate cache\n        productsCache = null;\n        // Convert back to camelCase\n        return convertDbProductToProduct(data);\n    } catch (error) {\n        console.error(\"Supabase addProduct error:\", error);\n        throw error;\n    }\n}\nasync function updateProduct(id, product) {\n    try {\n        // Convert camelCase to snake_case for database\n        const dbProduct = {};\n        if (product.name !== undefined) dbProduct.name = product.name;\n        if (product.description !== undefined) dbProduct.description = product.description;\n        if (product.price !== undefined) dbProduct.price = product.price;\n        if (product.originalPrice !== undefined) dbProduct.original_price = product.originalPrice;\n        if (product.image !== undefined) dbProduct.image = product.image;\n        if (product.images !== undefined) dbProduct.images = product.images;\n        if (product.stock !== undefined) dbProduct.stock = product.stock;\n        if (product.category !== undefined) dbProduct.category = product.category;\n        if (product.sizes !== undefined) dbProduct.sizes = product.sizes;\n        if (product.colors !== undefined) dbProduct.colors = product.colors;\n        if (product.inStock !== undefined) dbProduct.in_stock = product.inStock;\n        if (product.rating !== undefined) dbProduct.rating = product.rating;\n        if (product.reviews !== undefined) dbProduct.reviews = product.reviews;\n        if (product.sku !== undefined) dbProduct.sku = product.sku;\n        if (product.weight !== undefined) dbProduct.weight = product.weight;\n        if (product.dimensions !== undefined) dbProduct.dimensions = product.dimensions;\n        if (product.tags !== undefined) dbProduct.tags = product.tags;\n        if (product.featured !== undefined) dbProduct.featured = product.featured;\n        if (product.sizeChartCategory !== undefined) dbProduct.size_chart_category = product.sizeChartCategory;\n        if (product.customSizeChart !== undefined) dbProduct.custom_size_chart = product.customSizeChart;\n        if (product.useCustomSizeChart !== undefined) dbProduct.use_custom_size_chart = product.useCustomSizeChart;\n        const { data, error } = await supabase.from(\"products\").update(dbProduct).eq(\"id\", id).select().single();\n        if (error) {\n            console.error(\"Supabase updateProduct error:\", error);\n            return null;\n        }\n        console.log(\"Supabase: Updated product:\", id);\n        // Invalidate cache\n        productsCache = null;\n        return convertDbProductToProduct(data);\n    } catch (error) {\n        console.error(\"Supabase updateProduct error:\", error);\n        return null;\n    }\n}\nasync function deleteProduct(id) {\n    try {\n        const { error } = await supabase.from(\"products\").delete().eq(\"id\", id);\n        if (error) {\n            console.error(\"Supabase deleteProduct error:\", error);\n            return false;\n        }\n        console.log(\"Supabase: Deleted product:\", id);\n        // Invalidate cache\n        productsCache = null;\n        return true;\n    } catch (error) {\n        console.error(\"Supabase deleteProduct error:\", error);\n        return false;\n    }\n}\n// Helper function to convert database order to Order interface\nfunction convertDbOrderToOrder(dbOrder) {\n    // Extract customer info from items or use defaults\n    const firstItem = dbOrder.items && dbOrder.items.length > 0 ? dbOrder.items[0] : {};\n    return {\n        id: dbOrder.id,\n        productId: firstItem.productId || \"\",\n        productName: firstItem.productName || \"\",\n        productImage: firstItem.productImage || \"\",\n        customerName: firstItem.customerName || \"\",\n        customerPhone: firstItem.customerPhone || \"\",\n        customerEmail: firstItem.customerEmail || \"\",\n        customerAddress: firstItem.customerAddress || \"\",\n        customerCity: firstItem.customerCity || \"\",\n        wilayaId: firstItem.wilayaId || 0,\n        wilayaName: firstItem.wilayaName || \"\",\n        shippingType: dbOrder.shipping_type || \"homeDelivery\",\n        shippingCost: Number(dbOrder.shipping_cost) || 0,\n        quantity: firstItem.quantity || 1,\n        selectedSize: firstItem.selectedSize || \"\",\n        selectedColor: firstItem.selectedColor || \"\",\n        subtotal: Number(dbOrder.total) - Number(dbOrder.shipping_cost) || 0,\n        total: Number(dbOrder.total) || 0,\n        orderDate: new Date(dbOrder.order_date),\n        status: dbOrder.status || \"pending\",\n        trackingNumber: dbOrder.tracking_number,\n        notes: firstItem.notes,\n        paymentMethod: dbOrder.payment_method || \"cod\",\n        paymentStatus: dbOrder.payment_status || \"pending\",\n        estimatedDelivery: firstItem.estimatedDelivery,\n        createdAt: new Date(dbOrder.created_at),\n        updatedAt: new Date(dbOrder.updated_at)\n    };\n}\n// Cache for orders to reduce database calls\nlet ordersCache = null;\nlet ordersCacheTime = 0;\n// Orders operations\nasync function getOrders() {\n    try {\n        // Return cached data if still fresh\n        if (ordersCache && Date.now() - ordersCacheTime < CACHE_DURATION) {\n            console.log(\"Supabase: Returning cached orders\");\n            return ordersCache;\n        }\n        const { data, error } = await supabase.from(\"orders\").select(\"*\").order(\"order_date\", {\n            ascending: false\n        });\n        if (error) {\n            console.error(\"Supabase getOrders error:\", error);\n            return ordersCache || [];\n        }\n        const orders = (data || []).map(convertDbOrderToOrder);\n        // Update cache\n        ordersCache = orders;\n        ordersCacheTime = Date.now();\n        return orders;\n    } catch (error) {\n        console.error(\"Supabase getOrders error:\", error);\n        return ordersCache || [];\n    }\n}\nasync function getOrder(id) {\n    try {\n        const { data, error } = await supabase.from(\"orders\").select(\"*\").eq(\"id\", id).single();\n        if (error) {\n            console.error(\"Supabase getOrder error:\", error);\n            return null;\n        }\n        return convertDbOrderToOrder(data);\n    } catch (error) {\n        console.error(\"Supabase getOrder error:\", error);\n        return null;\n    }\n}\nasync function addOrder(order) {\n    try {\n        // Convert Order interface to database format\n        const dbOrder = {\n            id: order.id,\n            customer_id: `CUST-${Date.now()}`,\n            items: [\n                {\n                    productId: order.productId,\n                    productName: order.productName,\n                    productImage: order.productImage,\n                    customerName: order.customerName,\n                    customerPhone: order.customerPhone,\n                    customerEmail: order.customerEmail,\n                    customerAddress: order.customerAddress,\n                    customerCity: order.customerCity,\n                    wilayaId: order.wilayaId,\n                    wilayaName: order.wilayaName,\n                    quantity: order.quantity,\n                    selectedSize: order.selectedSize,\n                    selectedColor: order.selectedColor,\n                    notes: order.notes,\n                    estimatedDelivery: order.estimatedDelivery\n                }\n            ],\n            total: order.total,\n            shipping_cost: order.shippingCost,\n            shipping_type: order.shippingType,\n            payment_method: order.paymentMethod,\n            payment_status: order.paymentStatus,\n            status: order.status,\n            tracking_number: order.trackingNumber,\n            order_date: order.orderDate.toISOString(),\n            created_at: order.createdAt.toISOString(),\n            updated_at: order.updatedAt.toISOString()\n        };\n        const { data, error } = await supabase.from(\"orders\").insert([\n            dbOrder\n        ]).select().single();\n        if (error) {\n            console.error(\"Supabase addOrder error:\", error);\n            throw error;\n        }\n        console.log(\"Supabase: Added order:\", order.id);\n        return convertDbOrderToOrder(data);\n    } catch (error) {\n        console.error(\"Supabase addOrder error:\", error);\n        throw error;\n    }\n}\nasync function updateOrder(id, order) {\n    try {\n        // Convert partial Order to database format\n        const updateData = {\n            updated_at: new Date().toISOString()\n        };\n        if (order.status !== undefined) updateData.status = order.status;\n        if (order.paymentStatus !== undefined) updateData.payment_status = order.paymentStatus;\n        if (order.trackingNumber !== undefined) updateData.tracking_number = order.trackingNumber;\n        if (order.shippingType !== undefined) updateData.shipping_type = order.shippingType;\n        if (order.shippingCost !== undefined) updateData.shipping_cost = order.shippingCost;\n        if (order.total !== undefined) updateData.total = order.total;\n        if (order.paymentMethod !== undefined) updateData.payment_method = order.paymentMethod;\n        const { data, error } = await supabase.from(\"orders\").update(updateData).eq(\"id\", id).select().single();\n        if (error) {\n            console.error(\"Supabase updateOrder error:\", error);\n            return null;\n        }\n        console.log(\"Supabase: Updated order:\", id);\n        return convertDbOrderToOrder(data);\n    } catch (error) {\n        console.error(\"Supabase updateOrder error:\", error);\n        return null;\n    }\n}\nasync function deleteOrder(id) {\n    try {\n        // First, get the order details to restore inventory\n        const order = await getOrder(id);\n        if (!order) {\n            console.error(\"Supabase deleteOrder: Order not found:\", id);\n            return false;\n        }\n        // Restore inventory quantity\n        if (order.productId && order.selectedSize && order.selectedColor && order.quantity) {\n            try {\n                const { addInventory } = await __webpack_require__.e(/*! import() */ \"_rsc_src_lib_inventoryService_ts\").then(__webpack_require__.bind(__webpack_require__, /*! ./inventoryService */ \"(rsc)/./src/lib/inventoryService.ts\"));\n                const inventoryRestored = await addInventory(order.productId, order.selectedSize, order.selectedColor, order.quantity, `Order ${id} deleted - inventory restored`, \"admin\");\n                if (inventoryRestored) {\n                    console.log(\"Supabase deleteOrder: Inventory restored for order:\", id);\n                } else {\n                    console.warn(\"Supabase deleteOrder: Failed to restore inventory for order:\", id);\n                }\n            } catch (inventoryError) {\n                console.error(\"Supabase deleteOrder: Inventory restoration error:\", inventoryError);\n            // Continue with order deletion even if inventory restoration fails\n            }\n        }\n        // Delete the order\n        const { error } = await supabase.from(\"orders\").delete().eq(\"id\", id);\n        if (error) {\n            console.error(\"Supabase deleteOrder error:\", error);\n            return false;\n        }\n        console.log(\"Supabase: Deleted order:\", id);\n        return true;\n    } catch (error) {\n        console.error(\"Supabase deleteOrder error:\", error);\n        return false;\n    }\n}\n// Wilaya operations\nasync function getWilayaTariffs() {\n    try {\n        const { data, error } = await supabase.from(\"wilaya_tariffs\").select(\"*\").order(\"order\", {\n            ascending: true\n        });\n        if (error) {\n            console.error(\"Supabase getWilayaTariffs error:\", error);\n            return [];\n        }\n        // Transform the data to match the expected format\n        const transformedData = (data || []).map((tariff)=>({\n                id: tariff.id.toString(),\n                wilaya_id: tariff.wilaya_id,\n                name: tariff.name,\n                domicile_ecommerce: tariff.domicile_ecommerce,\n                stop_desk_ecommerce: tariff.stop_desk_ecommerce,\n                order: tariff.order,\n                // Legacy compatibility for backward compatibility\n                home_delivery: tariff.domicile_ecommerce,\n                stop_desk: tariff.stop_desk_ecommerce,\n                homeDelivery: tariff.domicile_ecommerce,\n                stopDesk: tariff.stop_desk_ecommerce,\n                domicileEcommerce: tariff.domicile_ecommerce,\n                stopDeskEcommerce: tariff.stop_desk_ecommerce\n            }));\n        return transformedData;\n    } catch (error) {\n        console.error(\"Supabase getWilayaTariffs error:\", error);\n        return [];\n    }\n}\nasync function updateWilayaTariffs(tariffs) {\n    try {\n        // Delete all existing tariffs\n        await supabase.from(\"wilaya_tariffs\").delete().neq(\"id\", 0); // Delete all records\n        // Insert new tariffs\n        if (tariffs.length > 0) {\n            // Transform the data to match database structure\n            const transformedTariffs = tariffs.map((tariff)=>({\n                    wilaya_id: tariff.wilaya_id || tariff.id,\n                    name: tariff.name,\n                    domicile_ecommerce: tariff.domicile_ecommerce || tariff.domicileEcommerce || tariff.home_delivery || tariff.homeDelivery || 0,\n                    stop_desk_ecommerce: tariff.stop_desk_ecommerce || tariff.stopDeskEcommerce || tariff.stop_desk || tariff.stopDesk || 0,\n                    order: tariff.order || 1\n                }));\n            const { error } = await supabase.from(\"wilaya_tariffs\").insert(transformedTariffs);\n            if (error) {\n                console.error(\"Supabase updateWilayaTariffs error:\", error);\n                throw error;\n            }\n        }\n        console.log(\"Supabase: Updated wilaya tariffs\");\n    } catch (error) {\n        console.error(\"Supabase updateWilayaTariffs error:\", error);\n        throw error;\n    }\n}\n// Inventory operations\nasync function getInventory() {\n    try {\n        const { data, error } = await supabase.from(\"products\").select(\"id, name, sku, stock, sizes, colors, in_stock, category\").order(\"name\");\n        if (error) {\n            console.error(\"Supabase getInventory error:\", error);\n            return [];\n        }\n        // Transform data for inventory management\n        return (data || []).map((product)=>({\n                id: product.id,\n                name: product.name,\n                sku: product.sku,\n                category: product.category,\n                inStock: product.in_stock,\n                stock: product.stock || {},\n                sizes: product.sizes || [],\n                colors: product.colors || [],\n                totalStock: calculateTotalStock(product.stock || {}),\n                stockBySize: calculateStockBySize(product.stock || {}, product.sizes || [], product.colors || [])\n            }));\n    } catch (error) {\n        console.error(\"Supabase getInventory error:\", error);\n        return [];\n    }\n}\nasync function updateInventory(productId, stockData) {\n    try {\n        const updateObj = {\n            updated_at: new Date().toISOString()\n        };\n        if (stockData.stock) {\n            updateObj.stock = stockData.stock;\n        }\n        if (stockData.inStock !== undefined) {\n            updateObj.in_stock = stockData.inStock;\n        }\n        const { data, error } = await supabase.from(\"products\").update(updateObj).eq(\"id\", productId).select().single();\n        if (error) {\n            console.error(\"Supabase updateInventory error:\", error);\n            throw error;\n        }\n        console.log(\"Supabase: Updated inventory for product:\", productId);\n        return {\n            id: data.id,\n            name: data.name,\n            stock: data.stock,\n            inStock: data.in_stock,\n            totalStock: calculateTotalStock(data.stock)\n        };\n    } catch (error) {\n        console.error(\"Supabase updateInventory error:\", error);\n        throw error;\n    }\n}\n// Helper functions for inventory calculations\nfunction calculateTotalStock(stock) {\n    if (!stock || typeof stock !== \"object\") return 0;\n    let total = 0;\n    for(const size in stock){\n        if (typeof stock[size] === \"object\") {\n            for(const color in stock[size]){\n                total += Number(stock[size][color]) || 0;\n            }\n        }\n    }\n    return total;\n}\nfunction calculateStockBySize(stock, sizes, colors) {\n    const result = {};\n    sizes.forEach((size)=>{\n        result[size] = {};\n        colors.forEach((color)=>{\n            result[size][color] = Number(stock[size]?.[color]) || 0;\n        });\n    });\n    return result;\n}\n// Stock deduction function for orders\nasync function deductStockFromOrder(order) {\n    try {\n        console.log(\"Supabase: Deducting stock for order:\", order.id);\n        // Get the product\n        const product = await getProduct(order.productId);\n        if (!product) {\n            console.error(\"Supabase: Product not found for order:\", order.productId);\n            return false;\n        }\n        // Check if we have enough stock\n        const currentStock = product.stock?.[order.selectedSize]?.[order.selectedColor] || 0;\n        if (currentStock < order.quantity) {\n            console.error(\"Supabase: Insufficient stock for order:\", {\n                productId: order.productId,\n                size: order.selectedSize,\n                color: order.selectedColor,\n                requested: order.quantity,\n                available: currentStock\n            });\n            return false;\n        }\n        // Deduct the stock from product\n        const newStock = {\n            ...product.stock,\n            [order.selectedSize]: {\n                ...product.stock?.[order.selectedSize],\n                [order.selectedColor]: currentStock - order.quantity\n            }\n        };\n        // Update the product stock\n        const updatedProduct = await updateProduct(order.productId, {\n            stock: newStock,\n            inStock: calculateTotalStock(newStock) > 0\n        });\n        if (!updatedProduct) {\n            console.error(\"Supabase: Failed to update product stock for order:\", order.id);\n            return false;\n        }\n        // Also deduct from inventory system\n        try {\n            const { addInventory } = await __webpack_require__.e(/*! import() */ \"_rsc_src_lib_inventoryService_ts\").then(__webpack_require__.bind(__webpack_require__, /*! ./inventoryService */ \"(rsc)/./src/lib/inventoryService.ts\"));\n            const inventoryDeducted = await addInventory(order.productId, order.selectedSize, order.selectedColor, -order.quantity, `Order ${order.id} created - stock deducted`, \"system\");\n            if (inventoryDeducted) {\n                console.log(\"Supabase: Successfully deducted inventory for order:\", order.id);\n            } else {\n                console.warn(\"Supabase: Failed to deduct inventory for order:\", order.id);\n            }\n        } catch (inventoryError) {\n            console.error(\"Supabase: Inventory deduction error:\", inventoryError);\n        // Continue even if inventory update fails\n        }\n        console.log(\"Supabase: Successfully deducted stock for order:\", order.id);\n        return true;\n    } catch (error) {\n        console.error(\"Supabase: Error deducting stock for order:\", error);\n        return false;\n    }\n}\n// Maintenance settings operations\nasync function getMaintenanceSettings() {\n    try {\n        const { data, error } = await supabase.from(\"maintenance_settings\").select(\"*\").eq(\"id\", \"maintenance\").single();\n        if (error) {\n            console.error(\"Supabase getMaintenanceSettings error:\", error);\n            // If table doesn't exist, return default settings\n            if (error.code === \"PGRST205\") {\n                console.log(\"Maintenance settings table not found, using default settings\");\n            }\n            // Return default settings if no data exists\n            return {\n                id: \"maintenance\",\n                is_maintenance_mode: false,\n                drop_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n                maintenance_message: \"We are currently performing maintenance. Please check back later.\",\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            };\n        }\n        return data || {\n            id: \"maintenance\",\n            is_maintenance_mode: false,\n            drop_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n            maintenance_message: \"We are currently performing maintenance. Please check back later.\",\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n        };\n    } catch (error) {\n        console.error(\"Supabase getMaintenanceSettings error:\", error);\n        return {\n            id: \"maintenance\",\n            is_maintenance_mode: false,\n            drop_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n            maintenance_message: \"We are currently performing maintenance. Please check back later.\",\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n        };\n    }\n}\nasync function updateMaintenanceSettings(settings) {\n    try {\n        const updateData = {\n            updated_at: new Date().toISOString()\n        };\n        if (settings.is_maintenance_mode !== undefined) {\n            updateData.is_maintenance_mode = settings.is_maintenance_mode;\n        }\n        if (settings.drop_date !== undefined) {\n            updateData.drop_date = settings.drop_date;\n        }\n        if (settings.maintenance_message !== undefined) {\n            updateData.maintenance_message = settings.maintenance_message;\n        }\n        console.log(\"Updating maintenance settings with:\", updateData);\n        // Try update first\n        const { data: updateResult, error: updateError } = await supabase.from(\"maintenance_settings\").update(updateData).eq(\"id\", \"maintenance\").select().single();\n        if (updateError) {\n            console.error(\"Update error:\", updateError);\n            // If update fails, try insert\n            const { data: insertResult, error: insertError } = await supabase.from(\"maintenance_settings\").insert([\n                {\n                    id: \"maintenance\",\n                    is_maintenance_mode: settings.is_maintenance_mode ?? false,\n                    drop_date: settings.drop_date ?? new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n                    maintenance_message: settings.maintenance_message ?? \"We are currently performing maintenance. Please check back later.\",\n                    created_at: new Date().toISOString(),\n                    updated_at: new Date().toISOString()\n                }\n            ]).select().single();\n            if (insertError) {\n                console.error(\"Insert error:\", insertError);\n                throw insertError;\n            }\n            console.log(\"Supabase: Created maintenance settings\");\n            return insertResult;\n        }\n        console.log(\"Supabase: Updated maintenance settings\");\n        return updateResult;\n    } catch (error) {\n        console.error(\"Supabase updateMaintenanceSettings error:\", error);\n        throw error;\n    }\n}\n// Customers methods\nasync function getCustomers() {\n    try {\n        const { data, error } = await supabase.from(\"customers\").select(\"*\").order(\"created_at\", {\n            ascending: false\n        });\n        if (error) {\n            console.error(\"Supabase getCustomers error:\", error);\n            throw error;\n        }\n        console.log(\"Supabase: Fetched\", data?.length || 0, \"customers\");\n        return data || [];\n    } catch (error) {\n        console.error(\"Supabase getCustomers error:\", error);\n        throw error;\n    }\n}\nasync function addCustomer(customerData) {\n    try {\n        const now = new Date().toISOString();\n        const customer = {\n            ...customerData,\n            id: `customer_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n            created_at: now,\n            updated_at: now\n        };\n        const { data, error } = await supabase.from(\"customers\").insert([\n            customer\n        ]).select().single();\n        if (error) {\n            console.error(\"Supabase addCustomer error:\", error);\n            throw error;\n        }\n        console.log(\"Supabase: Created customer:\", data.id);\n        return {\n            id: data.id,\n            name: data.name,\n            email: data.email,\n            phone: data.phone,\n            address: data.address,\n            city: data.city,\n            wilaya: data.wilaya,\n            createdAt: new Date(data.created_at),\n            updatedAt: new Date(data.updated_at)\n        };\n    } catch (error) {\n        console.error(\"Supabase addCustomer error:\", error);\n        throw error;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/supabaseDatabase.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fwilaya%2Froute&page=%2Fapi%2Fwilaya%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fwilaya%2Froute.ts&appDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();