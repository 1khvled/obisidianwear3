"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/orders/[id]/route";
exports.ids = ["app/api/orders/[id]/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Forders%2F%5Bid%5D%2Froute&page=%2Fapi%2Forders%2F%5Bid%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Forders%2F%5Bid%5D%2Froute.ts&appDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Forders%2F%5Bid%5D%2Froute&page=%2Fapi%2Forders%2F%5Bid%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Forders%2F%5Bid%5D%2Froute.ts&appDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D! ***!
  \***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_HP_Desktop_projectt_src_app_api_orders_id_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/orders/[id]/route.ts */ \"(rsc)/./src/app/api/orders/[id]/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/orders/[id]/route\",\n        pathname: \"/api/orders/[id]\",\n        filename: \"route\",\n        bundlePath: \"app/api/orders/[id]/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projectt\\\\src\\\\app\\\\api\\\\orders\\\\[id]\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_HP_Desktop_projectt_src_app_api_orders_id_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/orders/[id]/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZvcmRlcnMlMkYlNUJpZCU1RCUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGb3JkZXJzJTJGJTVCaWQlNUQlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZvcmRlcnMlMkYlNUJpZCU1RCUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNIUCU1Q0Rlc2t0b3AlNUNwcm9qZWN0dCU1Q3NyYyU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q1VzZXJzJTVDSFAlNUNEZXNrdG9wJTVDcHJvamVjdHQmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9c3RhbmRhbG9uZSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ3VCO0FBQ3BHO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsdUdBQXVHO0FBQy9HO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDNko7O0FBRTdKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2JzaWRpYW4td2Vhci8/ZjgzMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxIUFxcXFxEZXNrdG9wXFxcXHByb2plY3R0XFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXG9yZGVyc1xcXFxbaWRdXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcInN0YW5kYWxvbmVcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvb3JkZXJzL1tpZF0vcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9vcmRlcnMvW2lkXVwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvb3JkZXJzL1tpZF0vcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJDOlxcXFxVc2Vyc1xcXFxIUFxcXFxEZXNrdG9wXFxcXHByb2plY3R0XFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXG9yZGVyc1xcXFxbaWRdXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL29yZGVycy9baWRdL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCwgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Forders%2F%5Bid%5D%2Froute&page=%2Fapi%2Forders%2F%5Bid%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Forders%2F%5Bid%5D%2Froute.ts&appDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/orders/[id]/route.ts":
/*!******************************************!*\
  !*** ./src/app/api/orders/[id]/route.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DELETE: () => (/* binding */ DELETE),\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   PUT: () => (/* binding */ PUT),\n/* harmony export */   runtime: () => (/* binding */ runtime)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var _lib_supabaseDatabase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/supabaseDatabase */ \"(rsc)/./src/lib/supabaseDatabase.ts\");\n/* harmony import */ var _lib_authMiddleware__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/authMiddleware */ \"(rsc)/./src/lib/authMiddleware.ts\");\n\n\n\n// Ensure we use Node.js runtime for Supabase compatibility\nconst runtime = \"nodejs\";\n// GET /api/orders/[id] - Get single order\nasync function GET(request, { params }) {\n    try {\n        const { id } = params;\n        // Check if Supabase is available\n        if (false) {}\n        const order = await (0,_lib_supabaseDatabase__WEBPACK_IMPORTED_MODULE_1__.getOrder)(id);\n        if (!order) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: \"Order not found\"\n            }, {\n                status: 404\n            });\n        }\n        console.log(\"Orders API: GET single order:\", id);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: true,\n            data: order,\n            timestamp: Date.now()\n        });\n    } catch (error) {\n        console.error(\"Orders API: GET single error:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: false,\n            error: \"Failed to fetch order\"\n        }, {\n            status: 500\n        });\n    }\n}\n// PUT /api/orders/[id] - Update order\nasync function PUT(request, { params }) {\n    try {\n        const { id } = params;\n        const updateData = await request.json();\n        // Check if Supabase is available\n        if (false) {}\n        // Get the current order to check if status is changing to cancelled\n        const currentOrder = await (0,_lib_supabaseDatabase__WEBPACK_IMPORTED_MODULE_1__.getOrder)(id);\n        if (currentOrder && updateData.status === \"cancelled\" && currentOrder.status !== \"cancelled\") {\n            // Return stock when order is cancelled\n            const { returnStockFromOrder } = await __webpack_require__.e(/*! import() */ \"_rsc_src_lib_optimizedDatabase_ts\").then(__webpack_require__.bind(__webpack_require__, /*! @/lib/optimizedDatabase */ \"(rsc)/./src/lib/optimizedDatabase.ts\"));\n            await returnStockFromOrder(currentOrder);\n            console.log(\"Orders API: Returned stock for cancelled order:\", id);\n        }\n        const updatedOrder = await (0,_lib_supabaseDatabase__WEBPACK_IMPORTED_MODULE_1__.updateOrder)(id, updateData);\n        if (!updatedOrder) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: \"Order not found\"\n            }, {\n                status: 404\n            });\n        }\n        console.log(\"Orders API: PUT request - updated order:\", id);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: true,\n            data: updatedOrder,\n            message: updateData.status === \"cancelled\" ? \"Order cancelled and stock returned to inventory\" : \"Order updated successfully\",\n            timestamp: Date.now()\n        });\n    } catch (error) {\n        console.error(\"Orders API: PUT error:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: false,\n            error: \"Failed to update order\"\n        }, {\n            status: 500\n        });\n    }\n}\n// DELETE /api/orders/[id] - Delete order (requires authentication)\nconst DELETE = (0,_lib_authMiddleware__WEBPACK_IMPORTED_MODULE_2__.createAuthenticatedHandler)(async (request, { params })=>{\n    try {\n        const { id } = params;\n        // Check if Supabase is available\n        if (false) {}\n        const deletedOrder = await (0,_lib_supabaseDatabase__WEBPACK_IMPORTED_MODULE_1__.getOrder)(id);\n        if (!deletedOrder) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: \"Order not found\"\n            }, {\n                status: 404\n            });\n        }\n        // Delete the order (this will automatically return stock)\n        const success = await (0,_lib_supabaseDatabase__WEBPACK_IMPORTED_MODULE_1__.deleteOrder)(id);\n        if (!success) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: \"Failed to delete order\"\n            }, {\n                status: 500\n            });\n        }\n        console.log(\"Orders API: DELETE request - deleted order and returned stock:\", id);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: true,\n            data: deletedOrder,\n            message: \"Order deleted successfully and stock returned to inventory\",\n            timestamp: Date.now()\n        });\n    } catch (error) {\n        console.error(\"Orders API: DELETE error:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: false,\n            error: \"Failed to delete order\"\n        }, {\n            status: 500\n        });\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/orders/[id]/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/authMiddleware.ts":
/*!***********************************!*\
  !*** ./src/lib/authMiddleware.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAuthenticatedHandler: () => (/* binding */ createAuthenticatedHandler),\n/* harmony export */   requireAuth: () => (/* binding */ requireAuth)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n\nasync function requireAuth(request) {\n    try {\n        // Get session ID from request headers or cookies\n        const sessionId = request.headers.get(\"x-session-id\") || request.cookies.get(\"obsidian-admin-session-id\")?.value;\n        if (!sessionId) {\n            console.log(\"No session ID found in request\");\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Authentication required\"\n            }, {\n                status: 401\n            });\n        }\n        console.log(\"Checking session:\", sessionId);\n        // Verify session with database using the session ID from the request\n        const session = await verifySessionById(sessionId);\n        if (!session || !session.isActive) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Invalid or expired session\"\n            }, {\n                status: 401\n            });\n        }\n        // Check if session is expired\n        const now = new Date();\n        const expiresAt = new Date(session.expiresAt);\n        if (now > expiresAt) {\n            await deactivateSessionById(sessionId);\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Session expired\"\n            }, {\n                status: 401\n            });\n        }\n        // Add user info to request for use in route handlers\n        request.user = {\n            username: session.username,\n            sessionId: session.sessionId\n        };\n        return null; // Authentication successful, continue to route handler\n    } catch (error) {\n        console.error(\"Authentication error:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: \"Authentication failed\"\n        }, {\n            status: 500\n        });\n    }\n}\n// Helper function to verify session by ID\nasync function verifySessionById(sessionId) {\n    try {\n        const { supabase } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./supabaseDatabase */ \"(rsc)/./src/lib/supabaseDatabase.ts\"));\n        if (!supabase) return null;\n        const { data, error } = await supabase.from(\"admin_sessions\").select(\"*\").eq(\"session_id\", sessionId).eq(\"is_active\", true).single();\n        if (error && error.code !== \"PGRST116\") {\n            console.error(\"Error fetching session:\", error);\n            return null;\n        }\n        return data;\n    } catch (error) {\n        console.error(\"Error verifying session:\", error);\n        return null;\n    }\n}\n// Helper function to deactivate session by ID\nasync function deactivateSessionById(sessionId) {\n    try {\n        const { supabase } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./supabaseDatabase */ \"(rsc)/./src/lib/supabaseDatabase.ts\"));\n        if (!supabase) return false;\n        const { error } = await supabase.from(\"admin_sessions\").update({\n            is_active: false\n        }).eq(\"session_id\", sessionId);\n        return !error;\n    } catch (error) {\n        console.error(\"Error deactivating session:\", error);\n        return false;\n    }\n}\nfunction createAuthenticatedHandler(handler) {\n    return async (request, context)=>{\n        const authError = await requireAuth(request);\n        if (authError) {\n            return authError;\n        }\n        return handler(request, context);\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2F1dGhNaWRkbGV3YXJlLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF3RDtBQVVqRCxlQUFlQyxZQUFZQyxPQUFvQjtJQUNwRCxJQUFJO1FBQ0YsaURBQWlEO1FBQ2pELE1BQU1DLFlBQVlELFFBQVFFLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLG1CQUNyQkgsUUFBUUksT0FBTyxDQUFDRCxHQUFHLENBQUMsOEJBQThCRTtRQUVuRSxJQUFJLENBQUNKLFdBQVc7WUFDZEssUUFBUUMsR0FBRyxDQUFDO1lBQ1osT0FBT1Qsa0ZBQVlBLENBQUNVLElBQUksQ0FDdEI7Z0JBQUVDLE9BQU87WUFBMEIsR0FDbkM7Z0JBQUVDLFFBQVE7WUFBSTtRQUVsQjtRQUVBSixRQUFRQyxHQUFHLENBQUMscUJBQXFCTjtRQUVqQyxxRUFBcUU7UUFDckUsTUFBTVUsVUFBVSxNQUFNQyxrQkFBa0JYO1FBQ3hDLElBQUksQ0FBQ1UsV0FBVyxDQUFDQSxRQUFRRSxRQUFRLEVBQUU7WUFDakMsT0FBT2Ysa0ZBQVlBLENBQUNVLElBQUksQ0FDdEI7Z0JBQUVDLE9BQU87WUFBNkIsR0FDdEM7Z0JBQUVDLFFBQVE7WUFBSTtRQUVsQjtRQUVBLDhCQUE4QjtRQUM5QixNQUFNSSxNQUFNLElBQUlDO1FBQ2hCLE1BQU1DLFlBQVksSUFBSUQsS0FBS0osUUFBUUssU0FBUztRQUM1QyxJQUFJRixNQUFNRSxXQUFXO1lBQ25CLE1BQU1DLHNCQUFzQmhCO1lBQzVCLE9BQU9ILGtGQUFZQSxDQUFDVSxJQUFJLENBQ3RCO2dCQUFFQyxPQUFPO1lBQWtCLEdBQzNCO2dCQUFFQyxRQUFRO1lBQUk7UUFFbEI7UUFFQSxxREFBcUQ7UUFDcERWLFFBQWlDa0IsSUFBSSxHQUFHO1lBQ3ZDQyxVQUFVUixRQUFRUSxRQUFRO1lBQzFCbEIsV0FBV1UsUUFBUVYsU0FBUztRQUM5QjtRQUVBLE9BQU8sTUFBTSx1REFBdUQ7SUFDdEUsRUFBRSxPQUFPUSxPQUFPO1FBQ2RILFFBQVFHLEtBQUssQ0FBQyx5QkFBeUJBO1FBQ3ZDLE9BQU9YLGtGQUFZQSxDQUFDVSxJQUFJLENBQ3RCO1lBQUVDLE9BQU87UUFBd0IsR0FDakM7WUFBRUMsUUFBUTtRQUFJO0lBRWxCO0FBQ0Y7QUFFQSwwQ0FBMEM7QUFDMUMsZUFBZUUsa0JBQWtCWCxTQUFpQjtJQUNoRCxJQUFJO1FBQ0YsTUFBTSxFQUFFbUIsUUFBUSxFQUFFLEdBQUcsTUFBTSxxSkFBTztRQUNsQyxJQUFJLENBQUNBLFVBQVUsT0FBTztRQUV0QixNQUFNLEVBQUVDLElBQUksRUFBRVosS0FBSyxFQUFFLEdBQUcsTUFBTVcsU0FDM0JFLElBQUksQ0FBQyxrQkFDTEMsTUFBTSxDQUFDLEtBQ1BDLEVBQUUsQ0FBQyxjQUFjdkIsV0FDakJ1QixFQUFFLENBQUMsYUFBYSxNQUNoQkMsTUFBTTtRQUVULElBQUloQixTQUFTQSxNQUFNaUIsSUFBSSxLQUFLLFlBQVk7WUFDdENwQixRQUFRRyxLQUFLLENBQUMsMkJBQTJCQTtZQUN6QyxPQUFPO1FBQ1Q7UUFFQSxPQUFPWTtJQUNULEVBQUUsT0FBT1osT0FBTztRQUNkSCxRQUFRRyxLQUFLLENBQUMsNEJBQTRCQTtRQUMxQyxPQUFPO0lBQ1Q7QUFDRjtBQUVBLDhDQUE4QztBQUM5QyxlQUFlUSxzQkFBc0JoQixTQUFpQjtJQUNwRCxJQUFJO1FBQ0YsTUFBTSxFQUFFbUIsUUFBUSxFQUFFLEdBQUcsTUFBTSxxSkFBTztRQUNsQyxJQUFJLENBQUNBLFVBQVUsT0FBTztRQUV0QixNQUFNLEVBQUVYLEtBQUssRUFBRSxHQUFHLE1BQU1XLFNBQ3JCRSxJQUFJLENBQUMsa0JBQ0xLLE1BQU0sQ0FBQztZQUFFQyxXQUFXO1FBQU0sR0FDMUJKLEVBQUUsQ0FBQyxjQUFjdkI7UUFFcEIsT0FBTyxDQUFDUTtJQUNWLEVBQUUsT0FBT0EsT0FBTztRQUNkSCxRQUFRRyxLQUFLLENBQUMsK0JBQStCQTtRQUM3QyxPQUFPO0lBQ1Q7QUFDRjtBQUVPLFNBQVNvQiwyQkFDZEMsT0FBZ0Y7SUFFaEYsT0FBTyxPQUFPOUIsU0FBc0IrQjtRQUNsQyxNQUFNQyxZQUFZLE1BQU1qQyxZQUFZQztRQUNwQyxJQUFJZ0MsV0FBVztZQUNiLE9BQU9BO1FBQ1Q7UUFFQSxPQUFPRixRQUFROUIsU0FBaUMrQjtJQUNsRDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2JzaWRpYW4td2Vhci8uL3NyYy9saWIvYXV0aE1pZGRsZXdhcmUudHM/YjI2MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xyXG5pbXBvcnQgc2Vzc2lvblNlcnZpY2UgZnJvbSAnLi9zZXNzaW9uU2VydmljZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEF1dGhlbnRpY2F0ZWRSZXF1ZXN0IGV4dGVuZHMgTmV4dFJlcXVlc3Qge1xyXG4gIHVzZXI/OiB7XHJcbiAgICB1c2VybmFtZTogc3RyaW5nO1xyXG4gICAgc2Vzc2lvbklkOiBzdHJpbmc7XHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlcXVpcmVBdXRoKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KTogUHJvbWlzZTxOZXh0UmVzcG9uc2UgfCBudWxsPiB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIEdldCBzZXNzaW9uIElEIGZyb20gcmVxdWVzdCBoZWFkZXJzIG9yIGNvb2tpZXNcclxuICAgIGNvbnN0IHNlc3Npb25JZCA9IHJlcXVlc3QuaGVhZGVycy5nZXQoJ3gtc2Vzc2lvbi1pZCcpIHx8IFxyXG4gICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LmNvb2tpZXMuZ2V0KCdvYnNpZGlhbi1hZG1pbi1zZXNzaW9uLWlkJyk/LnZhbHVlO1xyXG5cclxuICAgIGlmICghc2Vzc2lvbklkKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdObyBzZXNzaW9uIElEIGZvdW5kIGluIHJlcXVlc3QnKTtcclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICAgIHsgZXJyb3I6ICdBdXRoZW50aWNhdGlvbiByZXF1aXJlZCcgfSxcclxuICAgICAgICB7IHN0YXR1czogNDAxIH1cclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zb2xlLmxvZygnQ2hlY2tpbmcgc2Vzc2lvbjonLCBzZXNzaW9uSWQpO1xyXG5cclxuICAgIC8vIFZlcmlmeSBzZXNzaW9uIHdpdGggZGF0YWJhc2UgdXNpbmcgdGhlIHNlc3Npb24gSUQgZnJvbSB0aGUgcmVxdWVzdFxyXG4gICAgY29uc3Qgc2Vzc2lvbiA9IGF3YWl0IHZlcmlmeVNlc3Npb25CeUlkKHNlc3Npb25JZCk7XHJcbiAgICBpZiAoIXNlc3Npb24gfHwgIXNlc3Npb24uaXNBY3RpdmUpIHtcclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICAgIHsgZXJyb3I6ICdJbnZhbGlkIG9yIGV4cGlyZWQgc2Vzc2lvbicgfSxcclxuICAgICAgICB7IHN0YXR1czogNDAxIH1cclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDaGVjayBpZiBzZXNzaW9uIGlzIGV4cGlyZWRcclxuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XHJcbiAgICBjb25zdCBleHBpcmVzQXQgPSBuZXcgRGF0ZShzZXNzaW9uLmV4cGlyZXNBdCk7XHJcbiAgICBpZiAobm93ID4gZXhwaXJlc0F0KSB7XHJcbiAgICAgIGF3YWl0IGRlYWN0aXZhdGVTZXNzaW9uQnlJZChzZXNzaW9uSWQpO1xyXG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXHJcbiAgICAgICAgeyBlcnJvcjogJ1Nlc3Npb24gZXhwaXJlZCcgfSxcclxuICAgICAgICB7IHN0YXR1czogNDAxIH1cclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBBZGQgdXNlciBpbmZvIHRvIHJlcXVlc3QgZm9yIHVzZSBpbiByb3V0ZSBoYW5kbGVyc1xyXG4gICAgKHJlcXVlc3QgYXMgQXV0aGVudGljYXRlZFJlcXVlc3QpLnVzZXIgPSB7XHJcbiAgICAgIHVzZXJuYW1lOiBzZXNzaW9uLnVzZXJuYW1lLFxyXG4gICAgICBzZXNzaW9uSWQ6IHNlc3Npb24uc2Vzc2lvbklkXHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBudWxsOyAvLyBBdXRoZW50aWNhdGlvbiBzdWNjZXNzZnVsLCBjb250aW51ZSB0byByb3V0ZSBoYW5kbGVyXHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0F1dGhlbnRpY2F0aW9uIGVycm9yOicsIGVycm9yKTtcclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgeyBlcnJvcjogJ0F1dGhlbnRpY2F0aW9uIGZhaWxlZCcgfSxcclxuICAgICAgeyBzdGF0dXM6IDUwMCB9XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIHZlcmlmeSBzZXNzaW9uIGJ5IElEXHJcbmFzeW5jIGZ1bmN0aW9uIHZlcmlmeVNlc3Npb25CeUlkKHNlc3Npb25JZDogc3RyaW5nKSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHsgc3VwYWJhc2UgfSA9IGF3YWl0IGltcG9ydCgnLi9zdXBhYmFzZURhdGFiYXNlJyk7XHJcbiAgICBpZiAoIXN1cGFiYXNlKSByZXR1cm4gbnVsbDtcclxuXHJcbiAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxyXG4gICAgICAuZnJvbSgnYWRtaW5fc2Vzc2lvbnMnKVxyXG4gICAgICAuc2VsZWN0KCcqJylcclxuICAgICAgLmVxKCdzZXNzaW9uX2lkJywgc2Vzc2lvbklkKVxyXG4gICAgICAuZXEoJ2lzX2FjdGl2ZScsIHRydWUpXHJcbiAgICAgIC5zaW5nbGUoKTtcclxuXHJcbiAgICBpZiAoZXJyb3IgJiYgZXJyb3IuY29kZSAhPT0gJ1BHUlNUMTE2Jykge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBzZXNzaW9uOicsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGRhdGE7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHZlcmlmeWluZyBzZXNzaW9uOicsIGVycm9yKTtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxufVxyXG5cclxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGRlYWN0aXZhdGUgc2Vzc2lvbiBieSBJRFxyXG5hc3luYyBmdW5jdGlvbiBkZWFjdGl2YXRlU2Vzc2lvbkJ5SWQoc2Vzc2lvbklkOiBzdHJpbmcpIHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgeyBzdXBhYmFzZSB9ID0gYXdhaXQgaW1wb3J0KCcuL3N1cGFiYXNlRGF0YWJhc2UnKTtcclxuICAgIGlmICghc3VwYWJhc2UpIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxyXG4gICAgICAuZnJvbSgnYWRtaW5fc2Vzc2lvbnMnKVxyXG4gICAgICAudXBkYXRlKHsgaXNfYWN0aXZlOiBmYWxzZSB9KVxyXG4gICAgICAuZXEoJ3Nlc3Npb25faWQnLCBzZXNzaW9uSWQpO1xyXG5cclxuICAgIHJldHVybiAhZXJyb3I7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGRlYWN0aXZhdGluZyBzZXNzaW9uOicsIGVycm9yKTtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBdXRoZW50aWNhdGVkSGFuZGxlcihcclxuICBoYW5kbGVyOiAocmVxdWVzdDogQXV0aGVudGljYXRlZFJlcXVlc3QsIGNvbnRleHQ/OiBhbnkpID0+IFByb21pc2U8TmV4dFJlc3BvbnNlPlxyXG4pIHtcclxuICByZXR1cm4gYXN5bmMgKHJlcXVlc3Q6IE5leHRSZXF1ZXN0LCBjb250ZXh0PzogYW55KTogUHJvbWlzZTxOZXh0UmVzcG9uc2U+ID0+IHtcclxuICAgIGNvbnN0IGF1dGhFcnJvciA9IGF3YWl0IHJlcXVpcmVBdXRoKHJlcXVlc3QpO1xyXG4gICAgaWYgKGF1dGhFcnJvcikge1xyXG4gICAgICByZXR1cm4gYXV0aEVycm9yO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBoYW5kbGVyKHJlcXVlc3QgYXMgQXV0aGVudGljYXRlZFJlcXVlc3QsIGNvbnRleHQpO1xyXG4gIH07XHJcbn1cclxuIl0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsInJlcXVpcmVBdXRoIiwicmVxdWVzdCIsInNlc3Npb25JZCIsImhlYWRlcnMiLCJnZXQiLCJjb29raWVzIiwidmFsdWUiLCJjb25zb2xlIiwibG9nIiwianNvbiIsImVycm9yIiwic3RhdHVzIiwic2Vzc2lvbiIsInZlcmlmeVNlc3Npb25CeUlkIiwiaXNBY3RpdmUiLCJub3ciLCJEYXRlIiwiZXhwaXJlc0F0IiwiZGVhY3RpdmF0ZVNlc3Npb25CeUlkIiwidXNlciIsInVzZXJuYW1lIiwic3VwYWJhc2UiLCJkYXRhIiwiZnJvbSIsInNlbGVjdCIsImVxIiwic2luZ2xlIiwiY29kZSIsInVwZGF0ZSIsImlzX2FjdGl2ZSIsImNyZWF0ZUF1dGhlbnRpY2F0ZWRIYW5kbGVyIiwiaGFuZGxlciIsImNvbnRleHQiLCJhdXRoRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/authMiddleware.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/supabaseDatabase.ts":
/*!*************************************!*\
  !*** ./src/lib/supabaseDatabase.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addCustomer: () => (/* binding */ addCustomer),\n/* harmony export */   addOrder: () => (/* binding */ addOrder),\n/* harmony export */   addProduct: () => (/* binding */ addProduct),\n/* harmony export */   deductStockFromOrder: () => (/* binding */ deductStockFromOrder),\n/* harmony export */   deleteOrder: () => (/* binding */ deleteOrder),\n/* harmony export */   deleteProduct: () => (/* binding */ deleteProduct),\n/* harmony export */   getCustomers: () => (/* binding */ getCustomers),\n/* harmony export */   getInventory: () => (/* binding */ getInventory),\n/* harmony export */   getMaintenanceStatus: () => (/* binding */ getMaintenanceStatus),\n/* harmony export */   getOrder: () => (/* binding */ getOrder),\n/* harmony export */   getOrders: () => (/* binding */ getOrders),\n/* harmony export */   getProduct: () => (/* binding */ getProduct),\n/* harmony export */   getProducts: () => (/* binding */ getProducts),\n/* harmony export */   getWilayaTariffs: () => (/* binding */ getWilayaTariffs),\n/* harmony export */   returnStockFromOrder: () => (/* binding */ returnStockFromOrder),\n/* harmony export */   supabase: () => (/* binding */ supabase),\n/* harmony export */   updateInventory: () => (/* binding */ updateInventory),\n/* harmony export */   updateMaintenanceStatus: () => (/* binding */ updateMaintenanceStatus),\n/* harmony export */   updateOrder: () => (/* binding */ updateOrder),\n/* harmony export */   updateProduct: () => (/* binding */ updateProduct),\n/* harmony export */   updateWilayaTariffs: () => (/* binding */ updateWilayaTariffs)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n// Database service using Supabase (free tier)\n// This provides persistent storage with a real database\n\n// Supabase configuration - MUST use environment variables\nconst supabaseUrl = \"https://zrmxcjklkthpyanfslsw.supabase.co\";\nconst supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpybXhjamtsa3RocHlhbmZzbHN3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY5MDYxMzAsImV4cCI6MjA3MjQ4MjEzMH0.2Tjh9pPzc6BUGoV3lDUBymXzE_dvAGs1O_WewTdetE0\";\n// Only throw error during server-side rendering, not during build or client-side\nif (!supabaseUrl || !supabaseKey) {\n    // Only throw error during server-side rendering, not during build or client-side\n    if (true) {\n        const missingVars = [];\n        if (!supabaseUrl) missingVars.push(\"NEXT_PUBLIC_SUPABASE_URL\");\n        if (!supabaseKey) missingVars.push(\"NEXT_PUBLIC_SUPABASE_ANON_KEY\");\n        throw new Error(`Missing Supabase environment variables: ${missingVars.join(\", \")}. Please set these in your Vercel environment variables or .env.local file.`);\n    }\n}\n// Create supabase client with fallback for build time\nconst supabase = supabaseUrl && supabaseKey ? (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseKey) : null;\n// Export the supabase client for direct use\n\n// Helper function to convert database product to Product interface\nfunction convertDbProductToProduct(dbProduct) {\n    return {\n        id: dbProduct.id,\n        name: dbProduct.name || \"\",\n        description: dbProduct.description || \"\",\n        price: Number(dbProduct.price) || 0,\n        originalPrice: Number(dbProduct.original_price) || 0,\n        image: dbProduct.image || \"\",\n        images: dbProduct.images || [],\n        stock: dbProduct.stock || {},\n        category: dbProduct.category || \"\",\n        sizes: dbProduct.sizes || [],\n        colors: dbProduct.colors || [],\n        inStock: dbProduct.in_stock || false,\n        status: dbProduct.status || \"available\",\n        rating: Number(dbProduct.rating) || 0,\n        reviews: Number(dbProduct.reviews) || 0,\n        sku: dbProduct.sku || \"\",\n        weight: Number(dbProduct.weight) || 0,\n        dimensions: dbProduct.dimensions || null,\n        tags: dbProduct.tags || [],\n        featured: dbProduct.featured || false,\n        createdAt: dbProduct.created_at ? new Date(dbProduct.created_at) : new Date(),\n        updatedAt: dbProduct.updated_at ? new Date(dbProduct.updated_at) : new Date()\n    };\n}\n// Cache for products to reduce database calls\nlet productsCache = null;\nlet productsCacheTime = 0;\nconst CACHE_DURATION = 30000; // 30 seconds\n// Products operations\nasync function getProducts() {\n    try {\n        // Return cached data if still fresh\n        if (productsCache && Date.now() - productsCacheTime < CACHE_DURATION) {\n            console.log(\"Supabase: Returning cached products\");\n            return productsCache;\n        }\n        if (!supabase) {\n            console.error(\"Supabase client not initialized\");\n            return productsCache || [];\n        }\n        const { data, error } = await supabase.from(\"products\").select(\"*\").order(\"created_at\", {\n            ascending: false\n        });\n        if (error) {\n            console.error(\"Supabase getProducts error:\", error);\n            return productsCache || [];\n        }\n        const products = (data || []).map(convertDbProductToProduct);\n        // Update cache\n        productsCache = products;\n        productsCacheTime = Date.now();\n        return products;\n    } catch (error) {\n        console.error(\"Supabase getProducts error:\", error);\n        return productsCache || [];\n    }\n}\nasync function getProduct(id) {\n    try {\n        if (!supabase) {\n            console.error(\"Supabase client not initialized\");\n            return null;\n        }\n        const { data, error } = await supabase.from(\"products\").select(\"*\").eq(\"id\", id).single();\n        if (error) {\n            console.error(\"Supabase getProduct error:\", error);\n            return null;\n        }\n        return convertDbProductToProduct(data);\n    } catch (error) {\n        console.error(\"Supabase getProduct error:\", error);\n        return null;\n    }\n}\nasync function addProduct(product) {\n    try {\n        if (!supabase) {\n            console.error(\"Supabase client not initialized\");\n            throw new Error(\"Database not available\");\n        }\n        // Convert camelCase to snake_case for database\n        const dbProduct = {\n            id: product.id,\n            name: product.name,\n            description: product.description,\n            price: product.price,\n            original_price: product.originalPrice,\n            image: product.image,\n            images: product.images || [],\n            stock: product.stock,\n            category: product.category,\n            sizes: product.sizes || [],\n            colors: product.colors || [],\n            in_stock: product.inStock,\n            rating: product.rating,\n            reviews: product.reviews,\n            sku: product.sku,\n            weight: product.weight,\n            dimensions: product.dimensions,\n            tags: product.tags || [],\n            featured: product.featured || false\n        };\n        const { data, error } = await supabase.from(\"products\").insert([\n            dbProduct\n        ]).select().single();\n        if (error) {\n            console.error(\"Supabase addProduct error:\", error);\n            throw error;\n        }\n        console.log(\"Supabase: Added product:\", product.id);\n        // Invalidate cache\n        productsCache = null;\n        // Convert back to camelCase\n        return convertDbProductToProduct(data);\n    } catch (error) {\n        console.error(\"Supabase addProduct error:\", error);\n        throw error;\n    }\n}\nasync function updateProduct(id, product) {\n    try {\n        if (!supabase) {\n            console.error(\"Supabase client not initialized\");\n            return null;\n        }\n        // Convert camelCase to snake_case for database\n        const dbProduct = {};\n        if (product.name !== undefined) dbProduct.name = product.name;\n        if (product.description !== undefined) dbProduct.description = product.description;\n        if (product.price !== undefined) dbProduct.price = product.price;\n        if (product.originalPrice !== undefined) dbProduct.original_price = product.originalPrice;\n        if (product.image !== undefined) dbProduct.image = product.image;\n        if (product.images !== undefined) dbProduct.images = product.images;\n        if (product.stock !== undefined) dbProduct.stock = product.stock;\n        if (product.category !== undefined) dbProduct.category = product.category;\n        if (product.sizes !== undefined) dbProduct.sizes = product.sizes;\n        if (product.colors !== undefined) dbProduct.colors = product.colors;\n        if (product.inStock !== undefined) dbProduct.in_stock = product.inStock;\n        if (product.rating !== undefined) dbProduct.rating = product.rating;\n        if (product.reviews !== undefined) dbProduct.reviews = product.reviews;\n        if (product.sku !== undefined) dbProduct.sku = product.sku;\n        if (product.weight !== undefined) dbProduct.weight = product.weight;\n        if (product.dimensions !== undefined) dbProduct.dimensions = product.dimensions;\n        if (product.tags !== undefined) dbProduct.tags = product.tags;\n        if (product.featured !== undefined) dbProduct.featured = product.featured;\n        const { data, error } = await supabase.from(\"products\").update(dbProduct).eq(\"id\", id).select().single();\n        if (error) {\n            console.error(\"Supabase updateProduct error:\", error);\n            return null;\n        }\n        console.log(\"Supabase: Updated product:\", id);\n        // Invalidate cache\n        productsCache = null;\n        return convertDbProductToProduct(data);\n    } catch (error) {\n        console.error(\"Supabase updateProduct error:\", error);\n        return null;\n    }\n}\nasync function deleteProduct(id) {\n    try {\n        if (!supabase) {\n            console.error(\"Supabase client not initialized\");\n            return false;\n        }\n        const { error } = await supabase.from(\"products\").delete().eq(\"id\", id);\n        if (error) {\n            console.error(\"Supabase deleteProduct error:\", error);\n            return false;\n        }\n        console.log(\"Supabase: Deleted product:\", id);\n        // Invalidate cache\n        productsCache = null;\n        return true;\n    } catch (error) {\n        console.error(\"Supabase deleteProduct error:\", error);\n        return false;\n    }\n}\n// Helper function to convert database order to Order interface\nfunction convertDbOrderToOrder(dbOrder) {\n    // Handle both old and new schema\n    const isOldSchema = dbOrder.items && Array.isArray(dbOrder.items);\n    if (isOldSchema) {\n        // Old schema with items array\n        const firstItem = dbOrder.items && dbOrder.items.length > 0 ? dbOrder.items[0] : {};\n        return {\n            id: dbOrder.id,\n            productId: firstItem.productId || \"\",\n            productName: firstItem.productName || \"\",\n            productImage: firstItem.productImage || \"\",\n            customerName: firstItem.customerName || \"\",\n            customerPhone: firstItem.customerPhone || \"\",\n            customerEmail: firstItem.customerEmail || \"\",\n            customerAddress: firstItem.customerAddress || \"\",\n            wilayaId: firstItem.wilayaId || 0,\n            wilayaName: firstItem.wilayaName || \"\",\n            shippingType: dbOrder.shipping_type || \"homeDelivery\",\n            shippingCost: Number(dbOrder.shipping_cost) || 0,\n            quantity: firstItem.quantity || 1,\n            selectedSize: firstItem.selectedSize || \"\",\n            selectedColor: firstItem.selectedColor || \"\",\n            subtotal: Number(dbOrder.total) - Number(dbOrder.shipping_cost) || 0,\n            total: Number(dbOrder.total) || 0,\n            orderDate: new Date(dbOrder.order_date),\n            status: dbOrder.status || \"pending\",\n            trackingNumber: dbOrder.tracking_number || \"\",\n            notes: firstItem.notes || \"\",\n            paymentMethod: dbOrder.payment_method || \"cod\",\n            paymentStatus: dbOrder.payment_status || \"pending\",\n            estimatedDelivery: firstItem.estimatedDelivery || \"\",\n            createdAt: new Date(dbOrder.created_at),\n            updatedAt: new Date(dbOrder.updated_at)\n        };\n    } else {\n        // New schema with direct fields\n        return {\n            id: dbOrder.id,\n            productId: dbOrder.product_id || \"\",\n            productName: dbOrder.product_name || \"\",\n            productImage: dbOrder.product_image || \"\",\n            customerName: dbOrder.customer_name || \"\",\n            customerPhone: dbOrder.customer_phone || \"\",\n            customerEmail: dbOrder.customer_email || \"\",\n            customerAddress: dbOrder.customer_address || \"\",\n            wilayaId: dbOrder.wilaya_id || 0,\n            wilayaName: dbOrder.wilaya_name || \"\",\n            shippingType: dbOrder.shipping_type || \"homeDelivery\",\n            shippingCost: Number(dbOrder.shipping_cost) || 0,\n            quantity: dbOrder.quantity || 1,\n            selectedSize: dbOrder.selected_size || \"\",\n            selectedColor: dbOrder.selected_color || \"\",\n            subtotal: Number(dbOrder.subtotal) || 0,\n            total: Number(dbOrder.total) || 0,\n            orderDate: new Date(dbOrder.order_date),\n            status: dbOrder.status || \"pending\",\n            trackingNumber: dbOrder.tracking_number || \"\",\n            notes: dbOrder.notes || \"\",\n            paymentMethod: dbOrder.payment_method || \"cod\",\n            paymentStatus: dbOrder.payment_status || \"pending\",\n            estimatedDelivery: dbOrder.estimated_delivery || \"\",\n            createdAt: new Date(dbOrder.created_at),\n            updatedAt: new Date(dbOrder.updated_at)\n        };\n    }\n}\n// Cache for orders to reduce database calls\nlet ordersCache = null;\nlet ordersCacheTime = 0;\n// Orders operations\nasync function getOrders() {\n    try {\n        if (!supabase) {\n            console.error(\"Supabase client not initialized\");\n            return ordersCache || [];\n        }\n        // Return cached data if still fresh\n        if (ordersCache && Date.now() - ordersCacheTime < CACHE_DURATION) {\n            console.log(\"Supabase: Returning cached orders\");\n            return ordersCache;\n        }\n        const { data, error } = await supabase.from(\"orders\").select(\"*\").order(\"order_date\", {\n            ascending: false\n        });\n        if (error) {\n            console.error(\"Supabase getOrders error:\", error);\n            return ordersCache || [];\n        }\n        const orders = (data || []).map(convertDbOrderToOrder);\n        // Update cache\n        ordersCache = orders;\n        ordersCacheTime = Date.now();\n        return orders;\n    } catch (error) {\n        console.error(\"Supabase getOrders error:\", error);\n        return ordersCache || [];\n    }\n}\nasync function getOrder(id) {\n    try {\n        if (!supabase) {\n            console.error(\"Supabase client not initialized\");\n            return null;\n        }\n        const { data, error } = await supabase.from(\"orders\").select(\"*\").eq(\"id\", id).single();\n        if (error) {\n            console.error(\"Supabase getOrder error:\", error);\n            return null;\n        }\n        return convertDbOrderToOrder(data);\n    } catch (error) {\n        console.error(\"Supabase getOrder error:\", error);\n        return null;\n    }\n}\nasync function addOrder(order) {\n    try {\n        if (!supabase) {\n            console.error(\"Supabase client not initialized\");\n            throw new Error(\"Database not available\");\n        }\n        // Convert Order interface to database format (matching the orders table schema)\n        const dbOrder = {\n            id: order.id,\n            customer_name: order.customerName,\n            customer_email: order.customerEmail,\n            customer_phone: order.customerPhone,\n            customer_address: order.customerAddress,\n            wilaya_id: order.wilayaId,\n            wilaya_name: order.wilayaName,\n            product_id: order.productId,\n            product_name: order.productName,\n            product_image: order.productImage,\n            selected_size: order.selectedSize,\n            selected_color: order.selectedColor,\n            quantity: order.quantity,\n            subtotal: order.subtotal,\n            shipping_cost: order.shippingCost,\n            total: order.total,\n            shipping_type: order.shippingType,\n            payment_method: order.paymentMethod,\n            payment_status: order.paymentStatus,\n            status: order.status,\n            order_date: order.orderDate.toISOString(),\n            notes: order.notes,\n            tracking_number: order.trackingNumber,\n            estimated_delivery: order.estimatedDelivery,\n            created_at: order.createdAt.toISOString(),\n            updated_at: order.updatedAt.toISOString()\n        };\n        const { data, error } = await supabase.from(\"orders\").insert([\n            dbOrder\n        ]).select().single();\n        if (error) {\n            console.error(\"Supabase addOrder error:\", error);\n            throw error;\n        }\n        console.log(\"Supabase: Added order:\", order.id);\n        return convertDbOrderToOrder(data);\n    } catch (error) {\n        console.error(\"Supabase addOrder error:\", error);\n        throw error;\n    }\n}\nasync function updateOrder(id, order) {\n    try {\n        if (!supabase) {\n            console.error(\"Supabase client not initialized\");\n            return null;\n        }\n        // Convert partial Order to database format\n        const updateData = {\n            updated_at: new Date().toISOString()\n        };\n        if (order.status !== undefined) updateData.status = order.status;\n        if (order.paymentStatus !== undefined) updateData.payment_status = order.paymentStatus;\n        if (order.trackingNumber !== undefined) updateData.tracking_number = order.trackingNumber;\n        if (order.shippingType !== undefined) updateData.shipping_type = order.shippingType;\n        if (order.shippingCost !== undefined) updateData.shipping_cost = order.shippingCost;\n        if (order.total !== undefined) updateData.total = order.total;\n        if (order.paymentMethod !== undefined) updateData.payment_method = order.paymentMethod;\n        const { data, error } = await supabase.from(\"orders\").update(updateData).eq(\"id\", id).select().single();\n        if (error) {\n            console.error(\"Supabase updateOrder error:\", error);\n            return null;\n        }\n        console.log(\"Supabase: Updated order:\", id);\n        return convertDbOrderToOrder(data);\n    } catch (error) {\n        console.error(\"Supabase updateOrder error:\", error);\n        return null;\n    }\n}\nasync function deleteOrder(id) {\n    try {\n        if (!supabase) {\n            console.error(\"Supabase client not initialized\");\n            return false;\n        }\n        const { error } = await supabase.from(\"orders\").delete().eq(\"id\", id);\n        if (error) {\n            console.error(\"Supabase deleteOrder error:\", error);\n            return false;\n        }\n        console.log(\"Supabase: Deleted order:\", id);\n        return true;\n    } catch (error) {\n        console.error(\"Supabase deleteOrder error:\", error);\n        return false;\n    }\n}\n// Customers operations\nasync function getCustomers() {\n    try {\n        if (!supabase) {\n            console.error(\"Supabase client not initialized\");\n            return [];\n        }\n        const { data, error } = await supabase.from(\"customers\").select(\"*\").order(\"created_at\", {\n            ascending: false\n        });\n        if (error) {\n            console.error(\"Supabase getCustomers error:\", error);\n            return [];\n        }\n        return data || [];\n    } catch (error) {\n        console.error(\"Supabase getCustomers error:\", error);\n        return [];\n    }\n}\nasync function addCustomer(customer) {\n    try {\n        if (!supabase) {\n            console.error(\"Supabase client not initialized\");\n            throw new Error(\"Database not available\");\n        }\n        const { data, error } = await supabase.from(\"customers\").insert([\n            customer\n        ]).select().single();\n        if (error) {\n            console.error(\"Supabase addCustomer error:\", error);\n            throw error;\n        }\n        return data;\n    } catch (error) {\n        console.error(\"Supabase addCustomer error:\", error);\n        throw error;\n    }\n}\n// Maintenance operations\nasync function getMaintenanceStatus() {\n    try {\n        if (!supabase) {\n            console.error(\"Supabase client not initialized\");\n            return {\n                is_maintenance: false,\n                drop_date: null\n            };\n        }\n        const { data, error } = await supabase.from(\"maintenance_status\").select(\"*\").eq(\"id\", \"maintenance\").single();\n        if (error) {\n            console.error(\"Supabase getMaintenanceStatus error:\", error);\n            return {\n                is_maintenance: false,\n                drop_date: null\n            };\n        }\n        return data || {\n            is_maintenance: false,\n            drop_date: null\n        };\n    } catch (error) {\n        console.error(\"Supabase getMaintenanceStatus error:\", error);\n        return {\n            is_maintenance: false,\n            drop_date: null\n        };\n    }\n}\nasync function updateMaintenanceStatus(isMaintenance, dropDate) {\n    try {\n        if (!supabase) {\n            console.error(\"Supabase client not initialized\");\n            return false;\n        }\n        const updateData = {\n            is_maintenance: isMaintenance,\n            updated_at: new Date().toISOString()\n        };\n        if (dropDate) {\n            updateData.drop_date = dropDate;\n        }\n        const { error } = await supabase.from(\"maintenance_status\").update(updateData).eq(\"id\", \"maintenance\");\n        if (error) {\n            console.error(\"Supabase updateMaintenanceStatus error:\", error);\n            return false;\n        }\n        console.log(\"Supabase: Updated maintenance status\");\n        return true;\n    } catch (error) {\n        console.error(\"Supabase updateMaintenanceStatus error:\", error);\n        return false;\n    }\n}\n// Wilaya operations\nasync function getWilayaTariffs() {\n    try {\n        if (!supabase) {\n            console.error(\"Supabase client not initialized\");\n            return [];\n        }\n        const { data, error } = await supabase.from(\"wilaya_tariffs\").select(\"*\").order(\"wilaya_code\", {\n            ascending: true\n        });\n        if (error) {\n            console.error(\"Supabase getWilayaTariffs error:\", error);\n            return [];\n        }\n        return data || [];\n    } catch (error) {\n        console.error(\"Supabase getWilayaTariffs error:\", error);\n        return [];\n    }\n}\nasync function updateWilayaTariffs(tariffs) {\n    try {\n        if (!supabase) {\n            console.error(\"Supabase client not initialized\");\n            throw new Error(\"Database not available\");\n        }\n        // Delete all existing tariffs\n        await supabase.from(\"wilaya_tariffs\").delete().neq(\"id\", 0); // Delete all records\n        // Insert new tariffs\n        if (tariffs.length > 0) {\n            const { error } = await supabase.from(\"wilaya_tariffs\").insert(tariffs);\n            if (error) {\n                console.error(\"Supabase updateWilayaTariffs error:\", error);\n                throw error;\n            }\n        }\n        console.log(\"Supabase: Updated wilaya tariffs\");\n    } catch (error) {\n        console.error(\"Supabase updateWilayaTariffs error:\", error);\n        throw error;\n    }\n}\n// Inventory operations\nasync function getInventory() {\n    try {\n        if (!supabase) {\n            console.error(\"Supabase client not initialized\");\n            return [];\n        }\n        const { data, error } = await supabase.from(\"products\").select(\"id, name, sku, stock, sizes, colors, in_stock, category\").order(\"name\");\n        if (error) {\n            console.error(\"Supabase getInventory error:\", error);\n            return [];\n        }\n        // Transform data for inventory management\n        return (data || []).map((product)=>({\n                id: product.id,\n                name: product.name,\n                sku: product.sku,\n                category: product.category,\n                inStock: product.in_stock,\n                stock: product.stock || {},\n                sizes: product.sizes || [],\n                colors: product.colors || [],\n                totalStock: calculateTotalStock(product.stock || {}),\n                stockBySize: calculateStockBySize(product.stock || {}, product.sizes || [], product.colors || [])\n            }));\n    } catch (error) {\n        console.error(\"Supabase getInventory error:\", error);\n        return [];\n    }\n}\nasync function updateInventory(productId, stockData) {\n    try {\n        if (!supabase) {\n            console.error(\"Supabase client not initialized\");\n            throw new Error(\"Database not available\");\n        }\n        const updateObj = {\n            updated_at: new Date().toISOString()\n        };\n        if (stockData.stock) {\n            updateObj.stock = stockData.stock;\n        }\n        if (stockData.inStock !== undefined) {\n            updateObj.in_stock = stockData.inStock;\n        }\n        const { data, error } = await supabase.from(\"products\").update(updateObj).eq(\"id\", productId).select().single();\n        if (error) {\n            console.error(\"Supabase updateInventory error:\", error);\n            throw error;\n        }\n        console.log(\"Supabase: Updated inventory for product:\", productId);\n        return {\n            id: data.id,\n            name: data.name,\n            stock: data.stock,\n            inStock: data.in_stock,\n            totalStock: calculateTotalStock(data.stock)\n        };\n    } catch (error) {\n        console.error(\"Supabase updateInventory error:\", error);\n        throw error;\n    }\n}\n// Helper functions for inventory calculations\nfunction calculateTotalStock(stock) {\n    if (!stock || typeof stock !== \"object\") return 0;\n    let total = 0;\n    for(const size in stock){\n        if (typeof stock[size] === \"object\") {\n            for(const color in stock[size]){\n                total += Number(stock[size][color]) || 0;\n            }\n        }\n    }\n    return total;\n}\nfunction calculateStockBySize(stock, sizes, colors) {\n    const result = {};\n    sizes.forEach((size)=>{\n        result[size] = {};\n        colors.forEach((color)=>{\n            result[size][color] = Number(stock[size]?.[color]) || 0;\n        });\n    });\n    return result;\n}\n// Stock deduction function for orders\nasync function deductStockFromOrder(order) {\n    try {\n        console.log(\"Supabase: Deducting stock for order:\", order.id);\n        // Get the product\n        const product = await getProduct(order.productId);\n        if (!product) {\n            console.error(\"Supabase: Product not found for order:\", order.productId);\n            return false;\n        }\n        // Check if we have enough stock\n        const currentStock = product.stock?.[order.selectedSize]?.[order.selectedColor] || 0;\n        if (currentStock < order.quantity) {\n            console.error(\"Supabase: Insufficient stock for order:\", {\n                productId: order.productId,\n                size: order.selectedSize,\n                color: order.selectedColor,\n                requested: order.quantity,\n                available: currentStock\n            });\n            return false;\n        }\n        // Deduct the stock\n        const newStock = {\n            ...product.stock,\n            [order.selectedSize]: {\n                ...product.stock?.[order.selectedSize],\n                [order.selectedColor]: currentStock - order.quantity\n            }\n        };\n        // Update the product stock\n        const updatedProduct = await updateProduct(order.productId, {\n            stock: newStock,\n            inStock: calculateTotalStock(newStock) > 0\n        });\n        if (updatedProduct) {\n            console.log(\"Supabase: Successfully deducted stock for order:\", order.id);\n            return true;\n        } else {\n            console.error(\"Supabase: Failed to update product stock for order:\", order.id);\n            return false;\n        }\n    } catch (error) {\n        console.error(\"Supabase: Error deducting stock for order:\", error);\n        return false;\n    }\n}\n// Stock return function for cancelled/deleted orders\nasync function returnStockFromOrder(order) {\n    try {\n        console.log(\"Supabase: Returning stock for order:\", order.id);\n        // Get the product\n        const product = await getProduct(order.productId);\n        if (!product) {\n            console.error(\"Supabase: Product not found for order:\", order.productId);\n            return false;\n        }\n        // Get current stock\n        const currentStock = product.stock?.[order.selectedSize]?.[order.selectedColor] || 0;\n        // Return the stock\n        const newStock = {\n            ...product.stock,\n            [order.selectedSize]: {\n                ...product.stock?.[order.selectedSize],\n                [order.selectedColor]: currentStock + order.quantity\n            }\n        };\n        // Update the product stock\n        const updatedProduct = await updateProduct(order.productId, {\n            stock: newStock,\n            inStock: calculateTotalStock(newStock) > 0\n        });\n        if (updatedProduct) {\n            console.log(\"Supabase: Successfully returned stock for order:\", order.id, {\n                productId: order.productId,\n                size: order.selectedSize,\n                color: order.selectedColor,\n                quantity: order.quantity,\n                newTotalStock: calculateTotalStock(newStock)\n            });\n            return true;\n        } else {\n            console.error(\"Supabase: Failed to return product stock for order:\", order.id);\n            return false;\n        }\n    } catch (error) {\n        console.error(\"Supabase: Error returning stock for order:\", error);\n        return false;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/supabaseDatabase.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Forders%2F%5Bid%5D%2Froute&page=%2Fapi%2Forders%2F%5Bid%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Forders%2F%5Bid%5D%2Froute.ts&appDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();