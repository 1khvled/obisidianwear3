"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/orders/route";
exports.ids = ["app/api/orders/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("child_process");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "dns":
/*!**********************!*\
  !*** external "dns" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("dns");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("net");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Forders%2Froute&page=%2Fapi%2Forders%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Forders%2Froute.ts&appDir=C%3A%5CUsers%5CHP%5CDesktop%5CObsidian%20wear%5Cprojectt%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CHP%5CDesktop%5CObsidian%20wear%5Cprojectt&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Forders%2Froute&page=%2Fapi%2Forders%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Forders%2Froute.ts&appDir=C%3A%5CUsers%5CHP%5CDesktop%5CObsidian%20wear%5Cprojectt%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CHP%5CDesktop%5CObsidian%20wear%5Cprojectt&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_HP_Desktop_Obsidian_wear_projectt_src_app_api_orders_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/orders/route.ts */ \"(rsc)/./src/app/api/orders/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/orders/route\",\n        pathname: \"/api/orders\",\n        filename: \"route\",\n        bundlePath: \"app/api/orders/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\HP\\\\Desktop\\\\Obsidian wear\\\\projectt\\\\src\\\\app\\\\api\\\\orders\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_HP_Desktop_Obsidian_wear_projectt_src_app_api_orders_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/orders/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZvcmRlcnMlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRm9yZGVycyUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRm9yZGVycyUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNIUCU1Q0Rlc2t0b3AlNUNPYnNpZGlhbiUyMHdlYXIlNUNwcm9qZWN0dCU1Q3NyYyU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q1VzZXJzJTVDSFAlNUNEZXNrdG9wJTVDT2JzaWRpYW4lMjB3ZWFyJTVDcHJvamVjdHQmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9c3RhbmRhbG9uZSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ2dDO0FBQzdHO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsdUdBQXVHO0FBQy9HO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDNko7O0FBRTdKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2JzaWRpYW4td2Vhci8/YWU3MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxIUFxcXFxEZXNrdG9wXFxcXE9ic2lkaWFuIHdlYXJcXFxccHJvamVjdHRcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcb3JkZXJzXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcInN0YW5kYWxvbmVcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvb3JkZXJzL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvb3JkZXJzXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9vcmRlcnMvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJDOlxcXFxVc2Vyc1xcXFxIUFxcXFxEZXNrdG9wXFxcXE9ic2lkaWFuIHdlYXJcXFxccHJvamVjdHRcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcb3JkZXJzXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL29yZGVycy9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBoZWFkZXJIb29rcywgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Forders%2Froute&page=%2Fapi%2Forders%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Forders%2Froute.ts&appDir=C%3A%5CUsers%5CHP%5CDesktop%5CObsidian%20wear%5Cprojectt%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CHP%5CDesktop%5CObsidian%20wear%5Cprojectt&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/orders/route.ts":
/*!*************************************!*\
  !*** ./src/app/api/orders/route.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   runtime: () => (/* binding */ runtime)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var _lib_supabaseDatabase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/supabaseDatabase */ \"(rsc)/./src/lib/supabaseDatabase.ts\");\n/* harmony import */ var _lib_authMiddleware__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/authMiddleware */ \"(rsc)/./src/lib/authMiddleware.ts\");\n/* harmony import */ var _lib_validation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/validation */ \"(rsc)/./src/lib/validation.ts\");\n/* harmony import */ var _lib_emailService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/emailService */ \"(rsc)/./src/lib/emailService.ts\");\n\n\n\n\n\n// Ensure we use Node.js runtime for Supabase compatibility\nconst runtime = \"nodejs\";\n// GET /api/orders - Get all orders\nasync function GET() {\n    try {\n        console.log(\"Orders API: GET request started\");\n        // Check if Supabase is available\n        if (false) {}\n        const orders = await (0,_lib_supabaseDatabase__WEBPACK_IMPORTED_MODULE_1__.getOrders)();\n        console.log(\"Orders API: GET request - returning\", orders.length, \"orders\");\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: true,\n            data: orders,\n            count: orders.length,\n            timestamp: Date.now()\n        });\n    } catch (error) {\n        console.error(\"Orders API: GET error:\", error);\n        console.error(\"Orders API: Error details:\", {\n            message: error instanceof Error ? error.message : \"Unknown error\",\n            stack: error instanceof Error ? error.stack : undefined\n        });\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: false,\n            error: \"Failed to fetch orders\",\n            details: error instanceof Error ? error.message : \"Unknown error\"\n        }, {\n            status: 500\n        });\n    }\n}\n// POST /api/orders - Create new order (PROTECTED)\nconst POST = (0,_lib_authMiddleware__WEBPACK_IMPORTED_MODULE_2__.withAuth)(async (request)=>{\n    try {\n        const orderData = await request.json();\n        console.log(\"Orders API: Received order data:\", orderData);\n        // Validate required fields\n        const validation = _lib_validation__WEBPACK_IMPORTED_MODULE_3__.ValidationUtils.validateRequired(orderData, [\n            \"customerName\",\n            \"productId\",\n            \"total\"\n        ]);\n        if (!validation.isValid) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: `Missing required fields: ${validation.missingFields.join(\", \")}`\n            }, {\n                status: 400\n            });\n        }\n        // Validate email if provided\n        if (orderData.customerEmail && !_lib_validation__WEBPACK_IMPORTED_MODULE_3__.ValidationUtils.isValidEmail(orderData.customerEmail)) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: \"Invalid email format\"\n            }, {\n                status: 400\n            });\n        }\n        // Validate phone if provided\n        if (orderData.customerPhone && !_lib_validation__WEBPACK_IMPORTED_MODULE_3__.ValidationUtils.isValidPhone(orderData.customerPhone)) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: \"Invalid phone number format\"\n            }, {\n                status: 400\n            });\n        }\n        // Validate numeric fields\n        if (!_lib_validation__WEBPACK_IMPORTED_MODULE_3__.ValidationUtils.isValidNumber(orderData.total, 0, 999999)) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: \"Total must be a valid number between 0 and 999999\"\n            }, {\n                status: 400\n            });\n        }\n        if (!_lib_validation__WEBPACK_IMPORTED_MODULE_3__.ValidationUtils.isValidNumber(orderData.quantity, 1, 100)) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: \"Quantity must be between 1 and 100\"\n            }, {\n                status: 400\n            });\n        }\n        // Sanitize order data\n        const sanitizedData = _lib_validation__WEBPACK_IMPORTED_MODULE_3__.ValidationUtils.sanitizeOrderData(orderData);\n        // Generate unique ID and create complete Order object\n        const newOrder = {\n            id: `ORD-${Date.now()}`,\n            customerName: sanitizedData.customerName,\n            customerEmail: sanitizedData.customerEmail,\n            customerPhone: sanitizedData.customerPhone,\n            customerAddress: sanitizedData.customerAddress,\n            customerCity: sanitizedData.customerCity || \"\",\n            wilayaId: sanitizedData.wilayaId || 0,\n            wilayaName: sanitizedData.wilayaName || \"\",\n            productId: sanitizedData.productId,\n            productName: sanitizedData.productName,\n            productImage: sanitizedData.productImage || \"\",\n            selectedSize: sanitizedData.selectedSize,\n            selectedColor: sanitizedData.selectedColor,\n            quantity: sanitizedData.quantity,\n            subtotal: sanitizedData.subtotal || 0,\n            shippingCost: sanitizedData.shippingCost || 0,\n            total: sanitizedData.total,\n            shippingType: sanitizedData.shippingType || \"homeDelivery\",\n            paymentMethod: sanitizedData.paymentMethod || \"cod\",\n            paymentStatus: \"pending\",\n            status: \"pending\",\n            orderDate: new Date(),\n            notes: sanitizedData.notes,\n            trackingNumber: \"\",\n            estimatedDelivery: sanitizedData.estimatedDelivery || \"\",\n            createdAt: new Date(),\n            updatedAt: new Date()\n        };\n        const addedOrder = await (0,_lib_supabaseDatabase__WEBPACK_IMPORTED_MODULE_1__.addOrder)(newOrder);\n        // Automatically deduct stock from inventory\n        const stockDeducted = await (0,_lib_supabaseDatabase__WEBPACK_IMPORTED_MODULE_1__.deductStockFromOrder)(newOrder);\n        if (!stockDeducted) {\n            console.warn(\"Orders API: Failed to deduct stock for order:\", newOrder.id);\n        // Note: We still return success for the order, but log the stock issue\n        }\n        // Send order confirmation email (async, don't wait for it)\n        if (addedOrder.customerEmail) {\n            (0,_lib_emailService__WEBPACK_IMPORTED_MODULE_4__.sendOrderConfirmationEmail)(addedOrder).catch((error)=>{\n                console.error(\"Orders API: Failed to send confirmation email:\", error);\n            // Don't fail the order creation if email fails\n            });\n        }\n        console.log(\"Orders API: POST request - created order:\", newOrder.id);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: true,\n            data: addedOrder,\n            message: \"Order created successfully\",\n            stockDeducted: stockDeducted,\n            timestamp: Date.now()\n        }, {\n            status: 201\n        });\n    } catch (error) {\n        console.error(\"Orders API: POST error:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: false,\n            error: \"Failed to create order\"\n        }, {\n            status: 500\n        });\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/orders/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/authMiddleware.ts":
/*!***********************************!*\
  !*** ./src/lib/authMiddleware.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authenticateRequest: () => (/* binding */ authenticateRequest),\n/* harmony export */   generateApiToken: () => (/* binding */ generateApiToken),\n/* harmony export */   withAuth: () => (/* binding */ withAuth)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var _rateLimiter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rateLimiter */ \"(rsc)/./src/lib/rateLimiter.ts\");\n\n\n// Simple authentication middleware for API routes\nfunction authenticateRequest(request) {\n    // Get authorization header\n    const authHeader = request.headers.get(\"authorization\");\n    if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n        return false;\n    }\n    // Extract token\n    const token = authHeader.substring(7);\n    // Simple token validation (in production, use JWT or proper session validation)\n    const expectedToken = process.env.NEXT_PUBLIC_API_AUTH_TOKEN || \"obsidian-api-token-2025\";\n    return token === expectedToken;\n}\n// Middleware wrapper for protected API routes\nfunction withAuth(handler) {\n    return async (request, ...args)=>{\n        // Skip auth for public routes\n        const url = new URL(request.url);\n        const publicRoutes = [\n            \"/api/maintenance\",\n            \"/api/test-db\",\n            \"/api/test-supabase\"\n        ];\n        if (publicRoutes.some((route)=>url.pathname.startsWith(route))) {\n            return handler(request, ...args);\n        }\n        // Get client IP for rate limiting\n        const clientIP = request.ip || request.headers.get(\"x-forwarded-for\") || \"unknown\";\n        // Check rate limit\n        const rateLimitResult = (0,_rateLimiter__WEBPACK_IMPORTED_MODULE_1__.checkRateLimit)(clientIP, _rateLimiter__WEBPACK_IMPORTED_MODULE_1__.apiRateLimiter);\n        if (!rateLimitResult.allowed) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: \"Too Many Requests\",\n                message: \"Rate limit exceeded. Please try again later.\"\n            }, {\n                status: 429,\n                headers: rateLimitResult.headers\n            });\n        }\n        // Check authentication\n        if (!authenticateRequest(request)) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: \"Unauthorized\",\n                message: \"Authentication required\"\n            }, {\n                status: 401,\n                headers: rateLimitResult.headers\n            });\n        }\n        return handler(request, ...args);\n    };\n}\n// Generate API token for admin\nfunction generateApiToken() {\n    return process.env.NEXT_PUBLIC_API_AUTH_TOKEN || \"obsidian-api-token-2025\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2F1dGhNaWRkbGV3YXJlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXdEO0FBQ087QUFFL0Qsa0RBQWtEO0FBQzNDLFNBQVNHLG9CQUFvQkMsT0FBb0I7SUFDdEQsMkJBQTJCO0lBQzNCLE1BQU1DLGFBQWFELFFBQVFFLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDO0lBRXZDLElBQUksQ0FBQ0YsY0FBYyxDQUFDQSxXQUFXRyxVQUFVLENBQUMsWUFBWTtRQUNwRCxPQUFPO0lBQ1Q7SUFFQSxnQkFBZ0I7SUFDaEIsTUFBTUMsUUFBUUosV0FBV0ssU0FBUyxDQUFDO0lBRW5DLGdGQUFnRjtJQUNoRixNQUFNQyxnQkFBZ0JDLFFBQVFDLEdBQUcsQ0FBQ0MsMEJBQTBCLElBQUk7SUFFaEUsT0FBT0wsVUFBVUU7QUFDbkI7QUFFQSw4Q0FBOEM7QUFDdkMsU0FBU0ksU0FBU0MsT0FBaUI7SUFDeEMsT0FBTyxPQUFPWixTQUFzQixHQUFHYTtRQUNyQyw4QkFBOEI7UUFDOUIsTUFBTUMsTUFBTSxJQUFJQyxJQUFJZixRQUFRYyxHQUFHO1FBQy9CLE1BQU1FLGVBQWU7WUFBQztZQUFvQjtZQUFnQjtTQUFxQjtRQUUvRSxJQUFJQSxhQUFhQyxJQUFJLENBQUNDLENBQUFBLFFBQVNKLElBQUlLLFFBQVEsQ0FBQ2YsVUFBVSxDQUFDYyxTQUFTO1lBQzlELE9BQU9OLFFBQVFaLFlBQVlhO1FBQzdCO1FBRUEsa0NBQWtDO1FBQ2xDLE1BQU1PLFdBQVdwQixRQUFRcUIsRUFBRSxJQUFJckIsUUFBUUUsT0FBTyxDQUFDQyxHQUFHLENBQUMsc0JBQXNCO1FBRXpFLG1CQUFtQjtRQUNuQixNQUFNbUIsa0JBQWtCekIsNERBQWNBLENBQUN1QixVQUFVdEIsd0RBQWNBO1FBQy9ELElBQUksQ0FBQ3dCLGdCQUFnQkMsT0FBTyxFQUFFO1lBQzVCLE9BQU8zQixrRkFBWUEsQ0FBQzRCLElBQUksQ0FDdEI7Z0JBQ0VDLFNBQVM7Z0JBQ1RDLE9BQU87Z0JBQ1BDLFNBQVM7WUFDWCxHQUNBO2dCQUNFQyxRQUFRO2dCQUNSMUIsU0FBU29CLGdCQUFnQnBCLE9BQU87WUFDbEM7UUFFSjtRQUVBLHVCQUF1QjtRQUN2QixJQUFJLENBQUNILG9CQUFvQkMsVUFBVTtZQUNqQyxPQUFPSixrRkFBWUEsQ0FBQzRCLElBQUksQ0FDdEI7Z0JBQ0VDLFNBQVM7Z0JBQ1RDLE9BQU87Z0JBQ1BDLFNBQVM7WUFDWCxHQUNBO2dCQUNFQyxRQUFRO2dCQUNSMUIsU0FBU29CLGdCQUFnQnBCLE9BQU87WUFDbEM7UUFFSjtRQUVBLE9BQU9VLFFBQVFaLFlBQVlhO0lBQzdCO0FBQ0Y7QUFFQSwrQkFBK0I7QUFDeEIsU0FBU2dCO0lBQ2QsT0FBT3JCLFFBQVFDLEdBQUcsQ0FBQ0MsMEJBQTBCLElBQUk7QUFDbkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vYnNpZGlhbi13ZWFyLy4vc3JjL2xpYi9hdXRoTWlkZGxld2FyZS50cz9iMjYxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XHJcbmltcG9ydCB7IGNoZWNrUmF0ZUxpbWl0LCBhcGlSYXRlTGltaXRlciB9IGZyb20gJy4vcmF0ZUxpbWl0ZXInO1xyXG5cclxuLy8gU2ltcGxlIGF1dGhlbnRpY2F0aW9uIG1pZGRsZXdhcmUgZm9yIEFQSSByb3V0ZXNcclxuZXhwb3J0IGZ1bmN0aW9uIGF1dGhlbnRpY2F0ZVJlcXVlc3QocmVxdWVzdDogTmV4dFJlcXVlc3QpOiBib29sZWFuIHtcclxuICAvLyBHZXQgYXV0aG9yaXphdGlvbiBoZWFkZXJcclxuICBjb25zdCBhdXRoSGVhZGVyID0gcmVxdWVzdC5oZWFkZXJzLmdldCgnYXV0aG9yaXphdGlvbicpO1xyXG4gIFxyXG4gIGlmICghYXV0aEhlYWRlciB8fCAhYXV0aEhlYWRlci5zdGFydHNXaXRoKCdCZWFyZXIgJykpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIC8vIEV4dHJhY3QgdG9rZW5cclxuICBjb25zdCB0b2tlbiA9IGF1dGhIZWFkZXIuc3Vic3RyaW5nKDcpO1xyXG4gIFxyXG4gIC8vIFNpbXBsZSB0b2tlbiB2YWxpZGF0aW9uIChpbiBwcm9kdWN0aW9uLCB1c2UgSldUIG9yIHByb3BlciBzZXNzaW9uIHZhbGlkYXRpb24pXHJcbiAgY29uc3QgZXhwZWN0ZWRUb2tlbiA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0FQSV9BVVRIX1RPS0VOIHx8ICdvYnNpZGlhbi1hcGktdG9rZW4tMjAyNSc7XHJcbiAgXHJcbiAgcmV0dXJuIHRva2VuID09PSBleHBlY3RlZFRva2VuO1xyXG59XHJcblxyXG4vLyBNaWRkbGV3YXJlIHdyYXBwZXIgZm9yIHByb3RlY3RlZCBBUEkgcm91dGVzXHJcbmV4cG9ydCBmdW5jdGlvbiB3aXRoQXV0aChoYW5kbGVyOiBGdW5jdGlvbikge1xyXG4gIHJldHVybiBhc3luYyAocmVxdWVzdDogTmV4dFJlcXVlc3QsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XHJcbiAgICAvLyBTa2lwIGF1dGggZm9yIHB1YmxpYyByb3V0ZXNcclxuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xyXG4gICAgY29uc3QgcHVibGljUm91dGVzID0gWycvYXBpL21haW50ZW5hbmNlJywgJy9hcGkvdGVzdC1kYicsICcvYXBpL3Rlc3Qtc3VwYWJhc2UnXTtcclxuICAgIFxyXG4gICAgaWYgKHB1YmxpY1JvdXRlcy5zb21lKHJvdXRlID0+IHVybC5wYXRobmFtZS5zdGFydHNXaXRoKHJvdXRlKSkpIHtcclxuICAgICAgcmV0dXJuIGhhbmRsZXIocmVxdWVzdCwgLi4uYXJncyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gR2V0IGNsaWVudCBJUCBmb3IgcmF0ZSBsaW1pdGluZ1xyXG4gICAgY29uc3QgY2xpZW50SVAgPSByZXF1ZXN0LmlwIHx8IHJlcXVlc3QuaGVhZGVycy5nZXQoJ3gtZm9yd2FyZGVkLWZvcicpIHx8ICd1bmtub3duJztcclxuICAgIFxyXG4gICAgLy8gQ2hlY2sgcmF0ZSBsaW1pdFxyXG4gICAgY29uc3QgcmF0ZUxpbWl0UmVzdWx0ID0gY2hlY2tSYXRlTGltaXQoY2xpZW50SVAsIGFwaVJhdGVMaW1pdGVyKTtcclxuICAgIGlmICghcmF0ZUxpbWl0UmVzdWx0LmFsbG93ZWQpIHtcclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICAgIHsgXHJcbiAgICAgICAgICBzdWNjZXNzOiBmYWxzZSwgXHJcbiAgICAgICAgICBlcnJvcjogJ1RvbyBNYW55IFJlcXVlc3RzJyxcclxuICAgICAgICAgIG1lc3NhZ2U6ICdSYXRlIGxpbWl0IGV4Y2VlZGVkLiBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLicgXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7IFxyXG4gICAgICAgICAgc3RhdHVzOiA0MjksXHJcbiAgICAgICAgICBoZWFkZXJzOiByYXRlTGltaXRSZXN1bHQuaGVhZGVyc1xyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDaGVjayBhdXRoZW50aWNhdGlvblxyXG4gICAgaWYgKCFhdXRoZW50aWNhdGVSZXF1ZXN0KHJlcXVlc3QpKSB7XHJcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgICB7IFxyXG4gICAgICAgICAgc3VjY2VzczogZmFsc2UsIFxyXG4gICAgICAgICAgZXJyb3I6ICdVbmF1dGhvcml6ZWQnLFxyXG4gICAgICAgICAgbWVzc2FnZTogJ0F1dGhlbnRpY2F0aW9uIHJlcXVpcmVkJyBcclxuICAgICAgICB9LFxyXG4gICAgICAgIHsgXHJcbiAgICAgICAgICBzdGF0dXM6IDQwMSxcclxuICAgICAgICAgIGhlYWRlcnM6IHJhdGVMaW1pdFJlc3VsdC5oZWFkZXJzXHJcbiAgICAgICAgfVxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBoYW5kbGVyKHJlcXVlc3QsIC4uLmFyZ3MpO1xyXG4gIH07XHJcbn1cclxuXHJcbi8vIEdlbmVyYXRlIEFQSSB0b2tlbiBmb3IgYWRtaW5cclxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlQXBpVG9rZW4oKTogc3RyaW5nIHtcclxuICByZXR1cm4gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQVBJX0FVVEhfVE9LRU4gfHwgJ29ic2lkaWFuLWFwaS10b2tlbi0yMDI1JztcclxufVxyXG4iXSwibmFtZXMiOlsiTmV4dFJlc3BvbnNlIiwiY2hlY2tSYXRlTGltaXQiLCJhcGlSYXRlTGltaXRlciIsImF1dGhlbnRpY2F0ZVJlcXVlc3QiLCJyZXF1ZXN0IiwiYXV0aEhlYWRlciIsImhlYWRlcnMiLCJnZXQiLCJzdGFydHNXaXRoIiwidG9rZW4iLCJzdWJzdHJpbmciLCJleHBlY3RlZFRva2VuIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX0FQSV9BVVRIX1RPS0VOIiwid2l0aEF1dGgiLCJoYW5kbGVyIiwiYXJncyIsInVybCIsIlVSTCIsInB1YmxpY1JvdXRlcyIsInNvbWUiLCJyb3V0ZSIsInBhdGhuYW1lIiwiY2xpZW50SVAiLCJpcCIsInJhdGVMaW1pdFJlc3VsdCIsImFsbG93ZWQiLCJqc29uIiwic3VjY2VzcyIsImVycm9yIiwibWVzc2FnZSIsInN0YXR1cyIsImdlbmVyYXRlQXBpVG9rZW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/authMiddleware.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/emailService.ts":
/*!*********************************!*\
  !*** ./src/lib/emailService.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sendOrderConfirmationEmail: () => (/* binding */ sendOrderConfirmationEmail)\n/* harmony export */ });\nasync function sendOrderConfirmationEmail(order) {\n    try {\n        const emailData = {\n            to: order.customerEmail,\n            subject: \"Your Order Confirmation - OBSIDIAN WEAR\",\n            text: generateOrderConfirmationText(order),\n            html: generateOrderConfirmationHTML(order)\n        };\n        // Use the direct email sending logic instead of making an API call\n        const nodemailer = __webpack_require__(/*! nodemailer */ \"(rsc)/./node_modules/nodemailer/lib/nodemailer.js\");\n        // Create transporter with Gmail SMTP\n        const transporter = nodemailer.createTransport({\n            service: \"gmail\",\n            auth: {\n                user: process.env.GMAIL_USER,\n                pass: process.env.GMAIL_APP_PASSWORD\n            }\n        });\n        // Email options\n        const mailOptions = {\n            from: {\n                name: \"OBSIDIAN WEAR\",\n                address: process.env.GMAIL_USER || \"\"\n            },\n            to: emailData.to,\n            subject: emailData.subject,\n            text: emailData.text,\n            html: emailData.html\n        };\n        // Send email\n        const info = await transporter.sendMail(mailOptions);\n        console.log(\"Order confirmation email sent successfully:\", info.messageId);\n        return true;\n    } catch (error) {\n        console.error(\"Error sending order confirmation email:\", error);\n        return false;\n    }\n}\nfunction generateOrderConfirmationText(order) {\n    return `\r\nOrder Confirmation - OBSIDIAN WEAR\r\n\r\nDear ${order.customerName},\r\n\r\nThank you for your order! Your order has been confirmed and we'll start processing it immediately.\r\n\r\nOrder Details:\r\n- Order ID: #${order.id}\r\n- Date: ${new Date(order.orderDate).toLocaleDateString()}\r\n- Product: ${order.productName}\r\n- Size: ${order.selectedSize}\r\n- Color: ${order.selectedColor}\r\n- Quantity: ${order.quantity}\r\n- Total: ${order.total.toLocaleString()} DA\r\n\r\nShipping Information:\r\n- Shipping Type: ${order.shippingType === \"homeDelivery\" ? \"Home Delivery\" : \"Stop Desk\"}\r\n- Wilaya: ${order.wilayaName}\r\n- City: ${order.customerCity}\r\n- Address: ${order.customerAddress}\r\n- Shipping Cost: ${order.shippingCost.toLocaleString()} DA\r\n\r\nPayment Method: ${order.paymentMethod === \"cod\" ? \"Cash on Delivery\" : \"Bank Transfer\"}\r\n\r\nWe will contact you soon to confirm the delivery details.\r\n\r\nBest regards,\r\nOBSIDIAN WEAR Team\r\n  `.trim();\n}\nfunction generateOrderConfirmationHTML(order) {\n    return `\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Order Confirmation - OBSIDIAN WEAR</title>\r\n    <style>\r\n        body {\r\n            font-family: Arial, sans-serif;\r\n            line-height: 1.6;\r\n            color: #333;\r\n            max-width: 600px;\r\n            margin: 0 auto;\r\n            padding: 20px;\r\n            background-color: #f4f4f4;\r\n        }\r\n        .container {\r\n            background-color: white;\r\n            padding: 30px;\r\n            border-radius: 10px;\r\n            box-shadow: 0 0 10px rgba(0,0,0,0.1);\r\n        }\r\n        .header {\r\n            text-align: center;\r\n            margin-bottom: 30px;\r\n            padding-bottom: 20px;\r\n            border-bottom: 2px solid #000;\r\n        }\r\n        .logo {\r\n            font-size: 24px;\r\n            font-weight: bold;\r\n            color: #000;\r\n            margin-bottom: 10px;\r\n        }\r\n        .order-id {\r\n            background-color: #000;\r\n            color: white;\r\n            padding: 10px 20px;\r\n            border-radius: 5px;\r\n            display: inline-block;\r\n            font-weight: bold;\r\n        }\r\n        .section {\r\n            margin-bottom: 25px;\r\n        }\r\n        .section h3 {\r\n            color: #000;\r\n            border-bottom: 1px solid #eee;\r\n            padding-bottom: 5px;\r\n        }\r\n        .order-details {\r\n            background-color: #f8f8f8;\r\n            padding: 15px;\r\n            border-radius: 5px;\r\n        }\r\n        .detail-row {\r\n            display: flex;\r\n            justify-content: space-between;\r\n            margin-bottom: 8px;\r\n        }\r\n        .detail-label {\r\n            font-weight: bold;\r\n            color: #666;\r\n        }\r\n        .total {\r\n            background-color: #000;\r\n            color: white;\r\n            padding: 15px;\r\n            border-radius: 5px;\r\n            text-align: center;\r\n            font-size: 18px;\r\n            font-weight: bold;\r\n            margin-top: 20px;\r\n        }\r\n        .footer {\r\n            text-align: center;\r\n            margin-top: 30px;\r\n            padding-top: 20px;\r\n            border-top: 1px solid #eee;\r\n            color: #666;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <div class=\"header\">\r\n            <div class=\"logo\">OBSIDIAN WEAR</div>\r\n            <h1>Order Confirmation</h1>\r\n            <div class=\"order-id\">#${order.id}</div>\r\n        </div>\r\n\r\n        <p>Dear <strong>${order.customerName}</strong>,</p>\r\n        \r\n        <p>Thank you for your order! Your order has been confirmed and we'll start processing it immediately.</p>\r\n\r\n        <div class=\"section\">\r\n            <h3>Order Details</h3>\r\n            <div class=\"order-details\">\r\n                <div class=\"detail-row\">\r\n                    <span class=\"detail-label\">Order ID:</span>\r\n                    <span>#${order.id}</span>\r\n                </div>\r\n                <div class=\"detail-row\">\r\n                    <span class=\"detail-label\">Date:</span>\r\n                    <span>${new Date(order.orderDate).toLocaleDateString()}</span>\r\n                </div>\r\n                <div class=\"detail-row\">\r\n                    <span class=\"detail-label\">Product:</span>\r\n                    <span>${order.productName}</span>\r\n                </div>\r\n                <div class=\"detail-row\">\r\n                    <span class=\"detail-label\">Size:</span>\r\n                    <span>${order.selectedSize}</span>\r\n                </div>\r\n                <div class=\"detail-row\">\r\n                    <span class=\"detail-label\">Color:</span>\r\n                    <span>${order.selectedColor}</span>\r\n                </div>\r\n                <div class=\"detail-row\">\r\n                    <span class=\"detail-label\">Quantity:</span>\r\n                    <span>${order.quantity}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"section\">\r\n            <h3>Shipping Information</h3>\r\n            <div class=\"order-details\">\r\n                <div class=\"detail-row\">\r\n                    <span class=\"detail-label\">Shipping Type:</span>\r\n                    <span>${order.shippingType === \"homeDelivery\" ? \"Home Delivery\" : \"Stop Desk\"}</span>\r\n                </div>\r\n                <div class=\"detail-row\">\r\n                    <span class=\"detail-label\">Wilaya:</span>\r\n                    <span>${order.wilayaName}</span>\r\n                </div>\r\n                <div class=\"detail-row\">\r\n                    <span class=\"detail-label\">City:</span>\r\n                    <span>${order.customerCity}</span>\r\n                </div>\r\n                <div class=\"detail-row\">\r\n                    <span class=\"detail-label\">Address:</span>\r\n                    <span>${order.customerAddress}</span>\r\n                </div>\r\n                <div class=\"detail-row\">\r\n                    <span class=\"detail-label\">Shipping Cost:</span>\r\n                    <span>${order.shippingCost.toLocaleString()} DA</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"section\">\r\n            <h3>Payment Information</h3>\r\n            <div class=\"order-details\">\r\n                <div class=\"detail-row\">\r\n                    <span class=\"detail-label\">Payment Method:</span>\r\n                    <span>${order.paymentMethod === \"cod\" ? \"Cash on Delivery\" : \"Bank Transfer\"}</span>\r\n                </div>\r\n                <div class=\"detail-row\">\r\n                    <span class=\"detail-label\">Subtotal:</span>\r\n                    <span>${order.subtotal.toLocaleString()} DA</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"total\">\r\n            Total: ${order.total.toLocaleString()} DA\r\n        </div>\r\n\r\n        <p>We will contact you soon to confirm the delivery details.</p>\r\n\r\n        <div class=\"footer\">\r\n            <p>Best regards,<br><strong>OBSIDIAN WEAR Team</strong></p>\r\n            <p>If you have any questions, please contact us.</p>\r\n        </div>\r\n    </div>\r\n</body>\r\n</html>\r\n  `.trim();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2VtYWlsU2VydmljZS50cyIsIm1hcHBpbmdzIjoiOzs7O0FBU08sZUFBZUEsMkJBQTJCQyxLQUFZO0lBQzNELElBQUk7UUFDRixNQUFNQyxZQUF1QjtZQUMzQkMsSUFBSUYsTUFBTUcsYUFBYTtZQUN2QkMsU0FBUztZQUNUQyxNQUFNQyw4QkFBOEJOO1lBQ3BDTyxNQUFNQyw4QkFBOEJSO1FBQ3RDO1FBRUEsbUVBQW1FO1FBQ25FLE1BQU1TLGFBQWFDLG1CQUFPQSxDQUFDO1FBRTNCLHFDQUFxQztRQUNyQyxNQUFNQyxjQUFjRixXQUFXRyxlQUFlLENBQUM7WUFDN0NDLFNBQVM7WUFDVEMsTUFBTTtnQkFDSkMsTUFBTUMsUUFBUUMsR0FBRyxDQUFDQyxVQUFVO2dCQUM1QkMsTUFBTUgsUUFBUUMsR0FBRyxDQUFDRyxrQkFBa0I7WUFDdEM7UUFDRjtRQUVBLGdCQUFnQjtRQUNoQixNQUFNQyxjQUFjO1lBQ2xCQyxNQUFNO2dCQUNKQyxNQUFNO2dCQUNOQyxTQUFTUixRQUFRQyxHQUFHLENBQUNDLFVBQVUsSUFBSTtZQUNyQztZQUNBaEIsSUFBSUQsVUFBVUMsRUFBRTtZQUNoQkUsU0FBU0gsVUFBVUcsT0FBTztZQUMxQkMsTUFBTUosVUFBVUksSUFBSTtZQUNwQkUsTUFBTU4sVUFBVU0sSUFBSTtRQUN0QjtRQUVBLGFBQWE7UUFDYixNQUFNa0IsT0FBTyxNQUFNZCxZQUFZZSxRQUFRLENBQUNMO1FBRXhDTSxRQUFRQyxHQUFHLENBQUMsK0NBQStDSCxLQUFLSSxTQUFTO1FBQ3pFLE9BQU87SUFFVCxFQUFFLE9BQU9DLE9BQU87UUFDZEgsUUFBUUcsS0FBSyxDQUFDLDJDQUEyQ0E7UUFDekQsT0FBTztJQUNUO0FBQ0Y7QUFFQSxTQUFTeEIsOEJBQThCTixLQUFZO0lBQ2pELE9BQU8sQ0FBQzs7O0tBR0wsRUFBRUEsTUFBTStCLFlBQVksQ0FBQzs7Ozs7YUFLYixFQUFFL0IsTUFBTWdDLEVBQUUsQ0FBQztRQUNoQixFQUFFLElBQUlDLEtBQUtqQyxNQUFNa0MsU0FBUyxFQUFFQyxrQkFBa0IsR0FBRztXQUM5QyxFQUFFbkMsTUFBTW9DLFdBQVcsQ0FBQztRQUN2QixFQUFFcEMsTUFBTXFDLFlBQVksQ0FBQztTQUNwQixFQUFFckMsTUFBTXNDLGFBQWEsQ0FBQztZQUNuQixFQUFFdEMsTUFBTXVDLFFBQVEsQ0FBQztTQUNwQixFQUFFdkMsTUFBTXdDLEtBQUssQ0FBQ0MsY0FBYyxHQUFHOzs7aUJBR3ZCLEVBQUV6QyxNQUFNMEMsWUFBWSxLQUFLLGlCQUFpQixrQkFBa0IsWUFBWTtVQUMvRSxFQUFFMUMsTUFBTTJDLFVBQVUsQ0FBQztRQUNyQixFQUFFM0MsTUFBTTRDLFlBQVksQ0FBQztXQUNsQixFQUFFNUMsTUFBTTZDLGVBQWUsQ0FBQztpQkFDbEIsRUFBRTdDLE1BQU04QyxZQUFZLENBQUNMLGNBQWMsR0FBRzs7Z0JBRXZDLEVBQUV6QyxNQUFNK0MsYUFBYSxLQUFLLFFBQVEscUJBQXFCLGdCQUFnQjs7Ozs7O0VBTXJGLENBQUMsQ0FBQ0MsSUFBSTtBQUNSO0FBRUEsU0FBU3hDLDhCQUE4QlIsS0FBWTtJQUNqRCxPQUFPLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O21DQXlGeUIsRUFBRUEsTUFBTWdDLEVBQUUsQ0FBQzs7O3dCQUd0QixFQUFFaEMsTUFBTStCLFlBQVksQ0FBQzs7Ozs7Ozs7OzJCQVNsQixFQUFFL0IsTUFBTWdDLEVBQUUsQ0FBQzs7OzswQkFJWixFQUFFLElBQUlDLEtBQUtqQyxNQUFNa0MsU0FBUyxFQUFFQyxrQkFBa0IsR0FBRzs7OzswQkFJakQsRUFBRW5DLE1BQU1vQyxXQUFXLENBQUM7Ozs7MEJBSXBCLEVBQUVwQyxNQUFNcUMsWUFBWSxDQUFDOzs7OzBCQUlyQixFQUFFckMsTUFBTXNDLGFBQWEsQ0FBQzs7OzswQkFJdEIsRUFBRXRDLE1BQU11QyxRQUFRLENBQUM7Ozs7Ozs7Ozs7MEJBVWpCLEVBQUV2QyxNQUFNMEMsWUFBWSxLQUFLLGlCQUFpQixrQkFBa0IsWUFBWTs7OzswQkFJeEUsRUFBRTFDLE1BQU0yQyxVQUFVLENBQUM7Ozs7MEJBSW5CLEVBQUUzQyxNQUFNNEMsWUFBWSxDQUFDOzs7OzBCQUlyQixFQUFFNUMsTUFBTTZDLGVBQWUsQ0FBQzs7OzswQkFJeEIsRUFBRTdDLE1BQU04QyxZQUFZLENBQUNMLGNBQWMsR0FBRzs7Ozs7Ozs7OzswQkFVdEMsRUFBRXpDLE1BQU0rQyxhQUFhLEtBQUssUUFBUSxxQkFBcUIsZ0JBQWdCOzs7OzBCQUl2RSxFQUFFL0MsTUFBTWlELFFBQVEsQ0FBQ1IsY0FBYyxHQUFHOzs7Ozs7bUJBTXpDLEVBQUV6QyxNQUFNd0MsS0FBSyxDQUFDQyxjQUFjLEdBQUc7Ozs7Ozs7Ozs7OztFQVloRCxDQUFDLENBQUNPLElBQUk7QUFDUiIsInNvdXJjZXMiOlsid2VicGFjazovL29ic2lkaWFuLXdlYXIvLi9zcmMvbGliL2VtYWlsU2VydmljZS50cz80NWNkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9yZGVyIH0gZnJvbSAnQC90eXBlcyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEVtYWlsRGF0YSB7XHJcbiAgdG86IHN0cmluZztcclxuICBzdWJqZWN0OiBzdHJpbmc7XHJcbiAgdGV4dDogc3RyaW5nO1xyXG4gIGh0bWw6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlbmRPcmRlckNvbmZpcm1hdGlvbkVtYWlsKG9yZGVyOiBPcmRlcik6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBlbWFpbERhdGE6IEVtYWlsRGF0YSA9IHtcclxuICAgICAgdG86IG9yZGVyLmN1c3RvbWVyRW1haWwsXHJcbiAgICAgIHN1YmplY3Q6ICdZb3VyIE9yZGVyIENvbmZpcm1hdGlvbiAtIE9CU0lESUFOIFdFQVInLFxyXG4gICAgICB0ZXh0OiBnZW5lcmF0ZU9yZGVyQ29uZmlybWF0aW9uVGV4dChvcmRlciksXHJcbiAgICAgIGh0bWw6IGdlbmVyYXRlT3JkZXJDb25maXJtYXRpb25IVE1MKG9yZGVyKSxcclxuICAgIH07XHJcblxyXG4gICAgLy8gVXNlIHRoZSBkaXJlY3QgZW1haWwgc2VuZGluZyBsb2dpYyBpbnN0ZWFkIG9mIG1ha2luZyBhbiBBUEkgY2FsbFxyXG4gICAgY29uc3Qgbm9kZW1haWxlciA9IHJlcXVpcmUoJ25vZGVtYWlsZXInKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgdHJhbnNwb3J0ZXIgd2l0aCBHbWFpbCBTTVRQXHJcbiAgICBjb25zdCB0cmFuc3BvcnRlciA9IG5vZGVtYWlsZXIuY3JlYXRlVHJhbnNwb3J0KHtcclxuICAgICAgc2VydmljZTogJ2dtYWlsJyxcclxuICAgICAgYXV0aDoge1xyXG4gICAgICAgIHVzZXI6IHByb2Nlc3MuZW52LkdNQUlMX1VTRVIsXHJcbiAgICAgICAgcGFzczogcHJvY2Vzcy5lbnYuR01BSUxfQVBQX1BBU1NXT1JELFxyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gRW1haWwgb3B0aW9uc1xyXG4gICAgY29uc3QgbWFpbE9wdGlvbnMgPSB7XHJcbiAgICAgIGZyb206IHtcclxuICAgICAgICBuYW1lOiAnT0JTSURJQU4gV0VBUicsXHJcbiAgICAgICAgYWRkcmVzczogcHJvY2Vzcy5lbnYuR01BSUxfVVNFUiB8fCAnJyxcclxuICAgICAgfSxcclxuICAgICAgdG86IGVtYWlsRGF0YS50byxcclxuICAgICAgc3ViamVjdDogZW1haWxEYXRhLnN1YmplY3QsXHJcbiAgICAgIHRleHQ6IGVtYWlsRGF0YS50ZXh0LFxyXG4gICAgICBodG1sOiBlbWFpbERhdGEuaHRtbCxcclxuICAgIH07XHJcblxyXG4gICAgLy8gU2VuZCBlbWFpbFxyXG4gICAgY29uc3QgaW5mbyA9IGF3YWl0IHRyYW5zcG9ydGVyLnNlbmRNYWlsKG1haWxPcHRpb25zKTtcclxuICAgIFxyXG4gICAgY29uc29sZS5sb2coJ09yZGVyIGNvbmZpcm1hdGlvbiBlbWFpbCBzZW50IHN1Y2Nlc3NmdWxseTonLCBpbmZvLm1lc3NhZ2VJZCk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHNlbmRpbmcgb3JkZXIgY29uZmlybWF0aW9uIGVtYWlsOicsIGVycm9yKTtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdlbmVyYXRlT3JkZXJDb25maXJtYXRpb25UZXh0KG9yZGVyOiBPcmRlcik6IHN0cmluZyB7XHJcbiAgcmV0dXJuIGBcclxuT3JkZXIgQ29uZmlybWF0aW9uIC0gT0JTSURJQU4gV0VBUlxyXG5cclxuRGVhciAke29yZGVyLmN1c3RvbWVyTmFtZX0sXHJcblxyXG5UaGFuayB5b3UgZm9yIHlvdXIgb3JkZXIhIFlvdXIgb3JkZXIgaGFzIGJlZW4gY29uZmlybWVkIGFuZCB3ZSdsbCBzdGFydCBwcm9jZXNzaW5nIGl0IGltbWVkaWF0ZWx5LlxyXG5cclxuT3JkZXIgRGV0YWlsczpcclxuLSBPcmRlciBJRDogIyR7b3JkZXIuaWR9XHJcbi0gRGF0ZTogJHtuZXcgRGF0ZShvcmRlci5vcmRlckRhdGUpLnRvTG9jYWxlRGF0ZVN0cmluZygpfVxyXG4tIFByb2R1Y3Q6ICR7b3JkZXIucHJvZHVjdE5hbWV9XHJcbi0gU2l6ZTogJHtvcmRlci5zZWxlY3RlZFNpemV9XHJcbi0gQ29sb3I6ICR7b3JkZXIuc2VsZWN0ZWRDb2xvcn1cclxuLSBRdWFudGl0eTogJHtvcmRlci5xdWFudGl0eX1cclxuLSBUb3RhbDogJHtvcmRlci50b3RhbC50b0xvY2FsZVN0cmluZygpfSBEQVxyXG5cclxuU2hpcHBpbmcgSW5mb3JtYXRpb246XHJcbi0gU2hpcHBpbmcgVHlwZTogJHtvcmRlci5zaGlwcGluZ1R5cGUgPT09ICdob21lRGVsaXZlcnknID8gJ0hvbWUgRGVsaXZlcnknIDogJ1N0b3AgRGVzayd9XHJcbi0gV2lsYXlhOiAke29yZGVyLndpbGF5YU5hbWV9XHJcbi0gQ2l0eTogJHtvcmRlci5jdXN0b21lckNpdHl9XHJcbi0gQWRkcmVzczogJHtvcmRlci5jdXN0b21lckFkZHJlc3N9XHJcbi0gU2hpcHBpbmcgQ29zdDogJHtvcmRlci5zaGlwcGluZ0Nvc3QudG9Mb2NhbGVTdHJpbmcoKX0gREFcclxuXHJcblBheW1lbnQgTWV0aG9kOiAke29yZGVyLnBheW1lbnRNZXRob2QgPT09ICdjb2QnID8gJ0Nhc2ggb24gRGVsaXZlcnknIDogJ0JhbmsgVHJhbnNmZXInfVxyXG5cclxuV2Ugd2lsbCBjb250YWN0IHlvdSBzb29uIHRvIGNvbmZpcm0gdGhlIGRlbGl2ZXJ5IGRldGFpbHMuXHJcblxyXG5CZXN0IHJlZ2FyZHMsXHJcbk9CU0lESUFOIFdFQVIgVGVhbVxyXG4gIGAudHJpbSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZW5lcmF0ZU9yZGVyQ29uZmlybWF0aW9uSFRNTChvcmRlcjogT3JkZXIpOiBzdHJpbmcge1xyXG4gIHJldHVybiBgXHJcbjwhRE9DVFlQRSBodG1sPlxyXG48aHRtbCBsYW5nPVwiZW5cIj5cclxuPGhlYWQ+XHJcbiAgICA8bWV0YSBjaGFyc2V0PVwiVVRGLThcIj5cclxuICAgIDxtZXRhIG5hbWU9XCJ2aWV3cG9ydFwiIGNvbnRlbnQ9XCJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wXCI+XHJcbiAgICA8dGl0bGU+T3JkZXIgQ29uZmlybWF0aW9uIC0gT0JTSURJQU4gV0VBUjwvdGl0bGU+XHJcbiAgICA8c3R5bGU+XHJcbiAgICAgICAgYm9keSB7XHJcbiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBBcmlhbCwgc2Fucy1zZXJpZjtcclxuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDEuNjtcclxuICAgICAgICAgICAgY29sb3I6ICMzMzM7XHJcbiAgICAgICAgICAgIG1heC13aWR0aDogNjAwcHg7XHJcbiAgICAgICAgICAgIG1hcmdpbjogMCBhdXRvO1xyXG4gICAgICAgICAgICBwYWRkaW5nOiAyMHB4O1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjRmNGY0O1xyXG4gICAgICAgIH1cclxuICAgICAgICAuY29udGFpbmVyIHtcclxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDMwcHg7XHJcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XHJcbiAgICAgICAgICAgIGJveC1zaGFkb3c6IDAgMCAxMHB4IHJnYmEoMCwwLDAsMC4xKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLmhlYWRlciB7XHJcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMzBweDtcclxuICAgICAgICAgICAgcGFkZGluZy1ib3R0b206IDIwcHg7XHJcbiAgICAgICAgICAgIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCAjMDAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICAubG9nbyB7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjRweDtcclxuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICAgICAgICAgIGNvbG9yOiAjMDAwO1xyXG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xyXG4gICAgICAgIH1cclxuICAgICAgICAub3JkZXItaWQge1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwO1xyXG4gICAgICAgICAgICBjb2xvcjogd2hpdGU7XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDEwcHggMjBweDtcclxuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgICAgIH1cclxuICAgICAgICAuc2VjdGlvbiB7XHJcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDI1cHg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC5zZWN0aW9uIGgzIHtcclxuICAgICAgICAgICAgY29sb3I6ICMwMDA7XHJcbiAgICAgICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZWVlO1xyXG4gICAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogNXB4O1xyXG4gICAgICAgIH1cclxuICAgICAgICAub3JkZXItZGV0YWlscyB7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmOGY4Zjg7XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDE1cHg7XHJcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLmRldGFpbC1yb3cge1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDhweDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLmRldGFpbC1sYWJlbCB7XHJcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgICAgICAgICBjb2xvcjogIzY2NjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLnRvdGFsIHtcclxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDtcclxuICAgICAgICAgICAgY29sb3I6IHdoaXRlO1xyXG4gICAgICAgICAgICBwYWRkaW5nOiAxNXB4O1xyXG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7XHJcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAxOHB4O1xyXG4gICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgICAgICAgICAgbWFyZ2luLXRvcDogMjBweDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLmZvb3RlciB7XHJcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgICAgICAgbWFyZ2luLXRvcDogMzBweDtcclxuICAgICAgICAgICAgcGFkZGluZy10b3A6IDIwcHg7XHJcbiAgICAgICAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZWVlO1xyXG4gICAgICAgICAgICBjb2xvcjogIzY2NjtcclxuICAgICAgICB9XHJcbiAgICA8L3N0eWxlPlxyXG48L2hlYWQ+XHJcbjxib2R5PlxyXG4gICAgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJoZWFkZXJcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImxvZ29cIj5PQlNJRElBTiBXRUFSPC9kaXY+XHJcbiAgICAgICAgICAgIDxoMT5PcmRlciBDb25maXJtYXRpb248L2gxPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwib3JkZXItaWRcIj4jJHtvcmRlci5pZH08L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgPHA+RGVhciA8c3Ryb25nPiR7b3JkZXIuY3VzdG9tZXJOYW1lfTwvc3Ryb25nPiw8L3A+XHJcbiAgICAgICAgXHJcbiAgICAgICAgPHA+VGhhbmsgeW91IGZvciB5b3VyIG9yZGVyISBZb3VyIG9yZGVyIGhhcyBiZWVuIGNvbmZpcm1lZCBhbmQgd2UnbGwgc3RhcnQgcHJvY2Vzc2luZyBpdCBpbW1lZGlhdGVseS48L3A+XHJcblxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJzZWN0aW9uXCI+XHJcbiAgICAgICAgICAgIDxoMz5PcmRlciBEZXRhaWxzPC9oMz5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm9yZGVyLWRldGFpbHNcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkZXRhaWwtcm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJkZXRhaWwtbGFiZWxcIj5PcmRlciBJRDo8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+IyR7b3JkZXIuaWR9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGV0YWlsLXJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZGV0YWlsLWxhYmVsXCI+RGF0ZTo8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+JHtuZXcgRGF0ZShvcmRlci5vcmRlckRhdGUpLnRvTG9jYWxlRGF0ZVN0cmluZygpfTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRldGFpbC1yb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImRldGFpbC1sYWJlbFwiPlByb2R1Y3Q6PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPiR7b3JkZXIucHJvZHVjdE5hbWV9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGV0YWlsLXJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZGV0YWlsLWxhYmVsXCI+U2l6ZTo8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+JHtvcmRlci5zZWxlY3RlZFNpemV9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGV0YWlsLXJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZGV0YWlsLWxhYmVsXCI+Q29sb3I6PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPiR7b3JkZXIuc2VsZWN0ZWRDb2xvcn08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkZXRhaWwtcm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJkZXRhaWwtbGFiZWxcIj5RdWFudGl0eTo8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+JHtvcmRlci5xdWFudGl0eX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJzZWN0aW9uXCI+XHJcbiAgICAgICAgICAgIDxoMz5TaGlwcGluZyBJbmZvcm1hdGlvbjwvaDM+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJvcmRlci1kZXRhaWxzXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGV0YWlsLXJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZGV0YWlsLWxhYmVsXCI+U2hpcHBpbmcgVHlwZTo8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+JHtvcmRlci5zaGlwcGluZ1R5cGUgPT09ICdob21lRGVsaXZlcnknID8gJ0hvbWUgRGVsaXZlcnknIDogJ1N0b3AgRGVzayd9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGV0YWlsLXJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZGV0YWlsLWxhYmVsXCI+V2lsYXlhOjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj4ke29yZGVyLndpbGF5YU5hbWV9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGV0YWlsLXJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZGV0YWlsLWxhYmVsXCI+Q2l0eTo8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+JHtvcmRlci5jdXN0b21lckNpdHl9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGV0YWlsLXJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZGV0YWlsLWxhYmVsXCI+QWRkcmVzczo8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+JHtvcmRlci5jdXN0b21lckFkZHJlc3N9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGV0YWlsLXJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZGV0YWlsLWxhYmVsXCI+U2hpcHBpbmcgQ29zdDo8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+JHtvcmRlci5zaGlwcGluZ0Nvc3QudG9Mb2NhbGVTdHJpbmcoKX0gREE8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJzZWN0aW9uXCI+XHJcbiAgICAgICAgICAgIDxoMz5QYXltZW50IEluZm9ybWF0aW9uPC9oMz5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm9yZGVyLWRldGFpbHNcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkZXRhaWwtcm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJkZXRhaWwtbGFiZWxcIj5QYXltZW50IE1ldGhvZDo8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+JHtvcmRlci5wYXltZW50TWV0aG9kID09PSAnY29kJyA/ICdDYXNoIG9uIERlbGl2ZXJ5JyA6ICdCYW5rIFRyYW5zZmVyJ308L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkZXRhaWwtcm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJkZXRhaWwtbGFiZWxcIj5TdWJ0b3RhbDo8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+JHtvcmRlci5zdWJ0b3RhbC50b0xvY2FsZVN0cmluZygpfSBEQTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInRvdGFsXCI+XHJcbiAgICAgICAgICAgIFRvdGFsOiAke29yZGVyLnRvdGFsLnRvTG9jYWxlU3RyaW5nKCl9IERBXHJcbiAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgIDxwPldlIHdpbGwgY29udGFjdCB5b3Ugc29vbiB0byBjb25maXJtIHRoZSBkZWxpdmVyeSBkZXRhaWxzLjwvcD5cclxuXHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImZvb3RlclwiPlxyXG4gICAgICAgICAgICA8cD5CZXN0IHJlZ2FyZHMsPGJyPjxzdHJvbmc+T0JTSURJQU4gV0VBUiBUZWFtPC9zdHJvbmc+PC9wPlxyXG4gICAgICAgICAgICA8cD5JZiB5b3UgaGF2ZSBhbnkgcXVlc3Rpb25zLCBwbGVhc2UgY29udGFjdCB1cy48L3A+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuPC9ib2R5PlxyXG48L2h0bWw+XHJcbiAgYC50cmltKCk7XHJcbn1cclxuIl0sIm5hbWVzIjpbInNlbmRPcmRlckNvbmZpcm1hdGlvbkVtYWlsIiwib3JkZXIiLCJlbWFpbERhdGEiLCJ0byIsImN1c3RvbWVyRW1haWwiLCJzdWJqZWN0IiwidGV4dCIsImdlbmVyYXRlT3JkZXJDb25maXJtYXRpb25UZXh0IiwiaHRtbCIsImdlbmVyYXRlT3JkZXJDb25maXJtYXRpb25IVE1MIiwibm9kZW1haWxlciIsInJlcXVpcmUiLCJ0cmFuc3BvcnRlciIsImNyZWF0ZVRyYW5zcG9ydCIsInNlcnZpY2UiLCJhdXRoIiwidXNlciIsInByb2Nlc3MiLCJlbnYiLCJHTUFJTF9VU0VSIiwicGFzcyIsIkdNQUlMX0FQUF9QQVNTV09SRCIsIm1haWxPcHRpb25zIiwiZnJvbSIsIm5hbWUiLCJhZGRyZXNzIiwiaW5mbyIsInNlbmRNYWlsIiwiY29uc29sZSIsImxvZyIsIm1lc3NhZ2VJZCIsImVycm9yIiwiY3VzdG9tZXJOYW1lIiwiaWQiLCJEYXRlIiwib3JkZXJEYXRlIiwidG9Mb2NhbGVEYXRlU3RyaW5nIiwicHJvZHVjdE5hbWUiLCJzZWxlY3RlZFNpemUiLCJzZWxlY3RlZENvbG9yIiwicXVhbnRpdHkiLCJ0b3RhbCIsInRvTG9jYWxlU3RyaW5nIiwic2hpcHBpbmdUeXBlIiwid2lsYXlhTmFtZSIsImN1c3RvbWVyQ2l0eSIsImN1c3RvbWVyQWRkcmVzcyIsInNoaXBwaW5nQ29zdCIsInBheW1lbnRNZXRob2QiLCJ0cmltIiwic3VidG90YWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/emailService.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/rateLimiter.ts":
/*!********************************!*\
  !*** ./src/lib/rateLimiter.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiRateLimiter: () => (/* binding */ apiRateLimiter),\n/* harmony export */   authRateLimiter: () => (/* binding */ authRateLimiter),\n/* harmony export */   checkRateLimit: () => (/* binding */ checkRateLimit)\n/* harmony export */ });\n// Simple in-memory rate limiter\nclass RateLimiter {\n    constructor(windowMs = 60000, maxRequests = 100){\n        this.requests = new Map();\n        this.windowMs = windowMs;\n        this.maxRequests = maxRequests;\n    }\n    // Check if request is allowed\n    isAllowed(identifier) {\n        const now = Date.now();\n        const entry = this.requests.get(identifier);\n        if (!entry || now > entry.resetTime) {\n            // Create new entry or reset expired entry\n            this.requests.set(identifier, {\n                count: 1,\n                resetTime: now + this.windowMs\n            });\n            return {\n                allowed: true,\n                remaining: this.maxRequests - 1,\n                resetTime: now + this.windowMs\n            };\n        }\n        if (entry.count >= this.maxRequests) {\n            return {\n                allowed: false,\n                remaining: 0,\n                resetTime: entry.resetTime\n            };\n        }\n        // Increment count\n        entry.count++;\n        this.requests.set(identifier, entry);\n        return {\n            allowed: true,\n            remaining: this.maxRequests - entry.count,\n            resetTime: entry.resetTime\n        };\n    }\n    // Clean up expired entries\n    cleanup() {\n        const now = Date.now();\n        this.requests.forEach((entry, key)=>{\n            if (now > entry.resetTime) {\n                this.requests.delete(key);\n            }\n        });\n    }\n}\n// Create rate limiter instances\nconst apiRateLimiter = new RateLimiter(60000, 100); // 100 requests per minute\nconst authRateLimiter = new RateLimiter(300000, 5); // 5 login attempts per 5 minutes\n// Rate limiting middleware\nfunction checkRateLimit(identifier, limiter) {\n    const result = limiter.isAllowed(identifier);\n    // Clean up expired entries periodically\n    if (Math.random() < 0.01) {\n        limiter.cleanup();\n    }\n    const headers = {\n        \"X-RateLimit-Limit\": limiter[\"maxRequests\"].toString(),\n        \"X-RateLimit-Remaining\": result.remaining.toString(),\n        \"X-RateLimit-Reset\": new Date(result.resetTime).toISOString()\n    };\n    return {\n        allowed: result.allowed,\n        headers\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3JhdGVMaW1pdGVyLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGdDQUFnQztBQU1oQyxNQUFNQTtJQUtKQyxZQUFZQyxXQUFtQixLQUFLLEVBQUVDLGNBQXNCLEdBQUcsQ0FBRTthQUp6REMsV0FBd0MsSUFBSUM7UUFLbEQsSUFBSSxDQUFDSCxRQUFRLEdBQUdBO1FBQ2hCLElBQUksQ0FBQ0MsV0FBVyxHQUFHQTtJQUNyQjtJQUVBLDhCQUE4QjtJQUM5QkcsVUFBVUMsVUFBa0IsRUFBOEQ7UUFDeEYsTUFBTUMsTUFBTUMsS0FBS0QsR0FBRztRQUNwQixNQUFNRSxRQUFRLElBQUksQ0FBQ04sUUFBUSxDQUFDTyxHQUFHLENBQUNKO1FBRWhDLElBQUksQ0FBQ0csU0FBU0YsTUFBTUUsTUFBTUUsU0FBUyxFQUFFO1lBQ25DLDBDQUEwQztZQUMxQyxJQUFJLENBQUNSLFFBQVEsQ0FBQ1MsR0FBRyxDQUFDTixZQUFZO2dCQUM1Qk8sT0FBTztnQkFDUEYsV0FBV0osTUFBTSxJQUFJLENBQUNOLFFBQVE7WUFDaEM7WUFFQSxPQUFPO2dCQUNMYSxTQUFTO2dCQUNUQyxXQUFXLElBQUksQ0FBQ2IsV0FBVyxHQUFHO2dCQUM5QlMsV0FBV0osTUFBTSxJQUFJLENBQUNOLFFBQVE7WUFDaEM7UUFDRjtRQUVBLElBQUlRLE1BQU1JLEtBQUssSUFBSSxJQUFJLENBQUNYLFdBQVcsRUFBRTtZQUNuQyxPQUFPO2dCQUNMWSxTQUFTO2dCQUNUQyxXQUFXO2dCQUNYSixXQUFXRixNQUFNRSxTQUFTO1lBQzVCO1FBQ0Y7UUFFQSxrQkFBa0I7UUFDbEJGLE1BQU1JLEtBQUs7UUFDWCxJQUFJLENBQUNWLFFBQVEsQ0FBQ1MsR0FBRyxDQUFDTixZQUFZRztRQUU5QixPQUFPO1lBQ0xLLFNBQVM7WUFDVEMsV0FBVyxJQUFJLENBQUNiLFdBQVcsR0FBR08sTUFBTUksS0FBSztZQUN6Q0YsV0FBV0YsTUFBTUUsU0FBUztRQUM1QjtJQUNGO0lBRUEsMkJBQTJCO0lBQzNCSyxVQUFnQjtRQUNkLE1BQU1ULE1BQU1DLEtBQUtELEdBQUc7UUFDcEIsSUFBSSxDQUFDSixRQUFRLENBQUNjLE9BQU8sQ0FBQyxDQUFDUixPQUFPUztZQUM1QixJQUFJWCxNQUFNRSxNQUFNRSxTQUFTLEVBQUU7Z0JBQ3pCLElBQUksQ0FBQ1IsUUFBUSxDQUFDZ0IsTUFBTSxDQUFDRDtZQUN2QjtRQUNGO0lBQ0Y7QUFDRjtBQUVBLGdDQUFnQztBQUN6QixNQUFNRSxpQkFBaUIsSUFBSXJCLFlBQVksT0FBTyxLQUFLLENBQUMsMEJBQTBCO0FBQzlFLE1BQU1zQixrQkFBa0IsSUFBSXRCLFlBQVksUUFBUSxHQUFHLENBQUMsaUNBQWlDO0FBRTVGLDJCQUEyQjtBQUNwQixTQUFTdUIsZUFBZWhCLFVBQWtCLEVBQUVpQixPQUFvQjtJQUNyRSxNQUFNQyxTQUFTRCxRQUFRbEIsU0FBUyxDQUFDQztJQUVqQyx3Q0FBd0M7SUFDeEMsSUFBSW1CLEtBQUtDLE1BQU0sS0FBSyxNQUFNO1FBQ3hCSCxRQUFRUCxPQUFPO0lBQ2pCO0lBRUEsTUFBTVcsVUFBVTtRQUNkLHFCQUFxQkosT0FBTyxDQUFDLGNBQWMsQ0FBQ0ssUUFBUTtRQUNwRCx5QkFBeUJKLE9BQU9ULFNBQVMsQ0FBQ2EsUUFBUTtRQUNsRCxxQkFBcUIsSUFBSXBCLEtBQUtnQixPQUFPYixTQUFTLEVBQUVrQixXQUFXO0lBQzdEO0lBRUEsT0FBTztRQUNMZixTQUFTVSxPQUFPVixPQUFPO1FBQ3ZCYTtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vYnNpZGlhbi13ZWFyLy4vc3JjL2xpYi9yYXRlTGltaXRlci50cz9mODFiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNpbXBsZSBpbi1tZW1vcnkgcmF0ZSBsaW1pdGVyXHJcbmludGVyZmFjZSBSYXRlTGltaXRFbnRyeSB7XHJcbiAgY291bnQ6IG51bWJlcjtcclxuICByZXNldFRpbWU6IG51bWJlcjtcclxufVxyXG5cclxuY2xhc3MgUmF0ZUxpbWl0ZXIge1xyXG4gIHByaXZhdGUgcmVxdWVzdHM6IE1hcDxzdHJpbmcsIFJhdGVMaW1pdEVudHJ5PiA9IG5ldyBNYXAoKTtcclxuICBwcml2YXRlIHJlYWRvbmx5IHdpbmRvd01zOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBtYXhSZXF1ZXN0czogbnVtYmVyO1xyXG5cclxuICBjb25zdHJ1Y3Rvcih3aW5kb3dNczogbnVtYmVyID0gNjAwMDAsIG1heFJlcXVlc3RzOiBudW1iZXIgPSAxMDApIHtcclxuICAgIHRoaXMud2luZG93TXMgPSB3aW5kb3dNcztcclxuICAgIHRoaXMubWF4UmVxdWVzdHMgPSBtYXhSZXF1ZXN0cztcclxuICB9XHJcblxyXG4gIC8vIENoZWNrIGlmIHJlcXVlc3QgaXMgYWxsb3dlZFxyXG4gIGlzQWxsb3dlZChpZGVudGlmaWVyOiBzdHJpbmcpOiB7IGFsbG93ZWQ6IGJvb2xlYW47IHJlbWFpbmluZzogbnVtYmVyOyByZXNldFRpbWU6IG51bWJlciB9IHtcclxuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XHJcbiAgICBjb25zdCBlbnRyeSA9IHRoaXMucmVxdWVzdHMuZ2V0KGlkZW50aWZpZXIpO1xyXG5cclxuICAgIGlmICghZW50cnkgfHwgbm93ID4gZW50cnkucmVzZXRUaW1lKSB7XHJcbiAgICAgIC8vIENyZWF0ZSBuZXcgZW50cnkgb3IgcmVzZXQgZXhwaXJlZCBlbnRyeVxyXG4gICAgICB0aGlzLnJlcXVlc3RzLnNldChpZGVudGlmaWVyLCB7XHJcbiAgICAgICAgY291bnQ6IDEsXHJcbiAgICAgICAgcmVzZXRUaW1lOiBub3cgKyB0aGlzLndpbmRvd01zXHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBhbGxvd2VkOiB0cnVlLFxyXG4gICAgICAgIHJlbWFpbmluZzogdGhpcy5tYXhSZXF1ZXN0cyAtIDEsXHJcbiAgICAgICAgcmVzZXRUaW1lOiBub3cgKyB0aGlzLndpbmRvd01zXHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGVudHJ5LmNvdW50ID49IHRoaXMubWF4UmVxdWVzdHMpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBhbGxvd2VkOiBmYWxzZSxcclxuICAgICAgICByZW1haW5pbmc6IDAsXHJcbiAgICAgICAgcmVzZXRUaW1lOiBlbnRyeS5yZXNldFRpbWVcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBJbmNyZW1lbnQgY291bnRcclxuICAgIGVudHJ5LmNvdW50Kys7XHJcbiAgICB0aGlzLnJlcXVlc3RzLnNldChpZGVudGlmaWVyLCBlbnRyeSk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgYWxsb3dlZDogdHJ1ZSxcclxuICAgICAgcmVtYWluaW5nOiB0aGlzLm1heFJlcXVlc3RzIC0gZW50cnkuY291bnQsXHJcbiAgICAgIHJlc2V0VGltZTogZW50cnkucmVzZXRUaW1lXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLy8gQ2xlYW4gdXAgZXhwaXJlZCBlbnRyaWVzXHJcbiAgY2xlYW51cCgpOiB2b2lkIHtcclxuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XHJcbiAgICB0aGlzLnJlcXVlc3RzLmZvckVhY2goKGVudHJ5LCBrZXkpID0+IHtcclxuICAgICAgaWYgKG5vdyA+IGVudHJ5LnJlc2V0VGltZSkge1xyXG4gICAgICAgIHRoaXMucmVxdWVzdHMuZGVsZXRlKGtleSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuLy8gQ3JlYXRlIHJhdGUgbGltaXRlciBpbnN0YW5jZXNcclxuZXhwb3J0IGNvbnN0IGFwaVJhdGVMaW1pdGVyID0gbmV3IFJhdGVMaW1pdGVyKDYwMDAwLCAxMDApOyAvLyAxMDAgcmVxdWVzdHMgcGVyIG1pbnV0ZVxyXG5leHBvcnQgY29uc3QgYXV0aFJhdGVMaW1pdGVyID0gbmV3IFJhdGVMaW1pdGVyKDMwMDAwMCwgNSk7IC8vIDUgbG9naW4gYXR0ZW1wdHMgcGVyIDUgbWludXRlc1xyXG5cclxuLy8gUmF0ZSBsaW1pdGluZyBtaWRkbGV3YXJlXHJcbmV4cG9ydCBmdW5jdGlvbiBjaGVja1JhdGVMaW1pdChpZGVudGlmaWVyOiBzdHJpbmcsIGxpbWl0ZXI6IFJhdGVMaW1pdGVyKTogeyBhbGxvd2VkOiBib29sZWFuOyBoZWFkZXJzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IH0ge1xyXG4gIGNvbnN0IHJlc3VsdCA9IGxpbWl0ZXIuaXNBbGxvd2VkKGlkZW50aWZpZXIpO1xyXG4gIFxyXG4gIC8vIENsZWFuIHVwIGV4cGlyZWQgZW50cmllcyBwZXJpb2RpY2FsbHlcclxuICBpZiAoTWF0aC5yYW5kb20oKSA8IDAuMDEpIHsgLy8gMSUgY2hhbmNlXHJcbiAgICBsaW1pdGVyLmNsZWFudXAoKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IGhlYWRlcnMgPSB7XHJcbiAgICAnWC1SYXRlTGltaXQtTGltaXQnOiBsaW1pdGVyWydtYXhSZXF1ZXN0cyddLnRvU3RyaW5nKCksXHJcbiAgICAnWC1SYXRlTGltaXQtUmVtYWluaW5nJzogcmVzdWx0LnJlbWFpbmluZy50b1N0cmluZygpLFxyXG4gICAgJ1gtUmF0ZUxpbWl0LVJlc2V0JzogbmV3IERhdGUocmVzdWx0LnJlc2V0VGltZSkudG9JU09TdHJpbmcoKVxyXG4gIH07XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBhbGxvd2VkOiByZXN1bHQuYWxsb3dlZCxcclxuICAgIGhlYWRlcnNcclxuICB9O1xyXG59XHJcbiJdLCJuYW1lcyI6WyJSYXRlTGltaXRlciIsImNvbnN0cnVjdG9yIiwid2luZG93TXMiLCJtYXhSZXF1ZXN0cyIsInJlcXVlc3RzIiwiTWFwIiwiaXNBbGxvd2VkIiwiaWRlbnRpZmllciIsIm5vdyIsIkRhdGUiLCJlbnRyeSIsImdldCIsInJlc2V0VGltZSIsInNldCIsImNvdW50IiwiYWxsb3dlZCIsInJlbWFpbmluZyIsImNsZWFudXAiLCJmb3JFYWNoIiwia2V5IiwiZGVsZXRlIiwiYXBpUmF0ZUxpbWl0ZXIiLCJhdXRoUmF0ZUxpbWl0ZXIiLCJjaGVja1JhdGVMaW1pdCIsImxpbWl0ZXIiLCJyZXN1bHQiLCJNYXRoIiwicmFuZG9tIiwiaGVhZGVycyIsInRvU3RyaW5nIiwidG9JU09TdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/rateLimiter.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/supabaseDatabase.ts":
/*!*************************************!*\
  !*** ./src/lib/supabaseDatabase.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addCustomer: () => (/* binding */ addCustomer),\n/* harmony export */   addOrder: () => (/* binding */ addOrder),\n/* harmony export */   addProduct: () => (/* binding */ addProduct),\n/* harmony export */   clearProductsCache: () => (/* binding */ clearProductsCache),\n/* harmony export */   deductStockFromOrder: () => (/* binding */ deductStockFromOrder),\n/* harmony export */   deleteOrder: () => (/* binding */ deleteOrder),\n/* harmony export */   deleteProduct: () => (/* binding */ deleteProduct),\n/* harmony export */   getCustomers: () => (/* binding */ getCustomers),\n/* harmony export */   getInventory: () => (/* binding */ getInventory),\n/* harmony export */   getMaintenanceSettings: () => (/* binding */ getMaintenanceSettings),\n/* harmony export */   getOrder: () => (/* binding */ getOrder),\n/* harmony export */   getOrders: () => (/* binding */ getOrders),\n/* harmony export */   getProduct: () => (/* binding */ getProduct),\n/* harmony export */   getProducts: () => (/* binding */ getProducts),\n/* harmony export */   getWilayaTariffs: () => (/* binding */ getWilayaTariffs),\n/* harmony export */   supabase: () => (/* binding */ supabase),\n/* harmony export */   updateInventory: () => (/* binding */ updateInventory),\n/* harmony export */   updateMaintenanceSettings: () => (/* binding */ updateMaintenanceSettings),\n/* harmony export */   updateOrder: () => (/* binding */ updateOrder),\n/* harmony export */   updateProduct: () => (/* binding */ updateProduct),\n/* harmony export */   updateWilayaTariffs: () => (/* binding */ updateWilayaTariffs)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n// Database service using Supabase (free tier)\n// This provides persistent storage with a real database\n\n// Supabase configuration - MUST use environment variables\nconst supabaseUrl = \"https://twlegtqcyydgjkycxngw.supabase.co\";\nconst supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InR3bGVndHFjeXlkZ2preWN4bmd3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTcxNzQ2MDAsImV4cCI6MjA3Mjc1MDYwMH0.uD9GD_ksHCDgmmPAgR7fcLUAJHRJtTkT-J-SVjU-WR0\";\nif (!supabaseUrl || !supabaseKey) {\n    throw new Error(\"Missing Supabase environment variables. Please set NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY\");\n}\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseKey);\n// Export the supabase client for direct use\n\n// Helper function to convert database product to Product interface\nfunction convertDbProductToProduct(dbProduct) {\n    // Debug logging\n    console.log(\"\\uD83D\\uDD0D DEBUG: Raw price from DB:\", dbProduct.price, \"Type:\", typeof dbProduct.price);\n    console.log(\"\\uD83D\\uDD0D DEBUG: Parsed price:\", parseFloat(dbProduct.price), \"Type:\", typeof parseFloat(dbProduct.price));\n    const convertedProduct = {\n        id: dbProduct.id,\n        name: dbProduct.name,\n        description: dbProduct.description,\n        price: parseFloat(dbProduct.price),\n        originalPrice: dbProduct.original_price ? parseFloat(dbProduct.original_price) : undefined,\n        image: dbProduct.image,\n        images: dbProduct.images || [],\n        stock: dbProduct.stock || {},\n        category: dbProduct.category,\n        sizes: dbProduct.sizes || [],\n        colors: dbProduct.colors || [],\n        inStock: dbProduct.in_stock,\n        rating: parseFloat(dbProduct.rating || 0),\n        reviews: dbProduct.reviews || 0,\n        sku: dbProduct.sku,\n        weight: dbProduct.weight ? parseFloat(dbProduct.weight) : undefined,\n        dimensions: dbProduct.dimensions,\n        tags: dbProduct.tags || [],\n        featured: dbProduct.featured || false,\n        sizeChartCategory: dbProduct.size_chart_category || \"T-Shirts\",\n        customSizeChart: dbProduct.custom_size_chart || undefined,\n        useCustomSizeChart: dbProduct.use_custom_size_chart || false,\n        createdAt: new Date(dbProduct.created_at),\n        updatedAt: new Date(dbProduct.updated_at)\n    };\n    console.log(\"\\uD83D\\uDD0D DEBUG: Final converted product price:\", convertedProduct.price, \"Type:\", typeof convertedProduct.price);\n    return convertedProduct;\n}\n// Cache for products to reduce database calls\nlet productsCache = null;\nlet productsCacheTime = 0;\nconst CACHE_DURATION = 30000; // 30 seconds\n// Clear cache function\nfunction clearProductsCache() {\n    productsCache = null;\n    productsCacheTime = 0;\n    console.log(\"Supabase: Products cache cleared\");\n}\n// Force clear cache immediately to fix price formatting issue\nclearProductsCache();\n// Add timestamp to force cache invalidation\nconst CACHE_BUSTER = Date.now();\nconsole.log(\"\\uD83D\\uDE80 Cache buster timestamp:\", CACHE_BUSTER);\n// Products operations\nasync function getProducts() {\n    try {\n        // Return cached data if still fresh\n        if (productsCache && Date.now() - productsCacheTime < CACHE_DURATION) {\n            console.log(\"Supabase: Returning cached products\");\n            return productsCache;\n        }\n        const { data, error } = await supabase.from(\"products\").select(\"*\").order(\"created_at\", {\n            ascending: false\n        });\n        if (error) {\n            console.error(\"Supabase getProducts error:\", error);\n            return productsCache || [];\n        }\n        const products = (data || []).map(convertDbProductToProduct);\n        // Update cache\n        productsCache = products;\n        productsCacheTime = Date.now();\n        return products;\n    } catch (error) {\n        console.error(\"Supabase getProducts error:\", error);\n        return productsCache || [];\n    }\n}\nasync function getProduct(id) {\n    try {\n        const { data, error } = await supabase.from(\"products\").select(\"*\").eq(\"id\", id).single();\n        if (error) {\n            console.error(\"Supabase getProduct error:\", error);\n            return null;\n        }\n        return convertDbProductToProduct(data);\n    } catch (error) {\n        console.error(\"Supabase getProduct error:\", error);\n        return null;\n    }\n}\nasync function addProduct(product) {\n    try {\n        console.log(\"\\uD83D\\uDD27 Supabase addProduct: Starting to add product:\", product.id, product.name);\n        // Check if Supabase is properly configured\n        if (!supabase) {\n            console.error(\"❌ Supabase: Client not initialized\");\n            throw new Error(\"Supabase client not initialized\");\n        }\n        // Convert camelCase to snake_case for database\n        // Only include columns that exist in the current database schema\n        const dbProduct = {\n            id: product.id,\n            name: product.name,\n            description: product.description,\n            price: product.price,\n            original_price: product.originalPrice,\n            image: product.image,\n            images: product.images || [],\n            stock: product.stock,\n            category: product.category,\n            sizes: product.sizes || [],\n            colors: product.colors || [],\n            in_stock: product.inStock,\n            rating: product.rating,\n            reviews: product.reviews,\n            sku: product.sku,\n            weight: product.weight,\n            dimensions: product.dimensions,\n            tags: product.tags || [],\n            featured: product.featured || false,\n            custom_size_chart: product.customSizeChart || null,\n            use_custom_size_chart: product.useCustomSizeChart || false,\n            size_chart_category: product.sizeChartCategory || product.category\n        };\n        console.log(\"\\uD83D\\uDD27 Supabase addProduct: Database product object:\", JSON.stringify(dbProduct, null, 2));\n        console.log(\"\\uD83D\\uDD27 Supabase addProduct: Attempting to insert into products table...\");\n        const { data, error } = await supabase.from(\"products\").insert([\n            dbProduct\n        ]).select().single();\n        console.log(\"\\uD83D\\uDD27 Supabase addProduct: Insert result - data:\", data);\n        console.log(\"\\uD83D\\uDD27 Supabase addProduct: Insert result - error:\", error);\n        if (error) {\n            console.error(\"❌ Supabase addProduct error:\", error);\n            console.error(\"❌ Supabase addProduct error details:\", JSON.stringify(error, null, 2));\n            console.error(\"❌ Supabase addProduct error code:\", error.code);\n            console.error(\"❌ Supabase addProduct error message:\", error.message);\n            console.error(\"❌ Supabase addProduct error hint:\", error.hint);\n            throw new Error(`Supabase insert failed: ${error.message} (Code: ${error.code})`);\n        }\n        console.log(\"Supabase: Added product:\", product.id);\n        // Initialize inventory for the new product\n        try {\n            const { initializeProductInventory } = await __webpack_require__.e(/*! import() */ \"_rsc_src_lib_inventoryService_ts\").then(__webpack_require__.bind(__webpack_require__, /*! ./inventoryService */ \"(rsc)/./src/lib/inventoryService.ts\"));\n            await initializeProductInventory(product.id);\n            console.log(\"Supabase: Initialized inventory for product:\", product.id);\n        } catch (inventoryError) {\n            console.error(\"Supabase: Failed to initialize inventory for product:\", product.id, inventoryError);\n        // Don't throw error here, product creation should still succeed\n        }\n        // Invalidate cache\n        productsCache = null;\n        // Convert back to camelCase\n        return convertDbProductToProduct(data);\n    } catch (error) {\n        console.error(\"Supabase addProduct error:\", error);\n        throw error;\n    }\n}\nasync function updateProduct(id, product) {\n    try {\n        // Convert camelCase to snake_case for database\n        const dbProduct = {};\n        if (product.name !== undefined) dbProduct.name = product.name;\n        if (product.description !== undefined) dbProduct.description = product.description;\n        if (product.price !== undefined) dbProduct.price = product.price;\n        if (product.originalPrice !== undefined) dbProduct.original_price = product.originalPrice;\n        if (product.image !== undefined) dbProduct.image = product.image;\n        if (product.images !== undefined) dbProduct.images = product.images;\n        if (product.stock !== undefined) dbProduct.stock = product.stock;\n        if (product.category !== undefined) dbProduct.category = product.category;\n        if (product.sizes !== undefined) dbProduct.sizes = product.sizes;\n        if (product.colors !== undefined) dbProduct.colors = product.colors;\n        if (product.inStock !== undefined) dbProduct.in_stock = product.inStock;\n        if (product.rating !== undefined) dbProduct.rating = product.rating;\n        if (product.reviews !== undefined) dbProduct.reviews = product.reviews;\n        if (product.sku !== undefined) dbProduct.sku = product.sku;\n        if (product.weight !== undefined) dbProduct.weight = product.weight;\n        if (product.dimensions !== undefined) dbProduct.dimensions = product.dimensions;\n        if (product.tags !== undefined) dbProduct.tags = product.tags;\n        if (product.featured !== undefined) dbProduct.featured = product.featured;\n        if (product.sizeChartCategory !== undefined) dbProduct.size_chart_category = product.sizeChartCategory;\n        if (product.customSizeChart !== undefined) dbProduct.custom_size_chart = product.customSizeChart;\n        if (product.useCustomSizeChart !== undefined) dbProduct.use_custom_size_chart = product.useCustomSizeChart;\n        const { data, error } = await supabase.from(\"products\").update(dbProduct).eq(\"id\", id).select().single();\n        if (error) {\n            console.error(\"Supabase updateProduct error:\", error);\n            return null;\n        }\n        console.log(\"Supabase: Updated product:\", id);\n        // Invalidate cache\n        productsCache = null;\n        return convertDbProductToProduct(data);\n    } catch (error) {\n        console.error(\"Supabase updateProduct error:\", error);\n        return null;\n    }\n}\nasync function deleteProduct(id) {\n    try {\n        const { error } = await supabase.from(\"products\").delete().eq(\"id\", id);\n        if (error) {\n            console.error(\"Supabase deleteProduct error:\", error);\n            return false;\n        }\n        console.log(\"Supabase: Deleted product:\", id);\n        // Invalidate cache\n        productsCache = null;\n        return true;\n    } catch (error) {\n        console.error(\"Supabase deleteProduct error:\", error);\n        return false;\n    }\n}\n// Helper function to convert database order to Order interface\nfunction convertDbOrderToOrder(dbOrder) {\n    // Extract customer info from items or use defaults\n    const firstItem = dbOrder.items && dbOrder.items.length > 0 ? dbOrder.items[0] : {};\n    return {\n        id: dbOrder.id,\n        productId: firstItem.productId || \"\",\n        productName: firstItem.productName || \"\",\n        productImage: firstItem.productImage || \"\",\n        customerName: firstItem.customerName || \"\",\n        customerPhone: firstItem.customerPhone || \"\",\n        customerEmail: firstItem.customerEmail || \"\",\n        customerAddress: firstItem.customerAddress || \"\",\n        customerCity: firstItem.customerCity || \"\",\n        wilayaId: firstItem.wilayaId || 0,\n        wilayaName: firstItem.wilayaName || \"\",\n        shippingType: dbOrder.shipping_type || \"homeDelivery\",\n        shippingCost: Number(dbOrder.shipping_cost) || 0,\n        quantity: firstItem.quantity || 1,\n        selectedSize: firstItem.selectedSize || \"\",\n        selectedColor: firstItem.selectedColor || \"\",\n        subtotal: Number(dbOrder.total) - Number(dbOrder.shipping_cost) || 0,\n        total: Number(dbOrder.total) || 0,\n        orderDate: new Date(dbOrder.order_date),\n        status: dbOrder.status || \"pending\",\n        trackingNumber: dbOrder.tracking_number,\n        notes: firstItem.notes,\n        paymentMethod: dbOrder.payment_method || \"cod\",\n        paymentStatus: dbOrder.payment_status || \"pending\",\n        estimatedDelivery: firstItem.estimatedDelivery,\n        createdAt: new Date(dbOrder.created_at),\n        updatedAt: new Date(dbOrder.updated_at)\n    };\n}\n// Cache for orders to reduce database calls\nlet ordersCache = null;\nlet ordersCacheTime = 0;\n// Orders operations\nasync function getOrders() {\n    try {\n        // Return cached data if still fresh\n        if (ordersCache && Date.now() - ordersCacheTime < CACHE_DURATION) {\n            console.log(\"Supabase: Returning cached orders\");\n            return ordersCache;\n        }\n        const { data, error } = await supabase.from(\"orders\").select(\"*\").order(\"order_date\", {\n            ascending: false\n        });\n        if (error) {\n            console.error(\"Supabase getOrders error:\", error);\n            return ordersCache || [];\n        }\n        const orders = (data || []).map(convertDbOrderToOrder);\n        // Update cache\n        ordersCache = orders;\n        ordersCacheTime = Date.now();\n        return orders;\n    } catch (error) {\n        console.error(\"Supabase getOrders error:\", error);\n        return ordersCache || [];\n    }\n}\nasync function getOrder(id) {\n    try {\n        const { data, error } = await supabase.from(\"orders\").select(\"*\").eq(\"id\", id).single();\n        if (error) {\n            console.error(\"Supabase getOrder error:\", error);\n            return null;\n        }\n        return convertDbOrderToOrder(data);\n    } catch (error) {\n        console.error(\"Supabase getOrder error:\", error);\n        return null;\n    }\n}\nasync function addOrder(order) {\n    try {\n        // Convert Order interface to database format\n        const dbOrder = {\n            id: order.id,\n            customer_id: `CUST-${Date.now()}`,\n            items: [\n                {\n                    productId: order.productId,\n                    productName: order.productName,\n                    productImage: order.productImage,\n                    customerName: order.customerName,\n                    customerPhone: order.customerPhone,\n                    customerEmail: order.customerEmail,\n                    customerAddress: order.customerAddress,\n                    customerCity: order.customerCity,\n                    wilayaId: order.wilayaId,\n                    wilayaName: order.wilayaName,\n                    quantity: order.quantity,\n                    selectedSize: order.selectedSize,\n                    selectedColor: order.selectedColor,\n                    notes: order.notes,\n                    estimatedDelivery: order.estimatedDelivery\n                }\n            ],\n            total: order.total,\n            shipping_cost: order.shippingCost,\n            shipping_type: order.shippingType,\n            payment_method: order.paymentMethod,\n            payment_status: order.paymentStatus,\n            status: order.status,\n            tracking_number: order.trackingNumber,\n            order_date: order.orderDate.toISOString(),\n            created_at: order.createdAt.toISOString(),\n            updated_at: order.updatedAt.toISOString()\n        };\n        const { data, error } = await supabase.from(\"orders\").insert([\n            dbOrder\n        ]).select().single();\n        if (error) {\n            console.error(\"Supabase addOrder error:\", error);\n            throw error;\n        }\n        console.log(\"Supabase: Added order:\", order.id);\n        return convertDbOrderToOrder(data);\n    } catch (error) {\n        console.error(\"Supabase addOrder error:\", error);\n        throw error;\n    }\n}\nasync function updateOrder(id, order) {\n    try {\n        // Convert partial Order to database format\n        const updateData = {\n            updated_at: new Date().toISOString()\n        };\n        if (order.status !== undefined) updateData.status = order.status;\n        if (order.paymentStatus !== undefined) updateData.payment_status = order.paymentStatus;\n        if (order.trackingNumber !== undefined) updateData.tracking_number = order.trackingNumber;\n        if (order.shippingType !== undefined) updateData.shipping_type = order.shippingType;\n        if (order.shippingCost !== undefined) updateData.shipping_cost = order.shippingCost;\n        if (order.total !== undefined) updateData.total = order.total;\n        if (order.paymentMethod !== undefined) updateData.payment_method = order.paymentMethod;\n        const { data, error } = await supabase.from(\"orders\").update(updateData).eq(\"id\", id).select().single();\n        if (error) {\n            console.error(\"Supabase updateOrder error:\", error);\n            return null;\n        }\n        console.log(\"Supabase: Updated order:\", id);\n        return convertDbOrderToOrder(data);\n    } catch (error) {\n        console.error(\"Supabase updateOrder error:\", error);\n        return null;\n    }\n}\nasync function deleteOrder(id) {\n    try {\n        // First, get the order details to restore inventory\n        const order = await getOrder(id);\n        if (!order) {\n            console.error(\"Supabase deleteOrder: Order not found:\", id);\n            return false;\n        }\n        // Restore inventory quantity\n        if (order.productId && order.selectedSize && order.selectedColor && order.quantity) {\n            try {\n                const { addInventory } = await __webpack_require__.e(/*! import() */ \"_rsc_src_lib_inventoryService_ts\").then(__webpack_require__.bind(__webpack_require__, /*! ./inventoryService */ \"(rsc)/./src/lib/inventoryService.ts\"));\n                const inventoryRestored = await addInventory(order.productId, order.selectedSize, order.selectedColor, order.quantity, `Order ${id} deleted - inventory restored`, \"admin\");\n                if (inventoryRestored) {\n                    console.log(\"Supabase deleteOrder: Inventory restored for order:\", id);\n                } else {\n                    console.warn(\"Supabase deleteOrder: Failed to restore inventory for order:\", id);\n                }\n            } catch (inventoryError) {\n                console.error(\"Supabase deleteOrder: Inventory restoration error:\", inventoryError);\n            // Continue with order deletion even if inventory restoration fails\n            }\n        }\n        // Delete the order\n        const { error } = await supabase.from(\"orders\").delete().eq(\"id\", id);\n        if (error) {\n            console.error(\"Supabase deleteOrder error:\", error);\n            return false;\n        }\n        console.log(\"Supabase: Deleted order:\", id);\n        return true;\n    } catch (error) {\n        console.error(\"Supabase deleteOrder error:\", error);\n        return false;\n    }\n}\n// Wilaya operations\nasync function getWilayaTariffs() {\n    try {\n        const { data, error } = await supabase.from(\"wilaya_tariffs\").select(\"*\").order(\"order\", {\n            ascending: true\n        });\n        if (error) {\n            console.error(\"Supabase getWilayaTariffs error:\", error);\n            return [];\n        }\n        // Transform the data to match the expected format\n        const transformedData = (data || []).map((tariff)=>({\n                id: tariff.id.toString(),\n                wilaya_id: tariff.wilaya_id,\n                name: tariff.name,\n                domicile_ecommerce: tariff.domicile_ecommerce,\n                stop_desk_ecommerce: tariff.stop_desk_ecommerce,\n                order: tariff.order,\n                // Legacy compatibility for backward compatibility\n                home_delivery: tariff.domicile_ecommerce,\n                stop_desk: tariff.stop_desk_ecommerce,\n                homeDelivery: tariff.domicile_ecommerce,\n                stopDesk: tariff.stop_desk_ecommerce,\n                domicileEcommerce: tariff.domicile_ecommerce,\n                stopDeskEcommerce: tariff.stop_desk_ecommerce\n            }));\n        return transformedData;\n    } catch (error) {\n        console.error(\"Supabase getWilayaTariffs error:\", error);\n        return [];\n    }\n}\nasync function updateWilayaTariffs(tariffs) {\n    try {\n        // Delete all existing tariffs\n        await supabase.from(\"wilaya_tariffs\").delete().neq(\"id\", 0); // Delete all records\n        // Insert new tariffs\n        if (tariffs.length > 0) {\n            // Transform the data to match database structure\n            const transformedTariffs = tariffs.map((tariff)=>({\n                    wilaya_id: tariff.wilaya_id || tariff.id,\n                    name: tariff.name,\n                    domicile_ecommerce: tariff.domicile_ecommerce || tariff.domicileEcommerce || tariff.home_delivery || tariff.homeDelivery || 0,\n                    stop_desk_ecommerce: tariff.stop_desk_ecommerce || tariff.stopDeskEcommerce || tariff.stop_desk || tariff.stopDesk || 0,\n                    order: tariff.order || 1\n                }));\n            const { error } = await supabase.from(\"wilaya_tariffs\").insert(transformedTariffs);\n            if (error) {\n                console.error(\"Supabase updateWilayaTariffs error:\", error);\n                throw error;\n            }\n        }\n        console.log(\"Supabase: Updated wilaya tariffs\");\n    } catch (error) {\n        console.error(\"Supabase updateWilayaTariffs error:\", error);\n        throw error;\n    }\n}\n// Inventory operations\nasync function getInventory() {\n    try {\n        const { data, error } = await supabase.from(\"products\").select(\"id, name, sku, stock, sizes, colors, in_stock, category\").order(\"name\");\n        if (error) {\n            console.error(\"Supabase getInventory error:\", error);\n            return [];\n        }\n        // Transform data for inventory management\n        return (data || []).map((product)=>({\n                id: product.id,\n                name: product.name,\n                sku: product.sku,\n                category: product.category,\n                inStock: product.in_stock,\n                stock: product.stock || {},\n                sizes: product.sizes || [],\n                colors: product.colors || [],\n                totalStock: calculateTotalStock(product.stock || {}),\n                stockBySize: calculateStockBySize(product.stock || {}, product.sizes || [], product.colors || [])\n            }));\n    } catch (error) {\n        console.error(\"Supabase getInventory error:\", error);\n        return [];\n    }\n}\nasync function updateInventory(productId, stockData) {\n    try {\n        const updateObj = {\n            updated_at: new Date().toISOString()\n        };\n        if (stockData.stock) {\n            updateObj.stock = stockData.stock;\n        }\n        if (stockData.inStock !== undefined) {\n            updateObj.in_stock = stockData.inStock;\n        }\n        const { data, error } = await supabase.from(\"products\").update(updateObj).eq(\"id\", productId).select().single();\n        if (error) {\n            console.error(\"Supabase updateInventory error:\", error);\n            throw error;\n        }\n        console.log(\"Supabase: Updated inventory for product:\", productId);\n        return {\n            id: data.id,\n            name: data.name,\n            stock: data.stock,\n            inStock: data.in_stock,\n            totalStock: calculateTotalStock(data.stock)\n        };\n    } catch (error) {\n        console.error(\"Supabase updateInventory error:\", error);\n        throw error;\n    }\n}\n// Helper functions for inventory calculations\nfunction calculateTotalStock(stock) {\n    if (!stock || typeof stock !== \"object\") return 0;\n    let total = 0;\n    for(const size in stock){\n        if (typeof stock[size] === \"object\") {\n            for(const color in stock[size]){\n                total += Number(stock[size][color]) || 0;\n            }\n        }\n    }\n    return total;\n}\nfunction calculateStockBySize(stock, sizes, colors) {\n    const result = {};\n    sizes.forEach((size)=>{\n        result[size] = {};\n        colors.forEach((color)=>{\n            result[size][color] = Number(stock[size]?.[color]) || 0;\n        });\n    });\n    return result;\n}\n// Stock deduction function for orders\nasync function deductStockFromOrder(order) {\n    try {\n        console.log(\"Supabase: Deducting stock for order:\", order.id);\n        // Get the product\n        const product = await getProduct(order.productId);\n        if (!product) {\n            console.error(\"Supabase: Product not found for order:\", order.productId);\n            return false;\n        }\n        // Check if we have enough stock\n        const currentStock = product.stock?.[order.selectedSize]?.[order.selectedColor] || 0;\n        if (currentStock < order.quantity) {\n            console.error(\"Supabase: Insufficient stock for order:\", {\n                productId: order.productId,\n                size: order.selectedSize,\n                color: order.selectedColor,\n                requested: order.quantity,\n                available: currentStock\n            });\n            return false;\n        }\n        // Deduct the stock from product\n        const newStock = {\n            ...product.stock,\n            [order.selectedSize]: {\n                ...product.stock?.[order.selectedSize],\n                [order.selectedColor]: currentStock - order.quantity\n            }\n        };\n        // Update the product stock\n        const updatedProduct = await updateProduct(order.productId, {\n            stock: newStock,\n            inStock: calculateTotalStock(newStock) > 0\n        });\n        if (!updatedProduct) {\n            console.error(\"Supabase: Failed to update product stock for order:\", order.id);\n            return false;\n        }\n        // Also deduct from inventory system\n        try {\n            const { addInventory } = await __webpack_require__.e(/*! import() */ \"_rsc_src_lib_inventoryService_ts\").then(__webpack_require__.bind(__webpack_require__, /*! ./inventoryService */ \"(rsc)/./src/lib/inventoryService.ts\"));\n            const inventoryDeducted = await addInventory(order.productId, order.selectedSize, order.selectedColor, -order.quantity, `Order ${order.id} created - stock deducted`, \"system\");\n            if (inventoryDeducted) {\n                console.log(\"Supabase: Successfully deducted inventory for order:\", order.id);\n            } else {\n                console.warn(\"Supabase: Failed to deduct inventory for order:\", order.id);\n            }\n        } catch (inventoryError) {\n            console.error(\"Supabase: Inventory deduction error:\", inventoryError);\n        // Continue even if inventory update fails\n        }\n        console.log(\"Supabase: Successfully deducted stock for order:\", order.id);\n        return true;\n    } catch (error) {\n        console.error(\"Supabase: Error deducting stock for order:\", error);\n        return false;\n    }\n}\n// Maintenance settings operations\nasync function getMaintenanceSettings() {\n    try {\n        const { data, error } = await supabase.from(\"maintenance_settings\").select(\"*\").eq(\"id\", \"maintenance\").single();\n        if (error) {\n            console.error(\"Supabase getMaintenanceSettings error:\", error);\n            // If table doesn't exist, return default settings\n            if (error.code === \"PGRST205\") {\n                console.log(\"Maintenance settings table not found, using default settings\");\n            }\n            // Return default settings if no data exists\n            return {\n                id: \"maintenance\",\n                is_maintenance_mode: false,\n                drop_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n                maintenance_message: \"We are currently performing maintenance. Please check back later.\",\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            };\n        }\n        return data || {\n            id: \"maintenance\",\n            is_maintenance_mode: false,\n            drop_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n            maintenance_message: \"We are currently performing maintenance. Please check back later.\",\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n        };\n    } catch (error) {\n        console.error(\"Supabase getMaintenanceSettings error:\", error);\n        return {\n            id: \"maintenance\",\n            is_maintenance_mode: false,\n            drop_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n            maintenance_message: \"We are currently performing maintenance. Please check back later.\",\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n        };\n    }\n}\nasync function updateMaintenanceSettings(settings) {\n    try {\n        const updateData = {\n            updated_at: new Date().toISOString()\n        };\n        if (settings.is_maintenance_mode !== undefined) {\n            updateData.is_maintenance_mode = settings.is_maintenance_mode;\n        }\n        if (settings.drop_date !== undefined) {\n            updateData.drop_date = settings.drop_date;\n        }\n        if (settings.maintenance_message !== undefined) {\n            updateData.maintenance_message = settings.maintenance_message;\n        }\n        console.log(\"Updating maintenance settings with:\", updateData);\n        // Try update first\n        const { data: updateResult, error: updateError } = await supabase.from(\"maintenance_settings\").update(updateData).eq(\"id\", \"maintenance\").select().single();\n        if (updateError) {\n            console.error(\"Update error:\", updateError);\n            // If update fails, try insert\n            const { data: insertResult, error: insertError } = await supabase.from(\"maintenance_settings\").insert([\n                {\n                    id: \"maintenance\",\n                    is_maintenance_mode: settings.is_maintenance_mode ?? false,\n                    drop_date: settings.drop_date ?? new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n                    maintenance_message: settings.maintenance_message ?? \"We are currently performing maintenance. Please check back later.\",\n                    created_at: new Date().toISOString(),\n                    updated_at: new Date().toISOString()\n                }\n            ]).select().single();\n            if (insertError) {\n                console.error(\"Insert error:\", insertError);\n                throw insertError;\n            }\n            console.log(\"Supabase: Created maintenance settings\");\n            return insertResult;\n        }\n        console.log(\"Supabase: Updated maintenance settings\");\n        return updateResult;\n    } catch (error) {\n        console.error(\"Supabase updateMaintenanceSettings error:\", error);\n        throw error;\n    }\n}\n// Customers methods\nasync function getCustomers() {\n    try {\n        const { data, error } = await supabase.from(\"customers\").select(\"*\").order(\"created_at\", {\n            ascending: false\n        });\n        if (error) {\n            console.error(\"Supabase getCustomers error:\", error);\n            throw error;\n        }\n        console.log(\"Supabase: Fetched\", data?.length || 0, \"customers\");\n        return data || [];\n    } catch (error) {\n        console.error(\"Supabase getCustomers error:\", error);\n        throw error;\n    }\n}\nasync function addCustomer(customerData) {\n    try {\n        const now = new Date().toISOString();\n        const customer = {\n            ...customerData,\n            id: `customer_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n            created_at: now,\n            updated_at: now\n        };\n        const { data, error } = await supabase.from(\"customers\").insert([\n            customer\n        ]).select().single();\n        if (error) {\n            console.error(\"Supabase addCustomer error:\", error);\n            throw error;\n        }\n        console.log(\"Supabase: Created customer:\", data.id);\n        return {\n            id: data.id,\n            name: data.name,\n            email: data.email,\n            phone: data.phone,\n            address: data.address,\n            city: data.city,\n            wilaya: data.wilaya,\n            createdAt: new Date(data.created_at),\n            updatedAt: new Date(data.updated_at)\n        };\n    } catch (error) {\n        console.error(\"Supabase addCustomer error:\", error);\n        throw error;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/supabaseDatabase.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/validation.ts":
/*!*******************************!*\
  !*** ./src/lib/validation.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ValidationUtils: () => (/* binding */ ValidationUtils)\n/* harmony export */ });\n// Input validation and sanitization utilities\nclass ValidationUtils {\n    // Sanitize HTML input to prevent XSS\n    static sanitizeHtml(input) {\n        if (typeof input !== \"string\") return \"\";\n        return input.replace(/[<>]/g, \"\") // Remove < and >\n        .replace(/javascript:/gi, \"\") // Remove javascript: protocol\n        .replace(/on\\w+=/gi, \"\") // Remove event handlers\n        .trim();\n    }\n    // Validate email format\n    static isValidEmail(email) {\n        if (typeof email !== \"string\") return false;\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(email.trim());\n    }\n    // Validate phone number (basic)\n    static isValidPhone(phone) {\n        if (typeof phone !== \"string\") return false;\n        const phoneRegex = /^[\\+]?[0-9\\s\\-\\(\\)]{8,}$/;\n        return phoneRegex.test(phone.trim());\n    }\n    // Validate required fields\n    static validateRequired(data, fields) {\n        const missingFields = [];\n        for (const field of fields){\n            if (!data[field] || typeof data[field] === \"string\" && data[field].trim() === \"\") {\n                missingFields.push(field);\n            }\n        }\n        return {\n            isValid: missingFields.length === 0,\n            missingFields\n        };\n    }\n    // Validate string length\n    static validateLength(input, min, max) {\n        if (typeof input !== \"string\") return false;\n        const length = input.trim().length;\n        return length >= min && length <= max;\n    }\n    // Validate numeric input\n    static isValidNumber(input, min, max) {\n        const num = Number(input);\n        if (isNaN(num)) return false;\n        if (min !== undefined && num < min) return false;\n        if (max !== undefined && num > max) return false;\n        return true;\n    }\n    // Sanitize product data\n    static sanitizeProductData(data) {\n        return {\n            ...data,\n            name: this.sanitizeHtml(data.name || \"\"),\n            description: this.sanitizeHtml(data.description || \"\"),\n            category: this.sanitizeHtml(data.category || \"\"),\n            price: this.isValidNumber(data.price, 0, 999999) ? Number(data.price) : 0,\n            stock: data.stock || {},\n            image: this.sanitizeHtml(data.image || \"\"),\n            colors: Array.isArray(data.colors) ? data.colors.map((c)=>this.sanitizeHtml(c)) : [],\n            sizes: Array.isArray(data.sizes) ? data.sizes.map((s)=>this.sanitizeHtml(s)) : []\n        };\n    }\n    // Sanitize order data\n    static sanitizeOrderData(data) {\n        return {\n            ...data,\n            customerName: this.sanitizeHtml(data.customerName || \"\"),\n            customerEmail: this.isValidEmail(data.customerEmail) ? data.customerEmail.trim() : \"\",\n            customerPhone: this.isValidPhone(data.customerPhone) ? data.customerPhone.trim() : \"\",\n            customerAddress: this.sanitizeHtml(data.customerAddress || \"\"),\n            productName: this.sanitizeHtml(data.productName || \"\"),\n            selectedSize: this.sanitizeHtml(data.selectedSize || \"\"),\n            selectedColor: this.sanitizeHtml(data.selectedColor || \"\"),\n            notes: this.sanitizeHtml(data.notes || \"\"),\n            quantity: this.isValidNumber(data.quantity, 1, 100) ? Number(data.quantity) : 1,\n            total: this.isValidNumber(data.total, 0, 999999) ? Number(data.total) : 0\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/validation.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/nodemailer"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Forders%2Froute&page=%2Fapi%2Forders%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Forders%2Froute.ts&appDir=C%3A%5CUsers%5CHP%5CDesktop%5CObsidian%20wear%5Cprojectt%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CHP%5CDesktop%5CObsidian%20wear%5Cprojectt&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();