"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/products/route";
exports.ids = ["app/api/products/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fproducts%2Froute&page=%2Fapi%2Fproducts%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fproducts%2Froute.ts&appDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fproducts%2Froute&page=%2Fapi%2Fproducts%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fproducts%2Froute.ts&appDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_HP_Desktop_projectt_src_app_api_products_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/products/route.ts */ \"(rsc)/./src/app/api/products/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/products/route\",\n        pathname: \"/api/products\",\n        filename: \"route\",\n        bundlePath: \"app/api/products/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projectt\\\\src\\\\app\\\\api\\\\products\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_HP_Desktop_projectt_src_app_api_products_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/products/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZwcm9kdWN0cyUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGcHJvZHVjdHMlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZwcm9kdWN0cyUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNIUCU1Q0Rlc2t0b3AlNUNwcm9qZWN0dCU1Q3NyYyU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q1VzZXJzJTVDSFAlNUNEZXNrdG9wJTVDcHJvamVjdHQmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9c3RhbmRhbG9uZSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ21CO0FBQ2hHO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsdUdBQXVHO0FBQy9HO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDNko7O0FBRTdKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2JzaWRpYW4td2Vhci8/ODBhMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxIUFxcXFxEZXNrdG9wXFxcXHByb2plY3R0XFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXHByb2R1Y3RzXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcInN0YW5kYWxvbmVcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvcHJvZHVjdHMvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9wcm9kdWN0c1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvcHJvZHVjdHMvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJDOlxcXFxVc2Vyc1xcXFxIUFxcXFxEZXNrdG9wXFxcXHByb2plY3R0XFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXHByb2R1Y3RzXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL3Byb2R1Y3RzL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCwgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fproducts%2Froute&page=%2Fapi%2Fproducts%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fproducts%2Froute.ts&appDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/products/route.ts":
/*!***************************************!*\
  !*** ./src/app/api/products/route.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   runtime: () => (/* binding */ runtime)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var _lib_supabaseDatabase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/supabaseDatabase */ \"(rsc)/./src/lib/supabaseDatabase.ts\");\n\n\n// Ensure we use Node.js runtime for Supabase compatibility\nconst runtime = \"nodejs\";\n// GET /api/products - Get all products\nasync function GET() {\n    try {\n        const products = await (0,_lib_supabaseDatabase__WEBPACK_IMPORTED_MODULE_1__.getProducts)();\n        console.log(\"Products API: GET request - returning\", products.length, \"products\");\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: true,\n            data: products,\n            count: products.length,\n            timestamp: Date.now()\n        });\n    } catch (error) {\n        console.error(\"Products API: GET error:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: false,\n            error: \"Failed to fetch products\"\n        }, {\n            status: 500\n        });\n    }\n}\n// POST /api/products - Create new product\nasync function POST(request) {\n    try {\n        const productData = await request.json();\n        // Validate required fields\n        if (!productData.name || !productData.price) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: \"Name and price are required\"\n            }, {\n                status: 400\n            });\n        }\n        // Generate unique ID\n        const newProduct = {\n            id: Date.now().toString(),\n            ...productData,\n            createdAt: new Date(),\n            updatedAt: new Date()\n        };\n        const addedProduct = await (0,_lib_supabaseDatabase__WEBPACK_IMPORTED_MODULE_1__.addProduct)(newProduct);\n        console.log(\"Products API: POST request - created product:\", newProduct.id, newProduct.name);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: true,\n            data: addedProduct,\n            message: \"Product created successfully\",\n            timestamp: Date.now()\n        }, {\n            status: 201\n        });\n    } catch (error) {\n        console.error(\"Products API: POST error:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: false,\n            error: \"Failed to create product\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9wcm9kdWN0cy9yb3V0ZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUF3RDtBQUVTO0FBRWpFLDJEQUEyRDtBQUNwRCxNQUFNRyxVQUFVLFNBQVM7QUFFaEMsdUNBQXVDO0FBQ2hDLGVBQWVDO0lBQ3BCLElBQUk7UUFDRixNQUFNQyxXQUFXLE1BQU1KLGtFQUFXQTtRQUNsQ0ssUUFBUUMsR0FBRyxDQUFDLHlDQUF5Q0YsU0FBU0csTUFBTSxFQUFFO1FBQ3RFLE9BQU9SLGtGQUFZQSxDQUFDUyxJQUFJLENBQUM7WUFDdkJDLFNBQVM7WUFDVEMsTUFBTU47WUFDTk8sT0FBT1AsU0FBU0csTUFBTTtZQUN0QkssV0FBV0MsS0FBS0MsR0FBRztRQUNyQjtJQUNGLEVBQUUsT0FBT0MsT0FBTztRQUNkVixRQUFRVSxLQUFLLENBQUMsNEJBQTRCQTtRQUMxQyxPQUFPaEIsa0ZBQVlBLENBQUNTLElBQUksQ0FDdEI7WUFBRUMsU0FBUztZQUFPTSxPQUFPO1FBQTJCLEdBQ3BEO1lBQUVDLFFBQVE7UUFBSTtJQUVsQjtBQUNGO0FBRUEsMENBQTBDO0FBQ25DLGVBQWVDLEtBQUtDLE9BQW9CO0lBQzdDLElBQUk7UUFDRixNQUFNQyxjQUFjLE1BQU1ELFFBQVFWLElBQUk7UUFFdEMsMkJBQTJCO1FBQzNCLElBQUksQ0FBQ1csWUFBWUMsSUFBSSxJQUFJLENBQUNELFlBQVlFLEtBQUssRUFBRTtZQUMzQyxPQUFPdEIsa0ZBQVlBLENBQUNTLElBQUksQ0FDdEI7Z0JBQUVDLFNBQVM7Z0JBQU9NLE9BQU87WUFBOEIsR0FDdkQ7Z0JBQUVDLFFBQVE7WUFBSTtRQUVsQjtRQUVBLHFCQUFxQjtRQUNyQixNQUFNTSxhQUFzQjtZQUMxQkMsSUFBSVYsS0FBS0MsR0FBRyxHQUFHVSxRQUFRO1lBQ3ZCLEdBQUdMLFdBQVc7WUFDZE0sV0FBVyxJQUFJWjtZQUNmYSxXQUFXLElBQUliO1FBQ2pCO1FBRUEsTUFBTWMsZUFBZSxNQUFNMUIsaUVBQVVBLENBQUNxQjtRQUV0Q2pCLFFBQVFDLEdBQUcsQ0FBQyxpREFBaURnQixXQUFXQyxFQUFFLEVBQUVELFdBQVdGLElBQUk7UUFFM0YsT0FBT3JCLGtGQUFZQSxDQUFDUyxJQUFJLENBQUM7WUFDdkJDLFNBQVM7WUFDVEMsTUFBTWlCO1lBQ05DLFNBQVM7WUFDVGhCLFdBQVdDLEtBQUtDLEdBQUc7UUFDckIsR0FBRztZQUFFRSxRQUFRO1FBQUk7SUFDbkIsRUFBRSxPQUFPRCxPQUFPO1FBQ2RWLFFBQVFVLEtBQUssQ0FBQyw2QkFBNkJBO1FBQzNDLE9BQU9oQixrRkFBWUEsQ0FBQ1MsSUFBSSxDQUN0QjtZQUFFQyxTQUFTO1lBQU9NLE9BQU87UUFBMkIsR0FDcEQ7WUFBRUMsUUFBUTtRQUFJO0lBRWxCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vYnNpZGlhbi13ZWFyLy4vc3JjL2FwcC9hcGkvcHJvZHVjdHMvcm91dGUudHM/MTcwYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xyXG5pbXBvcnQgeyBQcm9kdWN0IH0gZnJvbSAnQC90eXBlcyc7XHJcbmltcG9ydCB7IGdldFByb2R1Y3RzLCBhZGRQcm9kdWN0IH0gZnJvbSAnQC9saWIvc3VwYWJhc2VEYXRhYmFzZSc7XHJcblxyXG4vLyBFbnN1cmUgd2UgdXNlIE5vZGUuanMgcnVudGltZSBmb3IgU3VwYWJhc2UgY29tcGF0aWJpbGl0eVxyXG5leHBvcnQgY29uc3QgcnVudGltZSA9ICdub2RlanMnO1xyXG5cclxuLy8gR0VUIC9hcGkvcHJvZHVjdHMgLSBHZXQgYWxsIHByb2R1Y3RzXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQoKSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHByb2R1Y3RzID0gYXdhaXQgZ2V0UHJvZHVjdHMoKTtcclxuICAgIGNvbnNvbGUubG9nKCdQcm9kdWN0cyBBUEk6IEdFVCByZXF1ZXN0IC0gcmV0dXJuaW5nJywgcHJvZHVjdHMubGVuZ3RoLCAncHJvZHVjdHMnKTtcclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XHJcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgIGRhdGE6IHByb2R1Y3RzLFxyXG4gICAgICBjb3VudDogcHJvZHVjdHMubGVuZ3RoLFxyXG4gICAgICB0aW1lc3RhbXA6IERhdGUubm93KClcclxuICAgIH0pO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdQcm9kdWN0cyBBUEk6IEdFVCBlcnJvcjonLCBlcnJvcik7XHJcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXHJcbiAgICAgIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiAnRmFpbGVkIHRvIGZldGNoIHByb2R1Y3RzJyB9LFxyXG4gICAgICB7IHN0YXR1czogNTAwIH1cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBQT1NUIC9hcGkvcHJvZHVjdHMgLSBDcmVhdGUgbmV3IHByb2R1Y3RcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgcHJvZHVjdERhdGEgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKTtcclxuICAgIFxyXG4gICAgLy8gVmFsaWRhdGUgcmVxdWlyZWQgZmllbGRzXHJcbiAgICBpZiAoIXByb2R1Y3REYXRhLm5hbWUgfHwgIXByb2R1Y3REYXRhLnByaWNlKSB7XHJcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgICB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJ05hbWUgYW5kIHByaWNlIGFyZSByZXF1aXJlZCcgfSxcclxuICAgICAgICB7IHN0YXR1czogNDAwIH1cclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBHZW5lcmF0ZSB1bmlxdWUgSURcclxuICAgIGNvbnN0IG5ld1Byb2R1Y3Q6IFByb2R1Y3QgPSB7XHJcbiAgICAgIGlkOiBEYXRlLm5vdygpLnRvU3RyaW5nKCksXHJcbiAgICAgIC4uLnByb2R1Y3REYXRhLFxyXG4gICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXHJcbiAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKVxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBhZGRlZFByb2R1Y3QgPSBhd2FpdCBhZGRQcm9kdWN0KG5ld1Byb2R1Y3QpO1xyXG4gICAgXHJcbiAgICBjb25zb2xlLmxvZygnUHJvZHVjdHMgQVBJOiBQT1NUIHJlcXVlc3QgLSBjcmVhdGVkIHByb2R1Y3Q6JywgbmV3UHJvZHVjdC5pZCwgbmV3UHJvZHVjdC5uYW1lKTtcclxuICAgIFxyXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcclxuICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgZGF0YTogYWRkZWRQcm9kdWN0LFxyXG4gICAgICBtZXNzYWdlOiAnUHJvZHVjdCBjcmVhdGVkIHN1Y2Nlc3NmdWxseScsXHJcbiAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKVxyXG4gICAgfSwgeyBzdGF0dXM6IDIwMSB9KTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignUHJvZHVjdHMgQVBJOiBQT1NUIGVycm9yOicsIGVycm9yKTtcclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgeyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6ICdGYWlsZWQgdG8gY3JlYXRlIHByb2R1Y3QnIH0sXHJcbiAgICAgIHsgc3RhdHVzOiA1MDAgfVxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsImdldFByb2R1Y3RzIiwiYWRkUHJvZHVjdCIsInJ1bnRpbWUiLCJHRVQiLCJwcm9kdWN0cyIsImNvbnNvbGUiLCJsb2ciLCJsZW5ndGgiLCJqc29uIiwic3VjY2VzcyIsImRhdGEiLCJjb3VudCIsInRpbWVzdGFtcCIsIkRhdGUiLCJub3ciLCJlcnJvciIsInN0YXR1cyIsIlBPU1QiLCJyZXF1ZXN0IiwicHJvZHVjdERhdGEiLCJuYW1lIiwicHJpY2UiLCJuZXdQcm9kdWN0IiwiaWQiLCJ0b1N0cmluZyIsImNyZWF0ZWRBdCIsInVwZGF0ZWRBdCIsImFkZGVkUHJvZHVjdCIsIm1lc3NhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/products/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/supabaseDatabase.ts":
/*!*************************************!*\
  !*** ./src/lib/supabaseDatabase.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addCustomer: () => (/* binding */ addCustomer),\n/* harmony export */   addOrder: () => (/* binding */ addOrder),\n/* harmony export */   addProduct: () => (/* binding */ addProduct),\n/* harmony export */   deductStockFromOrder: () => (/* binding */ deductStockFromOrder),\n/* harmony export */   deleteOrder: () => (/* binding */ deleteOrder),\n/* harmony export */   deleteProduct: () => (/* binding */ deleteProduct),\n/* harmony export */   getCustomers: () => (/* binding */ getCustomers),\n/* harmony export */   getInventory: () => (/* binding */ getInventory),\n/* harmony export */   getOrder: () => (/* binding */ getOrder),\n/* harmony export */   getOrders: () => (/* binding */ getOrders),\n/* harmony export */   getProduct: () => (/* binding */ getProduct),\n/* harmony export */   getProducts: () => (/* binding */ getProducts),\n/* harmony export */   getWilayaTariffs: () => (/* binding */ getWilayaTariffs),\n/* harmony export */   returnStockFromOrder: () => (/* binding */ returnStockFromOrder),\n/* harmony export */   supabase: () => (/* binding */ supabase),\n/* harmony export */   updateInventory: () => (/* binding */ updateInventory),\n/* harmony export */   updateOrder: () => (/* binding */ updateOrder),\n/* harmony export */   updateProduct: () => (/* binding */ updateProduct),\n/* harmony export */   updateWilayaTariffs: () => (/* binding */ updateWilayaTariffs)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n// Database service using Supabase (free tier)\n// This provides persistent storage with a real database\n\n// Supabase configuration - MUST use environment variables\nconst supabaseUrl = \"https://zrmxcjklkthpyanfslsw.supabase.co\" || 0;\nconst supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpybXhjamtsa3RocHlhbmZzbHN3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY5MDYxMzAsImV4cCI6MjA3MjQ4MjEzMH0.2Tjh9pPzc6BUGoV3lDUBymXzE_dvAGs1O_WewTdetE0\" || 0;\nif (!supabaseUrl || !supabaseKey) {\n    throw new Error(\"Missing Supabase environment variables. Please set NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY\");\n}\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseKey);\n// Export the supabase client for direct use\n\n// Helper function to convert database product to Product interface\nfunction convertDbProductToProduct(dbProduct) {\n    return {\n        id: dbProduct.id,\n        name: dbProduct.name,\n        description: dbProduct.description,\n        price: dbProduct.price,\n        originalPrice: dbProduct.original_price,\n        image: dbProduct.image,\n        images: dbProduct.images || [],\n        stock: dbProduct.stock || {},\n        category: dbProduct.category,\n        sizes: dbProduct.sizes || [],\n        colors: dbProduct.colors || [],\n        inStock: dbProduct.in_stock,\n        status: dbProduct.status || \"available\",\n        rating: dbProduct.rating || 0,\n        reviews: dbProduct.reviews || 0,\n        sku: dbProduct.sku,\n        weight: dbProduct.weight,\n        dimensions: dbProduct.dimensions,\n        tags: dbProduct.tags || [],\n        featured: dbProduct.featured || false,\n        createdAt: new Date(dbProduct.created_at),\n        updatedAt: new Date(dbProduct.updated_at)\n    };\n}\n// Cache for products to reduce database calls\nlet productsCache = null;\nlet productsCacheTime = 0;\nconst CACHE_DURATION = 30000; // 30 seconds\n// Products operations\nasync function getProducts() {\n    try {\n        // Return cached data if still fresh\n        if (productsCache && Date.now() - productsCacheTime < CACHE_DURATION) {\n            console.log(\"Supabase: Returning cached products\");\n            return productsCache;\n        }\n        const { data, error } = await supabase.from(\"products\").select(\"*\").order(\"created_at\", {\n            ascending: false\n        });\n        if (error) {\n            console.error(\"Supabase getProducts error:\", error);\n            return productsCache || [];\n        }\n        const products = (data || []).map(convertDbProductToProduct);\n        // Update cache\n        productsCache = products;\n        productsCacheTime = Date.now();\n        return products;\n    } catch (error) {\n        console.error(\"Supabase getProducts error:\", error);\n        return productsCache || [];\n    }\n}\nasync function getProduct(id) {\n    try {\n        const { data, error } = await supabase.from(\"products\").select(\"*\").eq(\"id\", id).single();\n        if (error) {\n            console.error(\"Supabase getProduct error:\", error);\n            return null;\n        }\n        return convertDbProductToProduct(data);\n    } catch (error) {\n        console.error(\"Supabase getProduct error:\", error);\n        return null;\n    }\n}\nasync function addProduct(product) {\n    try {\n        // Convert camelCase to snake_case for database\n        const dbProduct = {\n            id: product.id,\n            name: product.name,\n            description: product.description,\n            price: product.price,\n            original_price: product.originalPrice,\n            image: product.image,\n            images: product.images || [],\n            stock: product.stock,\n            category: product.category,\n            sizes: product.sizes || [],\n            colors: product.colors || [],\n            in_stock: product.inStock,\n            rating: product.rating,\n            reviews: product.reviews,\n            sku: product.sku,\n            weight: product.weight,\n            dimensions: product.dimensions,\n            tags: product.tags || [],\n            featured: product.featured || false\n        };\n        const { data, error } = await supabase.from(\"products\").insert([\n            dbProduct\n        ]).select().single();\n        if (error) {\n            console.error(\"Supabase addProduct error:\", error);\n            throw error;\n        }\n        console.log(\"Supabase: Added product:\", product.id);\n        // Invalidate cache\n        productsCache = null;\n        // Convert back to camelCase\n        return convertDbProductToProduct(data);\n    } catch (error) {\n        console.error(\"Supabase addProduct error:\", error);\n        throw error;\n    }\n}\nasync function updateProduct(id, product) {\n    try {\n        // Convert camelCase to snake_case for database\n        const dbProduct = {};\n        if (product.name !== undefined) dbProduct.name = product.name;\n        if (product.description !== undefined) dbProduct.description = product.description;\n        if (product.price !== undefined) dbProduct.price = product.price;\n        if (product.originalPrice !== undefined) dbProduct.original_price = product.originalPrice;\n        if (product.image !== undefined) dbProduct.image = product.image;\n        if (product.images !== undefined) dbProduct.images = product.images;\n        if (product.stock !== undefined) dbProduct.stock = product.stock;\n        if (product.category !== undefined) dbProduct.category = product.category;\n        if (product.sizes !== undefined) dbProduct.sizes = product.sizes;\n        if (product.colors !== undefined) dbProduct.colors = product.colors;\n        if (product.inStock !== undefined) dbProduct.in_stock = product.inStock;\n        if (product.rating !== undefined) dbProduct.rating = product.rating;\n        if (product.reviews !== undefined) dbProduct.reviews = product.reviews;\n        if (product.sku !== undefined) dbProduct.sku = product.sku;\n        if (product.weight !== undefined) dbProduct.weight = product.weight;\n        if (product.dimensions !== undefined) dbProduct.dimensions = product.dimensions;\n        if (product.tags !== undefined) dbProduct.tags = product.tags;\n        if (product.featured !== undefined) dbProduct.featured = product.featured;\n        const { data, error } = await supabase.from(\"products\").update(dbProduct).eq(\"id\", id).select().single();\n        if (error) {\n            console.error(\"Supabase updateProduct error:\", error);\n            return null;\n        }\n        console.log(\"Supabase: Updated product:\", id);\n        // Invalidate cache\n        productsCache = null;\n        return convertDbProductToProduct(data);\n    } catch (error) {\n        console.error(\"Supabase updateProduct error:\", error);\n        return null;\n    }\n}\nasync function deleteProduct(id) {\n    try {\n        const { error } = await supabase.from(\"products\").delete().eq(\"id\", id);\n        if (error) {\n            console.error(\"Supabase deleteProduct error:\", error);\n            return false;\n        }\n        console.log(\"Supabase: Deleted product:\", id);\n        // Invalidate cache\n        productsCache = null;\n        return true;\n    } catch (error) {\n        console.error(\"Supabase deleteProduct error:\", error);\n        return false;\n    }\n}\n// Helper function to convert database order to Order interface\nfunction convertDbOrderToOrder(dbOrder) {\n    // Handle both old and new schema\n    const isOldSchema = dbOrder.items && Array.isArray(dbOrder.items);\n    if (isOldSchema) {\n        // Old schema with items array\n        const firstItem = dbOrder.items && dbOrder.items.length > 0 ? dbOrder.items[0] : {};\n        return {\n            id: dbOrder.id,\n            productId: firstItem.productId || \"\",\n            productName: firstItem.productName || \"\",\n            productImage: firstItem.productImage || \"\",\n            customerName: firstItem.customerName || \"\",\n            customerPhone: firstItem.customerPhone || \"\",\n            customerEmail: firstItem.customerEmail || \"\",\n            customerAddress: firstItem.customerAddress || \"\",\n            wilayaId: firstItem.wilayaId || 0,\n            wilayaName: firstItem.wilayaName || \"\",\n            shippingType: dbOrder.shipping_type || \"homeDelivery\",\n            shippingCost: Number(dbOrder.shipping_cost) || 0,\n            quantity: firstItem.quantity || 1,\n            selectedSize: firstItem.selectedSize || \"\",\n            selectedColor: firstItem.selectedColor || \"\",\n            subtotal: Number(dbOrder.total) - Number(dbOrder.shipping_cost) || 0,\n            total: Number(dbOrder.total) || 0,\n            orderDate: new Date(dbOrder.order_date),\n            status: dbOrder.status || \"pending\",\n            trackingNumber: dbOrder.tracking_number || \"\",\n            notes: firstItem.notes || \"\",\n            paymentMethod: dbOrder.payment_method || \"cod\",\n            paymentStatus: dbOrder.payment_status || \"pending\",\n            estimatedDelivery: firstItem.estimatedDelivery || \"\",\n            createdAt: new Date(dbOrder.created_at),\n            updatedAt: new Date(dbOrder.updated_at)\n        };\n    } else {\n        // New schema with direct fields\n        return {\n            id: dbOrder.id,\n            productId: dbOrder.product_id || \"\",\n            productName: dbOrder.product_name || \"\",\n            productImage: dbOrder.product_image || \"\",\n            customerName: dbOrder.customer_name || \"\",\n            customerPhone: dbOrder.customer_phone || \"\",\n            customerEmail: dbOrder.customer_email || \"\",\n            customerAddress: dbOrder.customer_address || \"\",\n            wilayaId: dbOrder.wilaya_id || 0,\n            wilayaName: dbOrder.wilaya_name || \"\",\n            shippingType: dbOrder.shipping_type || \"homeDelivery\",\n            shippingCost: Number(dbOrder.shipping_cost) || 0,\n            quantity: dbOrder.quantity || 1,\n            selectedSize: dbOrder.selected_size || \"\",\n            selectedColor: dbOrder.selected_color || \"\",\n            subtotal: Number(dbOrder.subtotal) || 0,\n            total: Number(dbOrder.total) || 0,\n            orderDate: new Date(dbOrder.order_date),\n            status: dbOrder.status || \"pending\",\n            trackingNumber: dbOrder.tracking_number || \"\",\n            notes: dbOrder.notes || \"\",\n            paymentMethod: dbOrder.payment_method || \"cod\",\n            paymentStatus: dbOrder.payment_status || \"pending\",\n            estimatedDelivery: dbOrder.estimated_delivery || \"\",\n            createdAt: new Date(dbOrder.created_at),\n            updatedAt: new Date(dbOrder.updated_at)\n        };\n    }\n}\n// Cache for orders to reduce database calls\nlet ordersCache = null;\nlet ordersCacheTime = 0;\n// Orders operations\nasync function getOrders() {\n    try {\n        // Return cached data if still fresh\n        if (ordersCache && Date.now() - ordersCacheTime < CACHE_DURATION) {\n            console.log(\"Supabase: Returning cached orders\");\n            return ordersCache;\n        }\n        const { data, error } = await supabase.from(\"orders\").select(\"*\").order(\"order_date\", {\n            ascending: false\n        });\n        if (error) {\n            console.error(\"Supabase getOrders error:\", error);\n            return ordersCache || [];\n        }\n        const orders = (data || []).map(convertDbOrderToOrder);\n        // Update cache\n        ordersCache = orders;\n        ordersCacheTime = Date.now();\n        return orders;\n    } catch (error) {\n        console.error(\"Supabase getOrders error:\", error);\n        return ordersCache || [];\n    }\n}\nasync function getOrder(id) {\n    try {\n        const { data, error } = await supabase.from(\"orders\").select(\"*\").eq(\"id\", id).single();\n        if (error) {\n            console.error(\"Supabase getOrder error:\", error);\n            return null;\n        }\n        return convertDbOrderToOrder(data);\n    } catch (error) {\n        console.error(\"Supabase getOrder error:\", error);\n        return null;\n    }\n}\nasync function addOrder(order) {\n    try {\n        // Convert Order interface to database format (matching the orders table schema)\n        const dbOrder = {\n            id: order.id,\n            customer_name: order.customerName,\n            customer_email: order.customerEmail,\n            customer_phone: order.customerPhone,\n            customer_address: order.customerAddress,\n            wilaya_id: order.wilayaId,\n            wilaya_name: order.wilayaName,\n            product_id: order.productId,\n            product_name: order.productName,\n            product_image: order.productImage,\n            selected_size: order.selectedSize,\n            selected_color: order.selectedColor,\n            quantity: order.quantity,\n            subtotal: order.subtotal,\n            shipping_cost: order.shippingCost,\n            total: order.total,\n            shipping_type: order.shippingType,\n            payment_method: order.paymentMethod,\n            payment_status: order.paymentStatus,\n            status: order.status,\n            order_date: order.orderDate.toISOString(),\n            notes: order.notes,\n            tracking_number: order.trackingNumber,\n            estimated_delivery: order.estimatedDelivery,\n            created_at: order.createdAt.toISOString(),\n            updated_at: order.updatedAt.toISOString()\n        };\n        const { data, error } = await supabase.from(\"orders\").insert([\n            dbOrder\n        ]).select().single();\n        if (error) {\n            console.error(\"Supabase addOrder error:\", error);\n            throw error;\n        }\n        console.log(\"Supabase: Added order:\", order.id);\n        return convertDbOrderToOrder(data);\n    } catch (error) {\n        console.error(\"Supabase addOrder error:\", error);\n        throw error;\n    }\n}\nasync function updateOrder(id, order) {\n    try {\n        // Convert partial Order to database format\n        const updateData = {\n            updated_at: new Date().toISOString()\n        };\n        if (order.status !== undefined) updateData.status = order.status;\n        if (order.paymentStatus !== undefined) updateData.payment_status = order.paymentStatus;\n        if (order.trackingNumber !== undefined) updateData.tracking_number = order.trackingNumber;\n        if (order.shippingType !== undefined) updateData.shipping_type = order.shippingType;\n        if (order.shippingCost !== undefined) updateData.shipping_cost = order.shippingCost;\n        if (order.total !== undefined) updateData.total = order.total;\n        if (order.paymentMethod !== undefined) updateData.payment_method = order.paymentMethod;\n        const { data, error } = await supabase.from(\"orders\").update(updateData).eq(\"id\", id).select().single();\n        if (error) {\n            console.error(\"Supabase updateOrder error:\", error);\n            return null;\n        }\n        console.log(\"Supabase: Updated order:\", id);\n        return convertDbOrderToOrder(data);\n    } catch (error) {\n        console.error(\"Supabase updateOrder error:\", error);\n        return null;\n    }\n}\nasync function deleteOrder(id) {\n    try {\n        const { error } = await supabase.from(\"orders\").delete().eq(\"id\", id);\n        if (error) {\n            console.error(\"Supabase deleteOrder error:\", error);\n            return false;\n        }\n        console.log(\"Supabase: Deleted order:\", id);\n        return true;\n    } catch (error) {\n        console.error(\"Supabase deleteOrder error:\", error);\n        return false;\n    }\n}\n// Customers operations\nasync function getCustomers() {\n    try {\n        const { data, error } = await supabase.from(\"customers\").select(\"*\").order(\"created_at\", {\n            ascending: false\n        });\n        if (error) {\n            console.error(\"Supabase getCustomers error:\", error);\n            return [];\n        }\n        return data || [];\n    } catch (error) {\n        console.error(\"Supabase getCustomers error:\", error);\n        return [];\n    }\n}\nasync function addCustomer(customer) {\n    try {\n        const { data, error } = await supabase.from(\"customers\").insert([\n            customer\n        ]).select().single();\n        if (error) {\n            console.error(\"Supabase addCustomer error:\", error);\n            throw error;\n        }\n        return data;\n    } catch (error) {\n        console.error(\"Supabase addCustomer error:\", error);\n        throw error;\n    }\n}\n// Wilaya operations\nasync function getWilayaTariffs() {\n    try {\n        const { data, error } = await supabase.from(\"wilaya_tariffs\").select(\"*\").order(\"order\", {\n            ascending: true\n        });\n        if (error) {\n            console.error(\"Supabase getWilayaTariffs error:\", error);\n            return [];\n        }\n        return data || [];\n    } catch (error) {\n        console.error(\"Supabase getWilayaTariffs error:\", error);\n        return [];\n    }\n}\nasync function updateWilayaTariffs(tariffs) {\n    try {\n        // Delete all existing tariffs\n        await supabase.from(\"wilaya_tariffs\").delete().neq(\"id\", 0); // Delete all records\n        // Insert new tariffs\n        if (tariffs.length > 0) {\n            const { error } = await supabase.from(\"wilaya_tariffs\").insert(tariffs);\n            if (error) {\n                console.error(\"Supabase updateWilayaTariffs error:\", error);\n                throw error;\n            }\n        }\n        console.log(\"Supabase: Updated wilaya tariffs\");\n    } catch (error) {\n        console.error(\"Supabase updateWilayaTariffs error:\", error);\n        throw error;\n    }\n}\n// Inventory operations\nasync function getInventory() {\n    try {\n        const { data, error } = await supabase.from(\"products\").select(\"id, name, sku, stock, sizes, colors, in_stock, category\").order(\"name\");\n        if (error) {\n            console.error(\"Supabase getInventory error:\", error);\n            return [];\n        }\n        // Transform data for inventory management\n        return (data || []).map((product)=>({\n                id: product.id,\n                name: product.name,\n                sku: product.sku,\n                category: product.category,\n                inStock: product.in_stock,\n                stock: product.stock || {},\n                sizes: product.sizes || [],\n                colors: product.colors || [],\n                totalStock: calculateTotalStock(product.stock || {}),\n                stockBySize: calculateStockBySize(product.stock || {}, product.sizes || [], product.colors || [])\n            }));\n    } catch (error) {\n        console.error(\"Supabase getInventory error:\", error);\n        return [];\n    }\n}\nasync function updateInventory(productId, stockData) {\n    try {\n        const updateObj = {\n            updated_at: new Date().toISOString()\n        };\n        if (stockData.stock) {\n            updateObj.stock = stockData.stock;\n        }\n        if (stockData.inStock !== undefined) {\n            updateObj.in_stock = stockData.inStock;\n        }\n        const { data, error } = await supabase.from(\"products\").update(updateObj).eq(\"id\", productId).select().single();\n        if (error) {\n            console.error(\"Supabase updateInventory error:\", error);\n            throw error;\n        }\n        console.log(\"Supabase: Updated inventory for product:\", productId);\n        return {\n            id: data.id,\n            name: data.name,\n            stock: data.stock,\n            inStock: data.in_stock,\n            totalStock: calculateTotalStock(data.stock)\n        };\n    } catch (error) {\n        console.error(\"Supabase updateInventory error:\", error);\n        throw error;\n    }\n}\n// Helper functions for inventory calculations\nfunction calculateTotalStock(stock) {\n    if (!stock || typeof stock !== \"object\") return 0;\n    let total = 0;\n    for(const size in stock){\n        if (typeof stock[size] === \"object\") {\n            for(const color in stock[size]){\n                total += Number(stock[size][color]) || 0;\n            }\n        }\n    }\n    return total;\n}\nfunction calculateStockBySize(stock, sizes, colors) {\n    const result = {};\n    sizes.forEach((size)=>{\n        result[size] = {};\n        colors.forEach((color)=>{\n            result[size][color] = Number(stock[size]?.[color]) || 0;\n        });\n    });\n    return result;\n}\n// Stock deduction function for orders\nasync function deductStockFromOrder(order) {\n    try {\n        console.log(\"Supabase: Deducting stock for order:\", order.id);\n        // Get the product\n        const product = await getProduct(order.productId);\n        if (!product) {\n            console.error(\"Supabase: Product not found for order:\", order.productId);\n            return false;\n        }\n        // Check if we have enough stock\n        const currentStock = product.stock?.[order.selectedSize]?.[order.selectedColor] || 0;\n        if (currentStock < order.quantity) {\n            console.error(\"Supabase: Insufficient stock for order:\", {\n                productId: order.productId,\n                size: order.selectedSize,\n                color: order.selectedColor,\n                requested: order.quantity,\n                available: currentStock\n            });\n            return false;\n        }\n        // Deduct the stock\n        const newStock = {\n            ...product.stock,\n            [order.selectedSize]: {\n                ...product.stock?.[order.selectedSize],\n                [order.selectedColor]: currentStock - order.quantity\n            }\n        };\n        // Update the product stock\n        const updatedProduct = await updateProduct(order.productId, {\n            stock: newStock,\n            inStock: calculateTotalStock(newStock) > 0\n        });\n        if (updatedProduct) {\n            console.log(\"Supabase: Successfully deducted stock for order:\", order.id);\n            return true;\n        } else {\n            console.error(\"Supabase: Failed to update product stock for order:\", order.id);\n            return false;\n        }\n    } catch (error) {\n        console.error(\"Supabase: Error deducting stock for order:\", error);\n        return false;\n    }\n}\n// Stock return function for cancelled/deleted orders\nasync function returnStockFromOrder(order) {\n    try {\n        console.log(\"Supabase: Returning stock for order:\", order.id);\n        // Get the product\n        const product = await getProduct(order.productId);\n        if (!product) {\n            console.error(\"Supabase: Product not found for order:\", order.productId);\n            return false;\n        }\n        // Get current stock\n        const currentStock = product.stock?.[order.selectedSize]?.[order.selectedColor] || 0;\n        // Return the stock\n        const newStock = {\n            ...product.stock,\n            [order.selectedSize]: {\n                ...product.stock?.[order.selectedSize],\n                [order.selectedColor]: currentStock + order.quantity\n            }\n        };\n        // Update the product stock\n        const updatedProduct = await updateProduct(order.productId, {\n            stock: newStock,\n            inStock: calculateTotalStock(newStock) > 0\n        });\n        if (updatedProduct) {\n            console.log(\"Supabase: Successfully returned stock for order:\", order.id, {\n                productId: order.productId,\n                size: order.selectedSize,\n                color: order.selectedColor,\n                quantity: order.quantity,\n                newTotalStock: calculateTotalStock(newStock)\n            });\n            return true;\n        } else {\n            console.error(\"Supabase: Failed to return product stock for order:\", order.id);\n            return false;\n        }\n    } catch (error) {\n        console.error(\"Supabase: Error returning stock for order:\", error);\n        return false;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3N1cGFiYXNlRGF0YWJhc2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw4Q0FBOEM7QUFDOUMsd0RBQXdEO0FBRUg7QUFHckQsMERBQTBEO0FBQzFELE1BQU1DLGNBQWNDLDBDQUFvQyxJQUFJO0FBQzVELE1BQU1HLGNBQWNILGtOQUF5QyxJQUFJO0FBRWpFLElBQUksQ0FBQ0QsZUFBZSxDQUFDSSxhQUFhO0lBQ2hDLE1BQU0sSUFBSUUsTUFBTTtBQUNsQjtBQUVBLE1BQU1DLFdBQVdSLG1FQUFZQSxDQUFDQyxhQUFhSTtBQUUzQyw0Q0FBNEM7QUFDeEI7QUFFcEIsbUVBQW1FO0FBQ25FLFNBQVNJLDBCQUEwQkMsU0FBYztJQUMvQyxPQUFPO1FBQ0xDLElBQUlELFVBQVVDLEVBQUU7UUFDaEJDLE1BQU1GLFVBQVVFLElBQUk7UUFDcEJDLGFBQWFILFVBQVVHLFdBQVc7UUFDbENDLE9BQU9KLFVBQVVJLEtBQUs7UUFDdEJDLGVBQWVMLFVBQVVNLGNBQWM7UUFDdkNDLE9BQU9QLFVBQVVPLEtBQUs7UUFDdEJDLFFBQVFSLFVBQVVRLE1BQU0sSUFBSSxFQUFFO1FBQzlCQyxPQUFPVCxVQUFVUyxLQUFLLElBQUksQ0FBQztRQUMzQkMsVUFBVVYsVUFBVVUsUUFBUTtRQUM1QkMsT0FBT1gsVUFBVVcsS0FBSyxJQUFJLEVBQUU7UUFDNUJDLFFBQVFaLFVBQVVZLE1BQU0sSUFBSSxFQUFFO1FBQzlCQyxTQUFTYixVQUFVYyxRQUFRO1FBQzNCQyxRQUFRZixVQUFVZSxNQUFNLElBQUk7UUFDNUJDLFFBQVFoQixVQUFVZ0IsTUFBTSxJQUFJO1FBQzVCQyxTQUFTakIsVUFBVWlCLE9BQU8sSUFBSTtRQUM5QkMsS0FBS2xCLFVBQVVrQixHQUFHO1FBQ2xCQyxRQUFRbkIsVUFBVW1CLE1BQU07UUFDeEJDLFlBQVlwQixVQUFVb0IsVUFBVTtRQUNoQ0MsTUFBTXJCLFVBQVVxQixJQUFJLElBQUksRUFBRTtRQUMxQkMsVUFBVXRCLFVBQVVzQixRQUFRLElBQUk7UUFDaENDLFdBQVcsSUFBSUMsS0FBS3hCLFVBQVV5QixVQUFVO1FBQ3hDQyxXQUFXLElBQUlGLEtBQUt4QixVQUFVMkIsVUFBVTtJQUMxQztBQUNGO0FBRUEsOENBQThDO0FBQzlDLElBQUlDLGdCQUFrQztBQUN0QyxJQUFJQyxvQkFBb0I7QUFDeEIsTUFBTUMsaUJBQWlCLE9BQU8sYUFBYTtBQUUzQyxzQkFBc0I7QUFDZixlQUFlQztJQUNwQixJQUFJO1FBQ0Ysb0NBQW9DO1FBQ3BDLElBQUlILGlCQUFpQkosS0FBS1EsR0FBRyxLQUFLSCxvQkFBb0JDLGdCQUFnQjtZQUNwRUcsUUFBUUMsR0FBRyxDQUFDO1lBQ1osT0FBT047UUFDVDtRQUVBLE1BQU0sRUFBRU8sSUFBSSxFQUFFQyxLQUFLLEVBQUUsR0FBRyxNQUFNdEMsU0FDM0J1QyxJQUFJLENBQUMsWUFDTEMsTUFBTSxDQUFDLEtBQ1BDLEtBQUssQ0FBQyxjQUFjO1lBQUVDLFdBQVc7UUFBTTtRQUUxQyxJQUFJSixPQUFPO1lBQ1RILFFBQVFHLEtBQUssQ0FBQywrQkFBK0JBO1lBQzdDLE9BQU9SLGlCQUFpQixFQUFFO1FBQzVCO1FBRUEsTUFBTWEsV0FBVyxDQUFDTixRQUFRLEVBQUUsRUFBRU8sR0FBRyxDQUFDM0M7UUFFbEMsZUFBZTtRQUNmNkIsZ0JBQWdCYTtRQUNoQlosb0JBQW9CTCxLQUFLUSxHQUFHO1FBRTVCLE9BQU9TO0lBQ1QsRUFBRSxPQUFPTCxPQUFPO1FBQ2RILFFBQVFHLEtBQUssQ0FBQywrQkFBK0JBO1FBQzdDLE9BQU9SLGlCQUFpQixFQUFFO0lBQzVCO0FBQ0Y7QUFFTyxlQUFlZSxXQUFXMUMsRUFBVTtJQUN6QyxJQUFJO1FBQ0YsTUFBTSxFQUFFa0MsSUFBSSxFQUFFQyxLQUFLLEVBQUUsR0FBRyxNQUFNdEMsU0FDM0J1QyxJQUFJLENBQUMsWUFDTEMsTUFBTSxDQUFDLEtBQ1BNLEVBQUUsQ0FBQyxNQUFNM0MsSUFDVDRDLE1BQU07UUFFVCxJQUFJVCxPQUFPO1lBQ1RILFFBQVFHLEtBQUssQ0FBQyw4QkFBOEJBO1lBQzVDLE9BQU87UUFDVDtRQUVBLE9BQU9yQywwQkFBMEJvQztJQUNuQyxFQUFFLE9BQU9DLE9BQU87UUFDZEgsUUFBUUcsS0FBSyxDQUFDLDhCQUE4QkE7UUFDNUMsT0FBTztJQUNUO0FBQ0Y7QUFFTyxlQUFlVSxXQUFXQyxPQUFnQjtJQUMvQyxJQUFJO1FBQ0YsK0NBQStDO1FBQy9DLE1BQU0vQyxZQUFZO1lBQ2hCQyxJQUFJOEMsUUFBUTlDLEVBQUU7WUFDZEMsTUFBTTZDLFFBQVE3QyxJQUFJO1lBQ2xCQyxhQUFhNEMsUUFBUTVDLFdBQVc7WUFDaENDLE9BQU8yQyxRQUFRM0MsS0FBSztZQUNwQkUsZ0JBQWdCeUMsUUFBUTFDLGFBQWE7WUFDckNFLE9BQU93QyxRQUFReEMsS0FBSztZQUNwQkMsUUFBUXVDLFFBQVF2QyxNQUFNLElBQUksRUFBRTtZQUM1QkMsT0FBT3NDLFFBQVF0QyxLQUFLO1lBQ3BCQyxVQUFVcUMsUUFBUXJDLFFBQVE7WUFDMUJDLE9BQU9vQyxRQUFRcEMsS0FBSyxJQUFJLEVBQUU7WUFDMUJDLFFBQVFtQyxRQUFRbkMsTUFBTSxJQUFJLEVBQUU7WUFDNUJFLFVBQVVpQyxRQUFRbEMsT0FBTztZQUN6QkcsUUFBUStCLFFBQVEvQixNQUFNO1lBQ3RCQyxTQUFTOEIsUUFBUTlCLE9BQU87WUFDeEJDLEtBQUs2QixRQUFRN0IsR0FBRztZQUNoQkMsUUFBUTRCLFFBQVE1QixNQUFNO1lBQ3RCQyxZQUFZMkIsUUFBUTNCLFVBQVU7WUFDOUJDLE1BQU0wQixRQUFRMUIsSUFBSSxJQUFJLEVBQUU7WUFDeEJDLFVBQVV5QixRQUFRekIsUUFBUSxJQUFJO1FBRWhDO1FBRUEsTUFBTSxFQUFFYSxJQUFJLEVBQUVDLEtBQUssRUFBRSxHQUFHLE1BQU10QyxTQUMzQnVDLElBQUksQ0FBQyxZQUNMVyxNQUFNLENBQUM7WUFBQ2hEO1NBQVUsRUFDbEJzQyxNQUFNLEdBQ05PLE1BQU07UUFFVCxJQUFJVCxPQUFPO1lBQ1RILFFBQVFHLEtBQUssQ0FBQyw4QkFBOEJBO1lBQzVDLE1BQU1BO1FBQ1I7UUFFQUgsUUFBUUMsR0FBRyxDQUFDLDRCQUE0QmEsUUFBUTlDLEVBQUU7UUFFbEQsbUJBQW1CO1FBQ25CMkIsZ0JBQWdCO1FBRWhCLDRCQUE0QjtRQUM1QixPQUFPN0IsMEJBQTBCb0M7SUFDbkMsRUFBRSxPQUFPQyxPQUFPO1FBQ2RILFFBQVFHLEtBQUssQ0FBQyw4QkFBOEJBO1FBQzVDLE1BQU1BO0lBQ1I7QUFDRjtBQUVPLGVBQWVhLGNBQWNoRCxFQUFVLEVBQUU4QyxPQUF5QjtJQUN2RSxJQUFJO1FBQ0YsK0NBQStDO1FBQy9DLE1BQU0vQyxZQUFpQixDQUFDO1FBRXhCLElBQUkrQyxRQUFRN0MsSUFBSSxLQUFLZ0QsV0FBV2xELFVBQVVFLElBQUksR0FBRzZDLFFBQVE3QyxJQUFJO1FBQzdELElBQUk2QyxRQUFRNUMsV0FBVyxLQUFLK0MsV0FBV2xELFVBQVVHLFdBQVcsR0FBRzRDLFFBQVE1QyxXQUFXO1FBQ2xGLElBQUk0QyxRQUFRM0MsS0FBSyxLQUFLOEMsV0FBV2xELFVBQVVJLEtBQUssR0FBRzJDLFFBQVEzQyxLQUFLO1FBQ2hFLElBQUkyQyxRQUFRMUMsYUFBYSxLQUFLNkMsV0FBV2xELFVBQVVNLGNBQWMsR0FBR3lDLFFBQVExQyxhQUFhO1FBQ3pGLElBQUkwQyxRQUFReEMsS0FBSyxLQUFLMkMsV0FBV2xELFVBQVVPLEtBQUssR0FBR3dDLFFBQVF4QyxLQUFLO1FBQ2hFLElBQUl3QyxRQUFRdkMsTUFBTSxLQUFLMEMsV0FBV2xELFVBQVVRLE1BQU0sR0FBR3VDLFFBQVF2QyxNQUFNO1FBQ25FLElBQUl1QyxRQUFRdEMsS0FBSyxLQUFLeUMsV0FBV2xELFVBQVVTLEtBQUssR0FBR3NDLFFBQVF0QyxLQUFLO1FBQ2hFLElBQUlzQyxRQUFRckMsUUFBUSxLQUFLd0MsV0FBV2xELFVBQVVVLFFBQVEsR0FBR3FDLFFBQVFyQyxRQUFRO1FBQ3pFLElBQUlxQyxRQUFRcEMsS0FBSyxLQUFLdUMsV0FBV2xELFVBQVVXLEtBQUssR0FBR29DLFFBQVFwQyxLQUFLO1FBQ2hFLElBQUlvQyxRQUFRbkMsTUFBTSxLQUFLc0MsV0FBV2xELFVBQVVZLE1BQU0sR0FBR21DLFFBQVFuQyxNQUFNO1FBQ25FLElBQUltQyxRQUFRbEMsT0FBTyxLQUFLcUMsV0FBV2xELFVBQVVjLFFBQVEsR0FBR2lDLFFBQVFsQyxPQUFPO1FBQ3ZFLElBQUlrQyxRQUFRL0IsTUFBTSxLQUFLa0MsV0FBV2xELFVBQVVnQixNQUFNLEdBQUcrQixRQUFRL0IsTUFBTTtRQUNuRSxJQUFJK0IsUUFBUTlCLE9BQU8sS0FBS2lDLFdBQVdsRCxVQUFVaUIsT0FBTyxHQUFHOEIsUUFBUTlCLE9BQU87UUFDdEUsSUFBSThCLFFBQVE3QixHQUFHLEtBQUtnQyxXQUFXbEQsVUFBVWtCLEdBQUcsR0FBRzZCLFFBQVE3QixHQUFHO1FBQzFELElBQUk2QixRQUFRNUIsTUFBTSxLQUFLK0IsV0FBV2xELFVBQVVtQixNQUFNLEdBQUc0QixRQUFRNUIsTUFBTTtRQUNuRSxJQUFJNEIsUUFBUTNCLFVBQVUsS0FBSzhCLFdBQVdsRCxVQUFVb0IsVUFBVSxHQUFHMkIsUUFBUTNCLFVBQVU7UUFDL0UsSUFBSTJCLFFBQVExQixJQUFJLEtBQUs2QixXQUFXbEQsVUFBVXFCLElBQUksR0FBRzBCLFFBQVExQixJQUFJO1FBQzdELElBQUkwQixRQUFRekIsUUFBUSxLQUFLNEIsV0FBV2xELFVBQVVzQixRQUFRLEdBQUd5QixRQUFRekIsUUFBUTtRQUV6RSxNQUFNLEVBQUVhLElBQUksRUFBRUMsS0FBSyxFQUFFLEdBQUcsTUFBTXRDLFNBQzNCdUMsSUFBSSxDQUFDLFlBQ0xjLE1BQU0sQ0FBQ25ELFdBQ1A0QyxFQUFFLENBQUMsTUFBTTNDLElBQ1RxQyxNQUFNLEdBQ05PLE1BQU07UUFFVCxJQUFJVCxPQUFPO1lBQ1RILFFBQVFHLEtBQUssQ0FBQyxpQ0FBaUNBO1lBQy9DLE9BQU87UUFDVDtRQUVBSCxRQUFRQyxHQUFHLENBQUMsOEJBQThCakM7UUFFMUMsbUJBQW1CO1FBQ25CMkIsZ0JBQWdCO1FBRWhCLE9BQU83QiwwQkFBMEJvQztJQUNuQyxFQUFFLE9BQU9DLE9BQU87UUFDZEgsUUFBUUcsS0FBSyxDQUFDLGlDQUFpQ0E7UUFDL0MsT0FBTztJQUNUO0FBQ0Y7QUFFTyxlQUFlZ0IsY0FBY25ELEVBQVU7SUFDNUMsSUFBSTtRQUNGLE1BQU0sRUFBRW1DLEtBQUssRUFBRSxHQUFHLE1BQU10QyxTQUNyQnVDLElBQUksQ0FBQyxZQUNMZ0IsTUFBTSxHQUNOVCxFQUFFLENBQUMsTUFBTTNDO1FBRVosSUFBSW1DLE9BQU87WUFDVEgsUUFBUUcsS0FBSyxDQUFDLGlDQUFpQ0E7WUFDL0MsT0FBTztRQUNUO1FBRUFILFFBQVFDLEdBQUcsQ0FBQyw4QkFBOEJqQztRQUUxQyxtQkFBbUI7UUFDbkIyQixnQkFBZ0I7UUFFaEIsT0FBTztJQUNULEVBQUUsT0FBT1EsT0FBTztRQUNkSCxRQUFRRyxLQUFLLENBQUMsaUNBQWlDQTtRQUMvQyxPQUFPO0lBQ1Q7QUFDRjtBQUVBLCtEQUErRDtBQUMvRCxTQUFTa0Isc0JBQXNCQyxPQUFZO0lBQ3pDLGlDQUFpQztJQUNqQyxNQUFNQyxjQUFjRCxRQUFRRSxLQUFLLElBQUlDLE1BQU1DLE9BQU8sQ0FBQ0osUUFBUUUsS0FBSztJQUVoRSxJQUFJRCxhQUFhO1FBQ2YsOEJBQThCO1FBQzlCLE1BQU1JLFlBQVlMLFFBQVFFLEtBQUssSUFBSUYsUUFBUUUsS0FBSyxDQUFDSSxNQUFNLEdBQUcsSUFBSU4sUUFBUUUsS0FBSyxDQUFDLEVBQUUsR0FBRyxDQUFDO1FBRWxGLE9BQU87WUFDTHhELElBQUlzRCxRQUFRdEQsRUFBRTtZQUNkNkQsV0FBV0YsVUFBVUUsU0FBUyxJQUFJO1lBQ2xDQyxhQUFhSCxVQUFVRyxXQUFXLElBQUk7WUFDdENDLGNBQWNKLFVBQVVJLFlBQVksSUFBSTtZQUN4Q0MsY0FBY0wsVUFBVUssWUFBWSxJQUFJO1lBQ3hDQyxlQUFlTixVQUFVTSxhQUFhLElBQUk7WUFDMUNDLGVBQWVQLFVBQVVPLGFBQWEsSUFBSTtZQUMxQ0MsaUJBQWlCUixVQUFVUSxlQUFlLElBQUk7WUFDOUNDLFVBQVVULFVBQVVTLFFBQVEsSUFBSTtZQUNoQ0MsWUFBWVYsVUFBVVUsVUFBVSxJQUFJO1lBQ3BDQyxjQUFjaEIsUUFBUWlCLGFBQWEsSUFBSTtZQUN2Q0MsY0FBY0MsT0FBT25CLFFBQVFvQixhQUFhLEtBQUs7WUFDL0NDLFVBQVVoQixVQUFVZ0IsUUFBUSxJQUFJO1lBQ2hDQyxjQUFjakIsVUFBVWlCLFlBQVksSUFBSTtZQUN4Q0MsZUFBZWxCLFVBQVVrQixhQUFhLElBQUk7WUFDMUNDLFVBQVVMLE9BQU9uQixRQUFReUIsS0FBSyxJQUFJTixPQUFPbkIsUUFBUW9CLGFBQWEsS0FBSztZQUNuRUssT0FBT04sT0FBT25CLFFBQVF5QixLQUFLLEtBQUs7WUFDaENDLFdBQVcsSUFBSXpELEtBQUsrQixRQUFRMkIsVUFBVTtZQUN0Q25FLFFBQVF3QyxRQUFReEMsTUFBTSxJQUFJO1lBQzFCb0UsZ0JBQWdCNUIsUUFBUTZCLGVBQWUsSUFBSTtZQUMzQ0MsT0FBT3pCLFVBQVV5QixLQUFLLElBQUk7WUFDMUJDLGVBQWUvQixRQUFRZ0MsY0FBYyxJQUFJO1lBQ3pDQyxlQUFlakMsUUFBUWtDLGNBQWMsSUFBSTtZQUN6Q0MsbUJBQW1COUIsVUFBVThCLGlCQUFpQixJQUFJO1lBQ2xEbkUsV0FBVyxJQUFJQyxLQUFLK0IsUUFBUTlCLFVBQVU7WUFDdENDLFdBQVcsSUFBSUYsS0FBSytCLFFBQVE1QixVQUFVO1FBQ3hDO0lBQ0YsT0FBTztRQUNMLGdDQUFnQztRQUNoQyxPQUFPO1lBQ0wxQixJQUFJc0QsUUFBUXRELEVBQUU7WUFDZDZELFdBQVdQLFFBQVFvQyxVQUFVLElBQUk7WUFDakM1QixhQUFhUixRQUFRcUMsWUFBWSxJQUFJO1lBQ3JDNUIsY0FBY1QsUUFBUXNDLGFBQWEsSUFBSTtZQUN2QzVCLGNBQWNWLFFBQVF1QyxhQUFhLElBQUk7WUFDdkM1QixlQUFlWCxRQUFRd0MsY0FBYyxJQUFJO1lBQ3pDNUIsZUFBZVosUUFBUXlDLGNBQWMsSUFBSTtZQUN6QzVCLGlCQUFpQmIsUUFBUTBDLGdCQUFnQixJQUFJO1lBQzdDNUIsVUFBVWQsUUFBUTJDLFNBQVMsSUFBSTtZQUMvQjVCLFlBQVlmLFFBQVE0QyxXQUFXLElBQUk7WUFDbkM1QixjQUFjaEIsUUFBUWlCLGFBQWEsSUFBSTtZQUN2Q0MsY0FBY0MsT0FBT25CLFFBQVFvQixhQUFhLEtBQUs7WUFDL0NDLFVBQVVyQixRQUFRcUIsUUFBUSxJQUFJO1lBQzlCQyxjQUFjdEIsUUFBUTZDLGFBQWEsSUFBSTtZQUN2Q3RCLGVBQWV2QixRQUFROEMsY0FBYyxJQUFJO1lBQ3pDdEIsVUFBVUwsT0FBT25CLFFBQVF3QixRQUFRLEtBQUs7WUFDdENDLE9BQU9OLE9BQU9uQixRQUFReUIsS0FBSyxLQUFLO1lBQ2hDQyxXQUFXLElBQUl6RCxLQUFLK0IsUUFBUTJCLFVBQVU7WUFDdENuRSxRQUFRd0MsUUFBUXhDLE1BQU0sSUFBSTtZQUMxQm9FLGdCQUFnQjVCLFFBQVE2QixlQUFlLElBQUk7WUFDM0NDLE9BQU85QixRQUFROEIsS0FBSyxJQUFJO1lBQ3hCQyxlQUFlL0IsUUFBUWdDLGNBQWMsSUFBSTtZQUN6Q0MsZUFBZWpDLFFBQVFrQyxjQUFjLElBQUk7WUFDekNDLG1CQUFtQm5DLFFBQVErQyxrQkFBa0IsSUFBSTtZQUNqRC9FLFdBQVcsSUFBSUMsS0FBSytCLFFBQVE5QixVQUFVO1lBQ3RDQyxXQUFXLElBQUlGLEtBQUsrQixRQUFRNUIsVUFBVTtRQUN4QztJQUNGO0FBQ0Y7QUFFQSw0Q0FBNEM7QUFDNUMsSUFBSTRFLGNBQThCO0FBQ2xDLElBQUlDLGtCQUFrQjtBQUV0QixvQkFBb0I7QUFDYixlQUFlQztJQUNwQixJQUFJO1FBQ0Ysb0NBQW9DO1FBQ3BDLElBQUlGLGVBQWUvRSxLQUFLUSxHQUFHLEtBQUt3RSxrQkFBa0IxRSxnQkFBZ0I7WUFDaEVHLFFBQVFDLEdBQUcsQ0FBQztZQUNaLE9BQU9xRTtRQUNUO1FBRUEsTUFBTSxFQUFFcEUsSUFBSSxFQUFFQyxLQUFLLEVBQUUsR0FBRyxNQUFNdEMsU0FDM0J1QyxJQUFJLENBQUMsVUFDTEMsTUFBTSxDQUFDLEtBQ1BDLEtBQUssQ0FBQyxjQUFjO1lBQUVDLFdBQVc7UUFBTTtRQUUxQyxJQUFJSixPQUFPO1lBQ1RILFFBQVFHLEtBQUssQ0FBQyw2QkFBNkJBO1lBQzNDLE9BQU9tRSxlQUFlLEVBQUU7UUFDMUI7UUFFQSxNQUFNRyxTQUFTLENBQUN2RSxRQUFRLEVBQUUsRUFBRU8sR0FBRyxDQUFDWTtRQUVoQyxlQUFlO1FBQ2ZpRCxjQUFjRztRQUNkRixrQkFBa0JoRixLQUFLUSxHQUFHO1FBRTFCLE9BQU8wRTtJQUNULEVBQUUsT0FBT3RFLE9BQU87UUFDZEgsUUFBUUcsS0FBSyxDQUFDLDZCQUE2QkE7UUFDM0MsT0FBT21FLGVBQWUsRUFBRTtJQUMxQjtBQUNGO0FBRU8sZUFBZUksU0FBUzFHLEVBQVU7SUFDdkMsSUFBSTtRQUNGLE1BQU0sRUFBRWtDLElBQUksRUFBRUMsS0FBSyxFQUFFLEdBQUcsTUFBTXRDLFNBQzNCdUMsSUFBSSxDQUFDLFVBQ0xDLE1BQU0sQ0FBQyxLQUNQTSxFQUFFLENBQUMsTUFBTTNDLElBQ1Q0QyxNQUFNO1FBRVQsSUFBSVQsT0FBTztZQUNUSCxRQUFRRyxLQUFLLENBQUMsNEJBQTRCQTtZQUMxQyxPQUFPO1FBQ1Q7UUFFQSxPQUFPa0Isc0JBQXNCbkI7SUFDL0IsRUFBRSxPQUFPQyxPQUFPO1FBQ2RILFFBQVFHLEtBQUssQ0FBQyw0QkFBNEJBO1FBQzFDLE9BQU87SUFDVDtBQUNGO0FBRU8sZUFBZXdFLFNBQVNyRSxLQUFZO0lBQ3pDLElBQUk7UUFDRixnRkFBZ0Y7UUFDaEYsTUFBTWdCLFVBQVU7WUFDZHRELElBQUlzQyxNQUFNdEMsRUFBRTtZQUNaNkYsZUFBZXZELE1BQU0wQixZQUFZO1lBQ2pDK0IsZ0JBQWdCekQsTUFBTTRCLGFBQWE7WUFDbkM0QixnQkFBZ0J4RCxNQUFNMkIsYUFBYTtZQUNuQytCLGtCQUFrQjFELE1BQU02QixlQUFlO1lBQ3ZDOEIsV0FBVzNELE1BQU04QixRQUFRO1lBQ3pCOEIsYUFBYTVELE1BQU0rQixVQUFVO1lBQzdCcUIsWUFBWXBELE1BQU11QixTQUFTO1lBQzNCOEIsY0FBY3JELE1BQU13QixXQUFXO1lBQy9COEIsZUFBZXRELE1BQU15QixZQUFZO1lBQ2pDb0MsZUFBZTdELE1BQU1zQyxZQUFZO1lBQ2pDd0IsZ0JBQWdCOUQsTUFBTXVDLGFBQWE7WUFDbkNGLFVBQVVyQyxNQUFNcUMsUUFBUTtZQUN4QkcsVUFBVXhDLE1BQU13QyxRQUFRO1lBQ3hCSixlQUFlcEMsTUFBTWtDLFlBQVk7WUFDakNPLE9BQU96QyxNQUFNeUMsS0FBSztZQUNsQlIsZUFBZWpDLE1BQU1nQyxZQUFZO1lBQ2pDZ0IsZ0JBQWdCaEQsTUFBTStDLGFBQWE7WUFDbkNHLGdCQUFnQmxELE1BQU1pRCxhQUFhO1lBQ25DekUsUUFBUXdCLE1BQU14QixNQUFNO1lBQ3BCbUUsWUFBWTNDLE1BQU0wQyxTQUFTLENBQUM0QixXQUFXO1lBQ3ZDeEIsT0FBTzlDLE1BQU04QyxLQUFLO1lBQ2xCRCxpQkFBaUI3QyxNQUFNNEMsY0FBYztZQUNyQ21CLG9CQUFvQi9ELE1BQU1tRCxpQkFBaUI7WUFDM0NqRSxZQUFZYyxNQUFNaEIsU0FBUyxDQUFDc0YsV0FBVztZQUN2Q2xGLFlBQVlZLE1BQU1iLFNBQVMsQ0FBQ21GLFdBQVc7UUFDekM7UUFFQSxNQUFNLEVBQUUxRSxJQUFJLEVBQUVDLEtBQUssRUFBRSxHQUFHLE1BQU10QyxTQUMzQnVDLElBQUksQ0FBQyxVQUNMVyxNQUFNLENBQUM7WUFBQ087U0FBUSxFQUNoQmpCLE1BQU0sR0FDTk8sTUFBTTtRQUVULElBQUlULE9BQU87WUFDVEgsUUFBUUcsS0FBSyxDQUFDLDRCQUE0QkE7WUFDMUMsTUFBTUE7UUFDUjtRQUVBSCxRQUFRQyxHQUFHLENBQUMsMEJBQTBCSyxNQUFNdEMsRUFBRTtRQUM5QyxPQUFPcUQsc0JBQXNCbkI7SUFDL0IsRUFBRSxPQUFPQyxPQUFPO1FBQ2RILFFBQVFHLEtBQUssQ0FBQyw0QkFBNEJBO1FBQzFDLE1BQU1BO0lBQ1I7QUFDRjtBQUVPLGVBQWUwRSxZQUFZN0csRUFBVSxFQUFFc0MsS0FBcUI7SUFDakUsSUFBSTtRQUNGLDJDQUEyQztRQUMzQyxNQUFNd0UsYUFBa0I7WUFDdEJwRixZQUFZLElBQUlILE9BQU9xRixXQUFXO1FBQ3BDO1FBRUEsSUFBSXRFLE1BQU14QixNQUFNLEtBQUttQyxXQUFXNkQsV0FBV2hHLE1BQU0sR0FBR3dCLE1BQU14QixNQUFNO1FBQ2hFLElBQUl3QixNQUFNaUQsYUFBYSxLQUFLdEMsV0FBVzZELFdBQVd0QixjQUFjLEdBQUdsRCxNQUFNaUQsYUFBYTtRQUN0RixJQUFJakQsTUFBTTRDLGNBQWMsS0FBS2pDLFdBQVc2RCxXQUFXM0IsZUFBZSxHQUFHN0MsTUFBTTRDLGNBQWM7UUFDekYsSUFBSTVDLE1BQU1nQyxZQUFZLEtBQUtyQixXQUFXNkQsV0FBV3ZDLGFBQWEsR0FBR2pDLE1BQU1nQyxZQUFZO1FBQ25GLElBQUloQyxNQUFNa0MsWUFBWSxLQUFLdkIsV0FBVzZELFdBQVdwQyxhQUFhLEdBQUdwQyxNQUFNa0MsWUFBWTtRQUNuRixJQUFJbEMsTUFBTXlDLEtBQUssS0FBSzlCLFdBQVc2RCxXQUFXL0IsS0FBSyxHQUFHekMsTUFBTXlDLEtBQUs7UUFDN0QsSUFBSXpDLE1BQU0rQyxhQUFhLEtBQUtwQyxXQUFXNkQsV0FBV3hCLGNBQWMsR0FBR2hELE1BQU0rQyxhQUFhO1FBRXRGLE1BQU0sRUFBRW5ELElBQUksRUFBRUMsS0FBSyxFQUFFLEdBQUcsTUFBTXRDLFNBQzNCdUMsSUFBSSxDQUFDLFVBQ0xjLE1BQU0sQ0FBQzRELFlBQ1BuRSxFQUFFLENBQUMsTUFBTTNDLElBQ1RxQyxNQUFNLEdBQ05PLE1BQU07UUFFVCxJQUFJVCxPQUFPO1lBQ1RILFFBQVFHLEtBQUssQ0FBQywrQkFBK0JBO1lBQzdDLE9BQU87UUFDVDtRQUVBSCxRQUFRQyxHQUFHLENBQUMsNEJBQTRCakM7UUFDeEMsT0FBT3FELHNCQUFzQm5CO0lBQy9CLEVBQUUsT0FBT0MsT0FBTztRQUNkSCxRQUFRRyxLQUFLLENBQUMsK0JBQStCQTtRQUM3QyxPQUFPO0lBQ1Q7QUFDRjtBQUVPLGVBQWU0RSxZQUFZL0csRUFBVTtJQUMxQyxJQUFJO1FBQ0YsTUFBTSxFQUFFbUMsS0FBSyxFQUFFLEdBQUcsTUFBTXRDLFNBQ3JCdUMsSUFBSSxDQUFDLFVBQ0xnQixNQUFNLEdBQ05ULEVBQUUsQ0FBQyxNQUFNM0M7UUFFWixJQUFJbUMsT0FBTztZQUNUSCxRQUFRRyxLQUFLLENBQUMsK0JBQStCQTtZQUM3QyxPQUFPO1FBQ1Q7UUFFQUgsUUFBUUMsR0FBRyxDQUFDLDRCQUE0QmpDO1FBQ3hDLE9BQU87SUFDVCxFQUFFLE9BQU9tQyxPQUFPO1FBQ2RILFFBQVFHLEtBQUssQ0FBQywrQkFBK0JBO1FBQzdDLE9BQU87SUFDVDtBQUNGO0FBRUEsdUJBQXVCO0FBQ2hCLGVBQWU2RTtJQUNwQixJQUFJO1FBQ0YsTUFBTSxFQUFFOUUsSUFBSSxFQUFFQyxLQUFLLEVBQUUsR0FBRyxNQUFNdEMsU0FDM0J1QyxJQUFJLENBQUMsYUFDTEMsTUFBTSxDQUFDLEtBQ1BDLEtBQUssQ0FBQyxjQUFjO1lBQUVDLFdBQVc7UUFBTTtRQUUxQyxJQUFJSixPQUFPO1lBQ1RILFFBQVFHLEtBQUssQ0FBQyxnQ0FBZ0NBO1lBQzlDLE9BQU8sRUFBRTtRQUNYO1FBRUEsT0FBT0QsUUFBUSxFQUFFO0lBQ25CLEVBQUUsT0FBT0MsT0FBTztRQUNkSCxRQUFRRyxLQUFLLENBQUMsZ0NBQWdDQTtRQUM5QyxPQUFPLEVBQUU7SUFDWDtBQUNGO0FBRU8sZUFBZThFLFlBQVlDLFFBQWE7SUFDN0MsSUFBSTtRQUNGLE1BQU0sRUFBRWhGLElBQUksRUFBRUMsS0FBSyxFQUFFLEdBQUcsTUFBTXRDLFNBQzNCdUMsSUFBSSxDQUFDLGFBQ0xXLE1BQU0sQ0FBQztZQUFDbUU7U0FBUyxFQUNqQjdFLE1BQU0sR0FDTk8sTUFBTTtRQUVULElBQUlULE9BQU87WUFDVEgsUUFBUUcsS0FBSyxDQUFDLCtCQUErQkE7WUFDN0MsTUFBTUE7UUFDUjtRQUVBLE9BQU9EO0lBQ1QsRUFBRSxPQUFPQyxPQUFPO1FBQ2RILFFBQVFHLEtBQUssQ0FBQywrQkFBK0JBO1FBQzdDLE1BQU1BO0lBQ1I7QUFDRjtBQUVBLG9CQUFvQjtBQUNiLGVBQWVnRjtJQUNwQixJQUFJO1FBQ0YsTUFBTSxFQUFFakYsSUFBSSxFQUFFQyxLQUFLLEVBQUUsR0FBRyxNQUFNdEMsU0FDM0J1QyxJQUFJLENBQUMsa0JBQ0xDLE1BQU0sQ0FBQyxLQUNQQyxLQUFLLENBQUMsU0FBUztZQUFFQyxXQUFXO1FBQUs7UUFFcEMsSUFBSUosT0FBTztZQUNUSCxRQUFRRyxLQUFLLENBQUMsb0NBQW9DQTtZQUNsRCxPQUFPLEVBQUU7UUFDWDtRQUVBLE9BQU9ELFFBQVEsRUFBRTtJQUNuQixFQUFFLE9BQU9DLE9BQU87UUFDZEgsUUFBUUcsS0FBSyxDQUFDLG9DQUFvQ0E7UUFDbEQsT0FBTyxFQUFFO0lBQ1g7QUFDRjtBQUVPLGVBQWVpRixvQkFBb0JDLE9BQWM7SUFDdEQsSUFBSTtRQUNGLDhCQUE4QjtRQUM5QixNQUFNeEgsU0FDSHVDLElBQUksQ0FBQyxrQkFDTGdCLE1BQU0sR0FDTmtFLEdBQUcsQ0FBQyxNQUFNLElBQUkscUJBQXFCO1FBRXRDLHFCQUFxQjtRQUNyQixJQUFJRCxRQUFRekQsTUFBTSxHQUFHLEdBQUc7WUFDdEIsTUFBTSxFQUFFekIsS0FBSyxFQUFFLEdBQUcsTUFBTXRDLFNBQ3JCdUMsSUFBSSxDQUFDLGtCQUNMVyxNQUFNLENBQUNzRTtZQUVWLElBQUlsRixPQUFPO2dCQUNUSCxRQUFRRyxLQUFLLENBQUMsdUNBQXVDQTtnQkFDckQsTUFBTUE7WUFDUjtRQUNGO1FBRUFILFFBQVFDLEdBQUcsQ0FBQztJQUNkLEVBQUUsT0FBT0UsT0FBTztRQUNkSCxRQUFRRyxLQUFLLENBQUMsdUNBQXVDQTtRQUNyRCxNQUFNQTtJQUNSO0FBQ0Y7QUFFQSx1QkFBdUI7QUFDaEIsZUFBZW9GO0lBQ3BCLElBQUk7UUFDRixNQUFNLEVBQUVyRixJQUFJLEVBQUVDLEtBQUssRUFBRSxHQUFHLE1BQU10QyxTQUMzQnVDLElBQUksQ0FBQyxZQUNMQyxNQUFNLENBQUMsMkRBQ1BDLEtBQUssQ0FBQztRQUVULElBQUlILE9BQU87WUFDVEgsUUFBUUcsS0FBSyxDQUFDLGdDQUFnQ0E7WUFDOUMsT0FBTyxFQUFFO1FBQ1g7UUFFQSwwQ0FBMEM7UUFDMUMsT0FBTyxDQUFDRCxRQUFRLEVBQUUsRUFBRU8sR0FBRyxDQUFDSyxDQUFBQSxVQUFZO2dCQUNsQzlDLElBQUk4QyxRQUFROUMsRUFBRTtnQkFDZEMsTUFBTTZDLFFBQVE3QyxJQUFJO2dCQUNsQmdCLEtBQUs2QixRQUFRN0IsR0FBRztnQkFDaEJSLFVBQVVxQyxRQUFRckMsUUFBUTtnQkFDMUJHLFNBQVNrQyxRQUFRakMsUUFBUTtnQkFDekJMLE9BQU9zQyxRQUFRdEMsS0FBSyxJQUFJLENBQUM7Z0JBQ3pCRSxPQUFPb0MsUUFBUXBDLEtBQUssSUFBSSxFQUFFO2dCQUMxQkMsUUFBUW1DLFFBQVFuQyxNQUFNLElBQUksRUFBRTtnQkFDNUI2RyxZQUFZQyxvQkFBb0IzRSxRQUFRdEMsS0FBSyxJQUFJLENBQUM7Z0JBQ2xEa0gsYUFBYUMscUJBQXFCN0UsUUFBUXRDLEtBQUssSUFBSSxDQUFDLEdBQUdzQyxRQUFRcEMsS0FBSyxJQUFJLEVBQUUsRUFBRW9DLFFBQVFuQyxNQUFNLElBQUksRUFBRTtZQUNsRztJQUNGLEVBQUUsT0FBT3dCLE9BQU87UUFDZEgsUUFBUUcsS0FBSyxDQUFDLGdDQUFnQ0E7UUFDOUMsT0FBTyxFQUFFO0lBQ1g7QUFDRjtBQUVPLGVBQWV5RixnQkFBZ0IvRCxTQUFpQixFQUFFZ0UsU0FBYztJQUNyRSxJQUFJO1FBQ0YsTUFBTUMsWUFBaUI7WUFDckJwRyxZQUFZLElBQUlILE9BQU9xRixXQUFXO1FBQ3BDO1FBRUEsSUFBSWlCLFVBQVVySCxLQUFLLEVBQUU7WUFDbkJzSCxVQUFVdEgsS0FBSyxHQUFHcUgsVUFBVXJILEtBQUs7UUFDbkM7UUFFQSxJQUFJcUgsVUFBVWpILE9BQU8sS0FBS3FDLFdBQVc7WUFDbkM2RSxVQUFVakgsUUFBUSxHQUFHZ0gsVUFBVWpILE9BQU87UUFDeEM7UUFFQSxNQUFNLEVBQUVzQixJQUFJLEVBQUVDLEtBQUssRUFBRSxHQUFHLE1BQU10QyxTQUMzQnVDLElBQUksQ0FBQyxZQUNMYyxNQUFNLENBQUM0RSxXQUNQbkYsRUFBRSxDQUFDLE1BQU1rQixXQUNUeEIsTUFBTSxHQUNOTyxNQUFNO1FBRVQsSUFBSVQsT0FBTztZQUNUSCxRQUFRRyxLQUFLLENBQUMsbUNBQW1DQTtZQUNqRCxNQUFNQTtRQUNSO1FBRUFILFFBQVFDLEdBQUcsQ0FBQyw0Q0FBNEM0QjtRQUN4RCxPQUFPO1lBQ0w3RCxJQUFJa0MsS0FBS2xDLEVBQUU7WUFDWEMsTUFBTWlDLEtBQUtqQyxJQUFJO1lBQ2ZPLE9BQU8wQixLQUFLMUIsS0FBSztZQUNqQkksU0FBU3NCLEtBQUtyQixRQUFRO1lBQ3RCMkcsWUFBWUMsb0JBQW9CdkYsS0FBSzFCLEtBQUs7UUFDNUM7SUFDRixFQUFFLE9BQU8yQixPQUFPO1FBQ2RILFFBQVFHLEtBQUssQ0FBQyxtQ0FBbUNBO1FBQ2pELE1BQU1BO0lBQ1I7QUFDRjtBQUVBLDhDQUE4QztBQUM5QyxTQUFTc0Ysb0JBQW9CakgsS0FBVTtJQUNyQyxJQUFJLENBQUNBLFNBQVMsT0FBT0EsVUFBVSxVQUFVLE9BQU87SUFFaEQsSUFBSXVFLFFBQVE7SUFDWixJQUFLLE1BQU1nRCxRQUFRdkgsTUFBTztRQUN4QixJQUFJLE9BQU9BLEtBQUssQ0FBQ3VILEtBQUssS0FBSyxVQUFVO1lBQ25DLElBQUssTUFBTUMsU0FBU3hILEtBQUssQ0FBQ3VILEtBQUssQ0FBRTtnQkFDL0JoRCxTQUFTTixPQUFPakUsS0FBSyxDQUFDdUgsS0FBSyxDQUFDQyxNQUFNLEtBQUs7WUFDekM7UUFDRjtJQUNGO0lBQ0EsT0FBT2pEO0FBQ1Q7QUFFQSxTQUFTNEMscUJBQXFCbkgsS0FBVSxFQUFFRSxLQUFlLEVBQUVDLE1BQWdCO0lBQ3pFLE1BQU1zSCxTQUFjLENBQUM7SUFFckJ2SCxNQUFNd0gsT0FBTyxDQUFDSCxDQUFBQTtRQUNaRSxNQUFNLENBQUNGLEtBQUssR0FBRyxDQUFDO1FBQ2hCcEgsT0FBT3VILE9BQU8sQ0FBQ0YsQ0FBQUE7WUFDYkMsTUFBTSxDQUFDRixLQUFLLENBQUNDLE1BQU0sR0FBR3ZELE9BQU9qRSxLQUFLLENBQUN1SCxLQUFLLEVBQUUsQ0FBQ0MsTUFBTSxLQUFLO1FBQ3hEO0lBQ0Y7SUFFQSxPQUFPQztBQUNUO0FBRUEsc0NBQXNDO0FBQy9CLGVBQWVFLHFCQUFxQjdGLEtBQVk7SUFDckQsSUFBSTtRQUNGTixRQUFRQyxHQUFHLENBQUMsd0NBQXdDSyxNQUFNdEMsRUFBRTtRQUU1RCxrQkFBa0I7UUFDbEIsTUFBTThDLFVBQVUsTUFBTUosV0FBV0osTUFBTXVCLFNBQVM7UUFDaEQsSUFBSSxDQUFDZixTQUFTO1lBQ1pkLFFBQVFHLEtBQUssQ0FBQywwQ0FBMENHLE1BQU11QixTQUFTO1lBQ3ZFLE9BQU87UUFDVDtRQUVBLGdDQUFnQztRQUNoQyxNQUFNdUUsZUFBZXRGLFFBQVF0QyxLQUFLLEVBQUUsQ0FBQzhCLE1BQU1zQyxZQUFZLENBQUMsRUFBRSxDQUFDdEMsTUFBTXVDLGFBQWEsQ0FBQyxJQUFJO1FBQ25GLElBQUl1RCxlQUFlOUYsTUFBTXFDLFFBQVEsRUFBRTtZQUNqQzNDLFFBQVFHLEtBQUssQ0FBQywyQ0FBMkM7Z0JBQ3ZEMEIsV0FBV3ZCLE1BQU11QixTQUFTO2dCQUMxQmtFLE1BQU16RixNQUFNc0MsWUFBWTtnQkFDeEJvRCxPQUFPMUYsTUFBTXVDLGFBQWE7Z0JBQzFCd0QsV0FBVy9GLE1BQU1xQyxRQUFRO2dCQUN6QjJELFdBQVdGO1lBQ2I7WUFDQSxPQUFPO1FBQ1Q7UUFFQSxtQkFBbUI7UUFDbkIsTUFBTUcsV0FBVztZQUNmLEdBQUd6RixRQUFRdEMsS0FBSztZQUNoQixDQUFDOEIsTUFBTXNDLFlBQVksQ0FBQyxFQUFFO2dCQUNwQixHQUFHOUIsUUFBUXRDLEtBQUssRUFBRSxDQUFDOEIsTUFBTXNDLFlBQVksQ0FBQztnQkFDdEMsQ0FBQ3RDLE1BQU11QyxhQUFhLENBQUMsRUFBRXVELGVBQWU5RixNQUFNcUMsUUFBUTtZQUN0RDtRQUNGO1FBRUEsMkJBQTJCO1FBQzNCLE1BQU02RCxpQkFBaUIsTUFBTXhGLGNBQWNWLE1BQU11QixTQUFTLEVBQUU7WUFDMURyRCxPQUFPK0g7WUFDUDNILFNBQVM2RyxvQkFBb0JjLFlBQVk7UUFDM0M7UUFFQSxJQUFJQyxnQkFBZ0I7WUFDbEJ4RyxRQUFRQyxHQUFHLENBQUMsb0RBQW9ESyxNQUFNdEMsRUFBRTtZQUN4RSxPQUFPO1FBQ1QsT0FBTztZQUNMZ0MsUUFBUUcsS0FBSyxDQUFDLHVEQUF1REcsTUFBTXRDLEVBQUU7WUFDN0UsT0FBTztRQUNUO0lBQ0YsRUFBRSxPQUFPbUMsT0FBTztRQUNkSCxRQUFRRyxLQUFLLENBQUMsOENBQThDQTtRQUM1RCxPQUFPO0lBQ1Q7QUFDRjtBQUVBLHFEQUFxRDtBQUM5QyxlQUFlc0cscUJBQXFCbkcsS0FBWTtJQUNyRCxJQUFJO1FBQ0ZOLFFBQVFDLEdBQUcsQ0FBQyx3Q0FBd0NLLE1BQU10QyxFQUFFO1FBRTVELGtCQUFrQjtRQUNsQixNQUFNOEMsVUFBVSxNQUFNSixXQUFXSixNQUFNdUIsU0FBUztRQUNoRCxJQUFJLENBQUNmLFNBQVM7WUFDWmQsUUFBUUcsS0FBSyxDQUFDLDBDQUEwQ0csTUFBTXVCLFNBQVM7WUFDdkUsT0FBTztRQUNUO1FBRUEsb0JBQW9CO1FBQ3BCLE1BQU11RSxlQUFldEYsUUFBUXRDLEtBQUssRUFBRSxDQUFDOEIsTUFBTXNDLFlBQVksQ0FBQyxFQUFFLENBQUN0QyxNQUFNdUMsYUFBYSxDQUFDLElBQUk7UUFFbkYsbUJBQW1CO1FBQ25CLE1BQU0wRCxXQUFXO1lBQ2YsR0FBR3pGLFFBQVF0QyxLQUFLO1lBQ2hCLENBQUM4QixNQUFNc0MsWUFBWSxDQUFDLEVBQUU7Z0JBQ3BCLEdBQUc5QixRQUFRdEMsS0FBSyxFQUFFLENBQUM4QixNQUFNc0MsWUFBWSxDQUFDO2dCQUN0QyxDQUFDdEMsTUFBTXVDLGFBQWEsQ0FBQyxFQUFFdUQsZUFBZTlGLE1BQU1xQyxRQUFRO1lBQ3REO1FBQ0Y7UUFFQSwyQkFBMkI7UUFDM0IsTUFBTTZELGlCQUFpQixNQUFNeEYsY0FBY1YsTUFBTXVCLFNBQVMsRUFBRTtZQUMxRHJELE9BQU8rSDtZQUNQM0gsU0FBUzZHLG9CQUFvQmMsWUFBWTtRQUMzQztRQUVBLElBQUlDLGdCQUFnQjtZQUNsQnhHLFFBQVFDLEdBQUcsQ0FBQyxvREFBb0RLLE1BQU10QyxFQUFFLEVBQUU7Z0JBQ3hFNkQsV0FBV3ZCLE1BQU11QixTQUFTO2dCQUMxQmtFLE1BQU16RixNQUFNc0MsWUFBWTtnQkFDeEJvRCxPQUFPMUYsTUFBTXVDLGFBQWE7Z0JBQzFCRixVQUFVckMsTUFBTXFDLFFBQVE7Z0JBQ3hCK0QsZUFBZWpCLG9CQUFvQmM7WUFDckM7WUFDQSxPQUFPO1FBQ1QsT0FBTztZQUNMdkcsUUFBUUcsS0FBSyxDQUFDLHVEQUF1REcsTUFBTXRDLEVBQUU7WUFDN0UsT0FBTztRQUNUO0lBQ0YsRUFBRSxPQUFPbUMsT0FBTztRQUNkSCxRQUFRRyxLQUFLLENBQUMsOENBQThDQTtRQUM1RCxPQUFPO0lBQ1Q7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL29ic2lkaWFuLXdlYXIvLi9zcmMvbGliL3N1cGFiYXNlRGF0YWJhc2UudHM/ZjQyNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBEYXRhYmFzZSBzZXJ2aWNlIHVzaW5nIFN1cGFiYXNlIChmcmVlIHRpZXIpXHJcbi8vIFRoaXMgcHJvdmlkZXMgcGVyc2lzdGVudCBzdG9yYWdlIHdpdGggYSByZWFsIGRhdGFiYXNlXHJcblxyXG5pbXBvcnQgeyBjcmVhdGVDbGllbnQgfSBmcm9tICdAc3VwYWJhc2Uvc3VwYWJhc2UtanMnO1xyXG5pbXBvcnQgeyBQcm9kdWN0LCBPcmRlciB9IGZyb20gJ0AvdHlwZXMnO1xyXG5cclxuLy8gU3VwYWJhc2UgY29uZmlndXJhdGlvbiAtIE1VU1QgdXNlIGVudmlyb25tZW50IHZhcmlhYmxlc1xyXG5jb25zdCBzdXBhYmFzZVVybCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCB8fCAnaHR0cHM6Ly96cm14Y2prbGt0aHB5YW5mc2xzdy5zdXBhYmFzZS5jbyc7XHJcbmNvbnN0IHN1cGFiYXNlS2V5ID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1VQQUJBU0VfQU5PTl9LRVkgfHwgJ2V5SmhiR2NpT2lKSVV6STFOaUlzSW5SNWNDSTZJa3BYVkNKOS5leUpwYzNNaU9pSnpkWEJoWW1GelpTSXNJbkpsWmlJNklucHliWGhqYW10c2EzUm9jSGxoYm1aemJITjNJaXdpY205c1pTSTZJbUZ1YjI0aUxDSnBZWFFpT2pFM05UWTVNRFl4TXpBc0ltVjRjQ0k2TWpBM01qUTRNakV6TUgwLjJUamg5cFB6YzZCVUdvVjNsRFVCeW1YekVfZHZBR3MxT19XZXdUZGV0RTAnO1xyXG5cclxuaWYgKCFzdXBhYmFzZVVybCB8fCAhc3VwYWJhc2VLZXkpIHtcclxuICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgU3VwYWJhc2UgZW52aXJvbm1lbnQgdmFyaWFibGVzLiBQbGVhc2Ugc2V0IE5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCBhbmQgTkVYVF9QVUJMSUNfU1VQQUJBU0VfQU5PTl9LRVknKTtcclxufVxyXG5cclxuY29uc3Qgc3VwYWJhc2UgPSBjcmVhdGVDbGllbnQoc3VwYWJhc2VVcmwsIHN1cGFiYXNlS2V5KTtcclxuXHJcbi8vIEV4cG9ydCB0aGUgc3VwYWJhc2UgY2xpZW50IGZvciBkaXJlY3QgdXNlXHJcbmV4cG9ydCB7IHN1cGFiYXNlIH07XHJcblxyXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gY29udmVydCBkYXRhYmFzZSBwcm9kdWN0IHRvIFByb2R1Y3QgaW50ZXJmYWNlXHJcbmZ1bmN0aW9uIGNvbnZlcnREYlByb2R1Y3RUb1Byb2R1Y3QoZGJQcm9kdWN0OiBhbnkpOiBQcm9kdWN0IHtcclxuICByZXR1cm4ge1xyXG4gICAgaWQ6IGRiUHJvZHVjdC5pZCxcclxuICAgIG5hbWU6IGRiUHJvZHVjdC5uYW1lLFxyXG4gICAgZGVzY3JpcHRpb246IGRiUHJvZHVjdC5kZXNjcmlwdGlvbixcclxuICAgIHByaWNlOiBkYlByb2R1Y3QucHJpY2UsXHJcbiAgICBvcmlnaW5hbFByaWNlOiBkYlByb2R1Y3Qub3JpZ2luYWxfcHJpY2UsXHJcbiAgICBpbWFnZTogZGJQcm9kdWN0LmltYWdlLFxyXG4gICAgaW1hZ2VzOiBkYlByb2R1Y3QuaW1hZ2VzIHx8IFtdLFxyXG4gICAgc3RvY2s6IGRiUHJvZHVjdC5zdG9jayB8fCB7fSxcclxuICAgIGNhdGVnb3J5OiBkYlByb2R1Y3QuY2F0ZWdvcnksXHJcbiAgICBzaXplczogZGJQcm9kdWN0LnNpemVzIHx8IFtdLFxyXG4gICAgY29sb3JzOiBkYlByb2R1Y3QuY29sb3JzIHx8IFtdLFxyXG4gICAgaW5TdG9jazogZGJQcm9kdWN0LmluX3N0b2NrLFxyXG4gICAgc3RhdHVzOiBkYlByb2R1Y3Quc3RhdHVzIHx8ICdhdmFpbGFibGUnLFxyXG4gICAgcmF0aW5nOiBkYlByb2R1Y3QucmF0aW5nIHx8IDAsXHJcbiAgICByZXZpZXdzOiBkYlByb2R1Y3QucmV2aWV3cyB8fCAwLFxyXG4gICAgc2t1OiBkYlByb2R1Y3Quc2t1LFxyXG4gICAgd2VpZ2h0OiBkYlByb2R1Y3Qud2VpZ2h0LFxyXG4gICAgZGltZW5zaW9uczogZGJQcm9kdWN0LmRpbWVuc2lvbnMsXHJcbiAgICB0YWdzOiBkYlByb2R1Y3QudGFncyB8fCBbXSxcclxuICAgIGZlYXR1cmVkOiBkYlByb2R1Y3QuZmVhdHVyZWQgfHwgZmFsc2UsXHJcbiAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKGRiUHJvZHVjdC5jcmVhdGVkX2F0KSxcclxuICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoZGJQcm9kdWN0LnVwZGF0ZWRfYXQpXHJcbiAgfTtcclxufVxyXG5cclxuLy8gQ2FjaGUgZm9yIHByb2R1Y3RzIHRvIHJlZHVjZSBkYXRhYmFzZSBjYWxsc1xyXG5sZXQgcHJvZHVjdHNDYWNoZTogUHJvZHVjdFtdIHwgbnVsbCA9IG51bGw7XHJcbmxldCBwcm9kdWN0c0NhY2hlVGltZSA9IDA7XHJcbmNvbnN0IENBQ0hFX0RVUkFUSU9OID0gMzAwMDA7IC8vIDMwIHNlY29uZHNcclxuXHJcbi8vIFByb2R1Y3RzIG9wZXJhdGlvbnNcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFByb2R1Y3RzKCk6IFByb21pc2U8UHJvZHVjdFtdPiB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIFJldHVybiBjYWNoZWQgZGF0YSBpZiBzdGlsbCBmcmVzaFxyXG4gICAgaWYgKHByb2R1Y3RzQ2FjaGUgJiYgRGF0ZS5ub3coKSAtIHByb2R1Y3RzQ2FjaGVUaW1lIDwgQ0FDSEVfRFVSQVRJT04pIHtcclxuICAgICAgY29uc29sZS5sb2coJ1N1cGFiYXNlOiBSZXR1cm5pbmcgY2FjaGVkIHByb2R1Y3RzJyk7XHJcbiAgICAgIHJldHVybiBwcm9kdWN0c0NhY2hlO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgIC5mcm9tKCdwcm9kdWN0cycpXHJcbiAgICAgIC5zZWxlY3QoJyonKVxyXG4gICAgICAub3JkZXIoJ2NyZWF0ZWRfYXQnLCB7IGFzY2VuZGluZzogZmFsc2UgfSk7XHJcbiAgICBcclxuICAgIGlmIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdTdXBhYmFzZSBnZXRQcm9kdWN0cyBlcnJvcjonLCBlcnJvcik7XHJcbiAgICAgIHJldHVybiBwcm9kdWN0c0NhY2hlIHx8IFtdO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjb25zdCBwcm9kdWN0cyA9IChkYXRhIHx8IFtdKS5tYXAoY29udmVydERiUHJvZHVjdFRvUHJvZHVjdCk7XHJcbiAgICBcclxuICAgIC8vIFVwZGF0ZSBjYWNoZVxyXG4gICAgcHJvZHVjdHNDYWNoZSA9IHByb2R1Y3RzO1xyXG4gICAgcHJvZHVjdHNDYWNoZVRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgXHJcbiAgICByZXR1cm4gcHJvZHVjdHM7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ1N1cGFiYXNlIGdldFByb2R1Y3RzIGVycm9yOicsIGVycm9yKTtcclxuICAgIHJldHVybiBwcm9kdWN0c0NhY2hlIHx8IFtdO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFByb2R1Y3QoaWQ6IHN0cmluZyk6IFByb21pc2U8UHJvZHVjdCB8IG51bGw+IHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcclxuICAgICAgLmZyb20oJ3Byb2R1Y3RzJylcclxuICAgICAgLnNlbGVjdCgnKicpXHJcbiAgICAgIC5lcSgnaWQnLCBpZClcclxuICAgICAgLnNpbmdsZSgpO1xyXG4gICAgXHJcbiAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignU3VwYWJhc2UgZ2V0UHJvZHVjdCBlcnJvcjonLCBlcnJvcik7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gY29udmVydERiUHJvZHVjdFRvUHJvZHVjdChkYXRhKTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignU3VwYWJhc2UgZ2V0UHJvZHVjdCBlcnJvcjonLCBlcnJvcik7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhZGRQcm9kdWN0KHByb2R1Y3Q6IFByb2R1Y3QpOiBQcm9taXNlPFByb2R1Y3Q+IHtcclxuICB0cnkge1xyXG4gICAgLy8gQ29udmVydCBjYW1lbENhc2UgdG8gc25ha2VfY2FzZSBmb3IgZGF0YWJhc2VcclxuICAgIGNvbnN0IGRiUHJvZHVjdCA9IHtcclxuICAgICAgaWQ6IHByb2R1Y3QuaWQsXHJcbiAgICAgIG5hbWU6IHByb2R1Y3QubmFtZSxcclxuICAgICAgZGVzY3JpcHRpb246IHByb2R1Y3QuZGVzY3JpcHRpb24sXHJcbiAgICAgIHByaWNlOiBwcm9kdWN0LnByaWNlLFxyXG4gICAgICBvcmlnaW5hbF9wcmljZTogcHJvZHVjdC5vcmlnaW5hbFByaWNlLFxyXG4gICAgICBpbWFnZTogcHJvZHVjdC5pbWFnZSxcclxuICAgICAgaW1hZ2VzOiBwcm9kdWN0LmltYWdlcyB8fCBbXSxcclxuICAgICAgc3RvY2s6IHByb2R1Y3Quc3RvY2ssXHJcbiAgICAgIGNhdGVnb3J5OiBwcm9kdWN0LmNhdGVnb3J5LFxyXG4gICAgICBzaXplczogcHJvZHVjdC5zaXplcyB8fCBbXSxcclxuICAgICAgY29sb3JzOiBwcm9kdWN0LmNvbG9ycyB8fCBbXSxcclxuICAgICAgaW5fc3RvY2s6IHByb2R1Y3QuaW5TdG9jayxcclxuICAgICAgcmF0aW5nOiBwcm9kdWN0LnJhdGluZyxcclxuICAgICAgcmV2aWV3czogcHJvZHVjdC5yZXZpZXdzLFxyXG4gICAgICBza3U6IHByb2R1Y3Quc2t1LFxyXG4gICAgICB3ZWlnaHQ6IHByb2R1Y3Qud2VpZ2h0LFxyXG4gICAgICBkaW1lbnNpb25zOiBwcm9kdWN0LmRpbWVuc2lvbnMsXHJcbiAgICAgIHRhZ3M6IHByb2R1Y3QudGFncyB8fCBbXSxcclxuICAgICAgZmVhdHVyZWQ6IHByb2R1Y3QuZmVhdHVyZWQgfHwgZmFsc2VcclxuICAgICAgLy8gY3JlYXRlZF9hdCBhbmQgdXBkYXRlZF9hdCBhcmUgYXV0b21hdGljYWxseSBzZXQgYnkgdGhlIGRhdGFiYXNlXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgIC5mcm9tKCdwcm9kdWN0cycpXHJcbiAgICAgIC5pbnNlcnQoW2RiUHJvZHVjdF0pXHJcbiAgICAgIC5zZWxlY3QoKVxyXG4gICAgICAuc2luZ2xlKCk7XHJcbiAgICBcclxuICAgIGlmIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdTdXBhYmFzZSBhZGRQcm9kdWN0IGVycm9yOicsIGVycm9yKTtcclxuICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNvbnNvbGUubG9nKCdTdXBhYmFzZTogQWRkZWQgcHJvZHVjdDonLCBwcm9kdWN0LmlkKTtcclxuICAgIFxyXG4gICAgLy8gSW52YWxpZGF0ZSBjYWNoZVxyXG4gICAgcHJvZHVjdHNDYWNoZSA9IG51bGw7XHJcbiAgICBcclxuICAgIC8vIENvbnZlcnQgYmFjayB0byBjYW1lbENhc2VcclxuICAgIHJldHVybiBjb252ZXJ0RGJQcm9kdWN0VG9Qcm9kdWN0KGRhdGEpO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdTdXBhYmFzZSBhZGRQcm9kdWN0IGVycm9yOicsIGVycm9yKTtcclxuICAgIHRocm93IGVycm9yO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVByb2R1Y3QoaWQ6IHN0cmluZywgcHJvZHVjdDogUGFydGlhbDxQcm9kdWN0Pik6IFByb21pc2U8UHJvZHVjdCB8IG51bGw+IHtcclxuICB0cnkge1xyXG4gICAgLy8gQ29udmVydCBjYW1lbENhc2UgdG8gc25ha2VfY2FzZSBmb3IgZGF0YWJhc2VcclxuICAgIGNvbnN0IGRiUHJvZHVjdDogYW55ID0ge307XHJcbiAgICBcclxuICAgIGlmIChwcm9kdWN0Lm5hbWUgIT09IHVuZGVmaW5lZCkgZGJQcm9kdWN0Lm5hbWUgPSBwcm9kdWN0Lm5hbWU7XHJcbiAgICBpZiAocHJvZHVjdC5kZXNjcmlwdGlvbiAhPT0gdW5kZWZpbmVkKSBkYlByb2R1Y3QuZGVzY3JpcHRpb24gPSBwcm9kdWN0LmRlc2NyaXB0aW9uO1xyXG4gICAgaWYgKHByb2R1Y3QucHJpY2UgIT09IHVuZGVmaW5lZCkgZGJQcm9kdWN0LnByaWNlID0gcHJvZHVjdC5wcmljZTtcclxuICAgIGlmIChwcm9kdWN0Lm9yaWdpbmFsUHJpY2UgIT09IHVuZGVmaW5lZCkgZGJQcm9kdWN0Lm9yaWdpbmFsX3ByaWNlID0gcHJvZHVjdC5vcmlnaW5hbFByaWNlO1xyXG4gICAgaWYgKHByb2R1Y3QuaW1hZ2UgIT09IHVuZGVmaW5lZCkgZGJQcm9kdWN0LmltYWdlID0gcHJvZHVjdC5pbWFnZTtcclxuICAgIGlmIChwcm9kdWN0LmltYWdlcyAhPT0gdW5kZWZpbmVkKSBkYlByb2R1Y3QuaW1hZ2VzID0gcHJvZHVjdC5pbWFnZXM7XHJcbiAgICBpZiAocHJvZHVjdC5zdG9jayAhPT0gdW5kZWZpbmVkKSBkYlByb2R1Y3Quc3RvY2sgPSBwcm9kdWN0LnN0b2NrO1xyXG4gICAgaWYgKHByb2R1Y3QuY2F0ZWdvcnkgIT09IHVuZGVmaW5lZCkgZGJQcm9kdWN0LmNhdGVnb3J5ID0gcHJvZHVjdC5jYXRlZ29yeTtcclxuICAgIGlmIChwcm9kdWN0LnNpemVzICE9PSB1bmRlZmluZWQpIGRiUHJvZHVjdC5zaXplcyA9IHByb2R1Y3Quc2l6ZXM7XHJcbiAgICBpZiAocHJvZHVjdC5jb2xvcnMgIT09IHVuZGVmaW5lZCkgZGJQcm9kdWN0LmNvbG9ycyA9IHByb2R1Y3QuY29sb3JzO1xyXG4gICAgaWYgKHByb2R1Y3QuaW5TdG9jayAhPT0gdW5kZWZpbmVkKSBkYlByb2R1Y3QuaW5fc3RvY2sgPSBwcm9kdWN0LmluU3RvY2s7XHJcbiAgICBpZiAocHJvZHVjdC5yYXRpbmcgIT09IHVuZGVmaW5lZCkgZGJQcm9kdWN0LnJhdGluZyA9IHByb2R1Y3QucmF0aW5nO1xyXG4gICAgaWYgKHByb2R1Y3QucmV2aWV3cyAhPT0gdW5kZWZpbmVkKSBkYlByb2R1Y3QucmV2aWV3cyA9IHByb2R1Y3QucmV2aWV3cztcclxuICAgIGlmIChwcm9kdWN0LnNrdSAhPT0gdW5kZWZpbmVkKSBkYlByb2R1Y3Quc2t1ID0gcHJvZHVjdC5za3U7XHJcbiAgICBpZiAocHJvZHVjdC53ZWlnaHQgIT09IHVuZGVmaW5lZCkgZGJQcm9kdWN0LndlaWdodCA9IHByb2R1Y3Qud2VpZ2h0O1xyXG4gICAgaWYgKHByb2R1Y3QuZGltZW5zaW9ucyAhPT0gdW5kZWZpbmVkKSBkYlByb2R1Y3QuZGltZW5zaW9ucyA9IHByb2R1Y3QuZGltZW5zaW9ucztcclxuICAgIGlmIChwcm9kdWN0LnRhZ3MgIT09IHVuZGVmaW5lZCkgZGJQcm9kdWN0LnRhZ3MgPSBwcm9kdWN0LnRhZ3M7XHJcbiAgICBpZiAocHJvZHVjdC5mZWF0dXJlZCAhPT0gdW5kZWZpbmVkKSBkYlByb2R1Y3QuZmVhdHVyZWQgPSBwcm9kdWN0LmZlYXR1cmVkO1xyXG4gICAgXHJcbiAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxyXG4gICAgICAuZnJvbSgncHJvZHVjdHMnKVxyXG4gICAgICAudXBkYXRlKGRiUHJvZHVjdClcclxuICAgICAgLmVxKCdpZCcsIGlkKVxyXG4gICAgICAuc2VsZWN0KClcclxuICAgICAgLnNpbmdsZSgpO1xyXG4gICAgXHJcbiAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignU3VwYWJhc2UgdXBkYXRlUHJvZHVjdCBlcnJvcjonLCBlcnJvcik7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjb25zb2xlLmxvZygnU3VwYWJhc2U6IFVwZGF0ZWQgcHJvZHVjdDonLCBpZCk7XHJcbiAgICBcclxuICAgIC8vIEludmFsaWRhdGUgY2FjaGVcclxuICAgIHByb2R1Y3RzQ2FjaGUgPSBudWxsO1xyXG4gICAgXHJcbiAgICByZXR1cm4gY29udmVydERiUHJvZHVjdFRvUHJvZHVjdChkYXRhKTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignU3VwYWJhc2UgdXBkYXRlUHJvZHVjdCBlcnJvcjonLCBlcnJvcik7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZWxldGVQcm9kdWN0KGlkOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcclxuICAgICAgLmZyb20oJ3Byb2R1Y3RzJylcclxuICAgICAgLmRlbGV0ZSgpXHJcbiAgICAgIC5lcSgnaWQnLCBpZCk7XHJcbiAgICBcclxuICAgIGlmIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdTdXBhYmFzZSBkZWxldGVQcm9kdWN0IGVycm9yOicsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjb25zb2xlLmxvZygnU3VwYWJhc2U6IERlbGV0ZWQgcHJvZHVjdDonLCBpZCk7XHJcbiAgICBcclxuICAgIC8vIEludmFsaWRhdGUgY2FjaGVcclxuICAgIHByb2R1Y3RzQ2FjaGUgPSBudWxsO1xyXG4gICAgXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignU3VwYWJhc2UgZGVsZXRlUHJvZHVjdCBlcnJvcjonLCBlcnJvcik7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gY29udmVydCBkYXRhYmFzZSBvcmRlciB0byBPcmRlciBpbnRlcmZhY2VcclxuZnVuY3Rpb24gY29udmVydERiT3JkZXJUb09yZGVyKGRiT3JkZXI6IGFueSk6IE9yZGVyIHtcclxuICAvLyBIYW5kbGUgYm90aCBvbGQgYW5kIG5ldyBzY2hlbWFcclxuICBjb25zdCBpc09sZFNjaGVtYSA9IGRiT3JkZXIuaXRlbXMgJiYgQXJyYXkuaXNBcnJheShkYk9yZGVyLml0ZW1zKTtcclxuICBcclxuICBpZiAoaXNPbGRTY2hlbWEpIHtcclxuICAgIC8vIE9sZCBzY2hlbWEgd2l0aCBpdGVtcyBhcnJheVxyXG4gICAgY29uc3QgZmlyc3RJdGVtID0gZGJPcmRlci5pdGVtcyAmJiBkYk9yZGVyLml0ZW1zLmxlbmd0aCA+IDAgPyBkYk9yZGVyLml0ZW1zWzBdIDoge307XHJcbiAgICBcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGlkOiBkYk9yZGVyLmlkLFxyXG4gICAgICBwcm9kdWN0SWQ6IGZpcnN0SXRlbS5wcm9kdWN0SWQgfHwgJycsXHJcbiAgICAgIHByb2R1Y3ROYW1lOiBmaXJzdEl0ZW0ucHJvZHVjdE5hbWUgfHwgJycsXHJcbiAgICAgIHByb2R1Y3RJbWFnZTogZmlyc3RJdGVtLnByb2R1Y3RJbWFnZSB8fCAnJyxcclxuICAgICAgY3VzdG9tZXJOYW1lOiBmaXJzdEl0ZW0uY3VzdG9tZXJOYW1lIHx8ICcnLFxyXG4gICAgICBjdXN0b21lclBob25lOiBmaXJzdEl0ZW0uY3VzdG9tZXJQaG9uZSB8fCAnJyxcclxuICAgICAgY3VzdG9tZXJFbWFpbDogZmlyc3RJdGVtLmN1c3RvbWVyRW1haWwgfHwgJycsXHJcbiAgICAgIGN1c3RvbWVyQWRkcmVzczogZmlyc3RJdGVtLmN1c3RvbWVyQWRkcmVzcyB8fCAnJyxcclxuICAgICAgd2lsYXlhSWQ6IGZpcnN0SXRlbS53aWxheWFJZCB8fCAwLFxyXG4gICAgICB3aWxheWFOYW1lOiBmaXJzdEl0ZW0ud2lsYXlhTmFtZSB8fCAnJyxcclxuICAgICAgc2hpcHBpbmdUeXBlOiBkYk9yZGVyLnNoaXBwaW5nX3R5cGUgfHwgJ2hvbWVEZWxpdmVyeScsXHJcbiAgICAgIHNoaXBwaW5nQ29zdDogTnVtYmVyKGRiT3JkZXIuc2hpcHBpbmdfY29zdCkgfHwgMCxcclxuICAgICAgcXVhbnRpdHk6IGZpcnN0SXRlbS5xdWFudGl0eSB8fCAxLFxyXG4gICAgICBzZWxlY3RlZFNpemU6IGZpcnN0SXRlbS5zZWxlY3RlZFNpemUgfHwgJycsXHJcbiAgICAgIHNlbGVjdGVkQ29sb3I6IGZpcnN0SXRlbS5zZWxlY3RlZENvbG9yIHx8ICcnLFxyXG4gICAgICBzdWJ0b3RhbDogTnVtYmVyKGRiT3JkZXIudG90YWwpIC0gTnVtYmVyKGRiT3JkZXIuc2hpcHBpbmdfY29zdCkgfHwgMCxcclxuICAgICAgdG90YWw6IE51bWJlcihkYk9yZGVyLnRvdGFsKSB8fCAwLFxyXG4gICAgICBvcmRlckRhdGU6IG5ldyBEYXRlKGRiT3JkZXIub3JkZXJfZGF0ZSksXHJcbiAgICAgIHN0YXR1czogZGJPcmRlci5zdGF0dXMgfHwgJ3BlbmRpbmcnLFxyXG4gICAgICB0cmFja2luZ051bWJlcjogZGJPcmRlci50cmFja2luZ19udW1iZXIgfHwgJycsXHJcbiAgICAgIG5vdGVzOiBmaXJzdEl0ZW0ubm90ZXMgfHwgJycsXHJcbiAgICAgIHBheW1lbnRNZXRob2Q6IGRiT3JkZXIucGF5bWVudF9tZXRob2QgfHwgJ2NvZCcsXHJcbiAgICAgIHBheW1lbnRTdGF0dXM6IGRiT3JkZXIucGF5bWVudF9zdGF0dXMgfHwgJ3BlbmRpbmcnLFxyXG4gICAgICBlc3RpbWF0ZWREZWxpdmVyeTogZmlyc3RJdGVtLmVzdGltYXRlZERlbGl2ZXJ5IHx8ICcnLFxyXG4gICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKGRiT3JkZXIuY3JlYXRlZF9hdCksXHJcbiAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoZGJPcmRlci51cGRhdGVkX2F0KVxyXG4gICAgfTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gTmV3IHNjaGVtYSB3aXRoIGRpcmVjdCBmaWVsZHNcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGlkOiBkYk9yZGVyLmlkLFxyXG4gICAgICBwcm9kdWN0SWQ6IGRiT3JkZXIucHJvZHVjdF9pZCB8fCAnJyxcclxuICAgICAgcHJvZHVjdE5hbWU6IGRiT3JkZXIucHJvZHVjdF9uYW1lIHx8ICcnLFxyXG4gICAgICBwcm9kdWN0SW1hZ2U6IGRiT3JkZXIucHJvZHVjdF9pbWFnZSB8fCAnJyxcclxuICAgICAgY3VzdG9tZXJOYW1lOiBkYk9yZGVyLmN1c3RvbWVyX25hbWUgfHwgJycsXHJcbiAgICAgIGN1c3RvbWVyUGhvbmU6IGRiT3JkZXIuY3VzdG9tZXJfcGhvbmUgfHwgJycsXHJcbiAgICAgIGN1c3RvbWVyRW1haWw6IGRiT3JkZXIuY3VzdG9tZXJfZW1haWwgfHwgJycsXHJcbiAgICAgIGN1c3RvbWVyQWRkcmVzczogZGJPcmRlci5jdXN0b21lcl9hZGRyZXNzIHx8ICcnLFxyXG4gICAgICB3aWxheWFJZDogZGJPcmRlci53aWxheWFfaWQgfHwgMCxcclxuICAgICAgd2lsYXlhTmFtZTogZGJPcmRlci53aWxheWFfbmFtZSB8fCAnJyxcclxuICAgICAgc2hpcHBpbmdUeXBlOiBkYk9yZGVyLnNoaXBwaW5nX3R5cGUgfHwgJ2hvbWVEZWxpdmVyeScsXHJcbiAgICAgIHNoaXBwaW5nQ29zdDogTnVtYmVyKGRiT3JkZXIuc2hpcHBpbmdfY29zdCkgfHwgMCxcclxuICAgICAgcXVhbnRpdHk6IGRiT3JkZXIucXVhbnRpdHkgfHwgMSxcclxuICAgICAgc2VsZWN0ZWRTaXplOiBkYk9yZGVyLnNlbGVjdGVkX3NpemUgfHwgJycsXHJcbiAgICAgIHNlbGVjdGVkQ29sb3I6IGRiT3JkZXIuc2VsZWN0ZWRfY29sb3IgfHwgJycsXHJcbiAgICAgIHN1YnRvdGFsOiBOdW1iZXIoZGJPcmRlci5zdWJ0b3RhbCkgfHwgMCxcclxuICAgICAgdG90YWw6IE51bWJlcihkYk9yZGVyLnRvdGFsKSB8fCAwLFxyXG4gICAgICBvcmRlckRhdGU6IG5ldyBEYXRlKGRiT3JkZXIub3JkZXJfZGF0ZSksXHJcbiAgICAgIHN0YXR1czogZGJPcmRlci5zdGF0dXMgfHwgJ3BlbmRpbmcnLFxyXG4gICAgICB0cmFja2luZ051bWJlcjogZGJPcmRlci50cmFja2luZ19udW1iZXIgfHwgJycsXHJcbiAgICAgIG5vdGVzOiBkYk9yZGVyLm5vdGVzIHx8ICcnLFxyXG4gICAgICBwYXltZW50TWV0aG9kOiBkYk9yZGVyLnBheW1lbnRfbWV0aG9kIHx8ICdjb2QnLFxyXG4gICAgICBwYXltZW50U3RhdHVzOiBkYk9yZGVyLnBheW1lbnRfc3RhdHVzIHx8ICdwZW5kaW5nJyxcclxuICAgICAgZXN0aW1hdGVkRGVsaXZlcnk6IGRiT3JkZXIuZXN0aW1hdGVkX2RlbGl2ZXJ5IHx8ICcnLFxyXG4gICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKGRiT3JkZXIuY3JlYXRlZF9hdCksXHJcbiAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoZGJPcmRlci51cGRhdGVkX2F0KVxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuXHJcbi8vIENhY2hlIGZvciBvcmRlcnMgdG8gcmVkdWNlIGRhdGFiYXNlIGNhbGxzXHJcbmxldCBvcmRlcnNDYWNoZTogT3JkZXJbXSB8IG51bGwgPSBudWxsO1xyXG5sZXQgb3JkZXJzQ2FjaGVUaW1lID0gMDtcclxuXHJcbi8vIE9yZGVycyBvcGVyYXRpb25zXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRPcmRlcnMoKTogUHJvbWlzZTxPcmRlcltdPiB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIFJldHVybiBjYWNoZWQgZGF0YSBpZiBzdGlsbCBmcmVzaFxyXG4gICAgaWYgKG9yZGVyc0NhY2hlICYmIERhdGUubm93KCkgLSBvcmRlcnNDYWNoZVRpbWUgPCBDQUNIRV9EVVJBVElPTikge1xyXG4gICAgICBjb25zb2xlLmxvZygnU3VwYWJhc2U6IFJldHVybmluZyBjYWNoZWQgb3JkZXJzJyk7XHJcbiAgICAgIHJldHVybiBvcmRlcnNDYWNoZTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxyXG4gICAgICAuZnJvbSgnb3JkZXJzJylcclxuICAgICAgLnNlbGVjdCgnKicpXHJcbiAgICAgIC5vcmRlcignb3JkZXJfZGF0ZScsIHsgYXNjZW5kaW5nOiBmYWxzZSB9KTtcclxuICAgIFxyXG4gICAgaWYgKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1N1cGFiYXNlIGdldE9yZGVycyBlcnJvcjonLCBlcnJvcik7XHJcbiAgICAgIHJldHVybiBvcmRlcnNDYWNoZSB8fCBbXTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgY29uc3Qgb3JkZXJzID0gKGRhdGEgfHwgW10pLm1hcChjb252ZXJ0RGJPcmRlclRvT3JkZXIpO1xyXG4gICAgXHJcbiAgICAvLyBVcGRhdGUgY2FjaGVcclxuICAgIG9yZGVyc0NhY2hlID0gb3JkZXJzO1xyXG4gICAgb3JkZXJzQ2FjaGVUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgIFxyXG4gICAgcmV0dXJuIG9yZGVycztcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignU3VwYWJhc2UgZ2V0T3JkZXJzIGVycm9yOicsIGVycm9yKTtcclxuICAgIHJldHVybiBvcmRlcnNDYWNoZSB8fCBbXTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRPcmRlcihpZDogc3RyaW5nKTogUHJvbWlzZTxPcmRlciB8IG51bGw+IHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcclxuICAgICAgLmZyb20oJ29yZGVycycpXHJcbiAgICAgIC5zZWxlY3QoJyonKVxyXG4gICAgICAuZXEoJ2lkJywgaWQpXHJcbiAgICAgIC5zaW5nbGUoKTtcclxuICAgIFxyXG4gICAgaWYgKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1N1cGFiYXNlIGdldE9yZGVyIGVycm9yOicsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiBjb252ZXJ0RGJPcmRlclRvT3JkZXIoZGF0YSk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ1N1cGFiYXNlIGdldE9yZGVyIGVycm9yOicsIGVycm9yKTtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFkZE9yZGVyKG9yZGVyOiBPcmRlcik6IFByb21pc2U8T3JkZXI+IHtcclxuICB0cnkge1xyXG4gICAgLy8gQ29udmVydCBPcmRlciBpbnRlcmZhY2UgdG8gZGF0YWJhc2UgZm9ybWF0IChtYXRjaGluZyB0aGUgb3JkZXJzIHRhYmxlIHNjaGVtYSlcclxuICAgIGNvbnN0IGRiT3JkZXIgPSB7XHJcbiAgICAgIGlkOiBvcmRlci5pZCxcclxuICAgICAgY3VzdG9tZXJfbmFtZTogb3JkZXIuY3VzdG9tZXJOYW1lLFxyXG4gICAgICBjdXN0b21lcl9lbWFpbDogb3JkZXIuY3VzdG9tZXJFbWFpbCxcclxuICAgICAgY3VzdG9tZXJfcGhvbmU6IG9yZGVyLmN1c3RvbWVyUGhvbmUsXHJcbiAgICAgIGN1c3RvbWVyX2FkZHJlc3M6IG9yZGVyLmN1c3RvbWVyQWRkcmVzcyxcclxuICAgICAgd2lsYXlhX2lkOiBvcmRlci53aWxheWFJZCxcclxuICAgICAgd2lsYXlhX25hbWU6IG9yZGVyLndpbGF5YU5hbWUsXHJcbiAgICAgIHByb2R1Y3RfaWQ6IG9yZGVyLnByb2R1Y3RJZCxcclxuICAgICAgcHJvZHVjdF9uYW1lOiBvcmRlci5wcm9kdWN0TmFtZSxcclxuICAgICAgcHJvZHVjdF9pbWFnZTogb3JkZXIucHJvZHVjdEltYWdlLFxyXG4gICAgICBzZWxlY3RlZF9zaXplOiBvcmRlci5zZWxlY3RlZFNpemUsXHJcbiAgICAgIHNlbGVjdGVkX2NvbG9yOiBvcmRlci5zZWxlY3RlZENvbG9yLFxyXG4gICAgICBxdWFudGl0eTogb3JkZXIucXVhbnRpdHksXHJcbiAgICAgIHN1YnRvdGFsOiBvcmRlci5zdWJ0b3RhbCxcclxuICAgICAgc2hpcHBpbmdfY29zdDogb3JkZXIuc2hpcHBpbmdDb3N0LFxyXG4gICAgICB0b3RhbDogb3JkZXIudG90YWwsXHJcbiAgICAgIHNoaXBwaW5nX3R5cGU6IG9yZGVyLnNoaXBwaW5nVHlwZSxcclxuICAgICAgcGF5bWVudF9tZXRob2Q6IG9yZGVyLnBheW1lbnRNZXRob2QsXHJcbiAgICAgIHBheW1lbnRfc3RhdHVzOiBvcmRlci5wYXltZW50U3RhdHVzLFxyXG4gICAgICBzdGF0dXM6IG9yZGVyLnN0YXR1cyxcclxuICAgICAgb3JkZXJfZGF0ZTogb3JkZXIub3JkZXJEYXRlLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgIG5vdGVzOiBvcmRlci5ub3RlcyxcclxuICAgICAgdHJhY2tpbmdfbnVtYmVyOiBvcmRlci50cmFja2luZ051bWJlcixcclxuICAgICAgZXN0aW1hdGVkX2RlbGl2ZXJ5OiBvcmRlci5lc3RpbWF0ZWREZWxpdmVyeSxcclxuICAgICAgY3JlYXRlZF9hdDogb3JkZXIuY3JlYXRlZEF0LnRvSVNPU3RyaW5nKCksXHJcbiAgICAgIHVwZGF0ZWRfYXQ6IG9yZGVyLnVwZGF0ZWRBdC50b0lTT1N0cmluZygpXHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxyXG4gICAgICAuZnJvbSgnb3JkZXJzJylcclxuICAgICAgLmluc2VydChbZGJPcmRlcl0pXHJcbiAgICAgIC5zZWxlY3QoKVxyXG4gICAgICAuc2luZ2xlKCk7XHJcbiAgICBcclxuICAgIGlmIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdTdXBhYmFzZSBhZGRPcmRlciBlcnJvcjonLCBlcnJvcik7XHJcbiAgICAgIHRocm93IGVycm9yO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjb25zb2xlLmxvZygnU3VwYWJhc2U6IEFkZGVkIG9yZGVyOicsIG9yZGVyLmlkKTtcclxuICAgIHJldHVybiBjb252ZXJ0RGJPcmRlclRvT3JkZXIoZGF0YSk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ1N1cGFiYXNlIGFkZE9yZGVyIGVycm9yOicsIGVycm9yKTtcclxuICAgIHRocm93IGVycm9yO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZU9yZGVyKGlkOiBzdHJpbmcsIG9yZGVyOiBQYXJ0aWFsPE9yZGVyPik6IFByb21pc2U8T3JkZXIgfCBudWxsPiB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIENvbnZlcnQgcGFydGlhbCBPcmRlciB0byBkYXRhYmFzZSBmb3JtYXRcclxuICAgIGNvbnN0IHVwZGF0ZURhdGE6IGFueSA9IHtcclxuICAgICAgdXBkYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICBpZiAob3JkZXIuc3RhdHVzICE9PSB1bmRlZmluZWQpIHVwZGF0ZURhdGEuc3RhdHVzID0gb3JkZXIuc3RhdHVzO1xyXG4gICAgaWYgKG9yZGVyLnBheW1lbnRTdGF0dXMgIT09IHVuZGVmaW5lZCkgdXBkYXRlRGF0YS5wYXltZW50X3N0YXR1cyA9IG9yZGVyLnBheW1lbnRTdGF0dXM7XHJcbiAgICBpZiAob3JkZXIudHJhY2tpbmdOdW1iZXIgIT09IHVuZGVmaW5lZCkgdXBkYXRlRGF0YS50cmFja2luZ19udW1iZXIgPSBvcmRlci50cmFja2luZ051bWJlcjtcclxuICAgIGlmIChvcmRlci5zaGlwcGluZ1R5cGUgIT09IHVuZGVmaW5lZCkgdXBkYXRlRGF0YS5zaGlwcGluZ190eXBlID0gb3JkZXIuc2hpcHBpbmdUeXBlO1xyXG4gICAgaWYgKG9yZGVyLnNoaXBwaW5nQ29zdCAhPT0gdW5kZWZpbmVkKSB1cGRhdGVEYXRhLnNoaXBwaW5nX2Nvc3QgPSBvcmRlci5zaGlwcGluZ0Nvc3Q7XHJcbiAgICBpZiAob3JkZXIudG90YWwgIT09IHVuZGVmaW5lZCkgdXBkYXRlRGF0YS50b3RhbCA9IG9yZGVyLnRvdGFsO1xyXG4gICAgaWYgKG9yZGVyLnBheW1lbnRNZXRob2QgIT09IHVuZGVmaW5lZCkgdXBkYXRlRGF0YS5wYXltZW50X21ldGhvZCA9IG9yZGVyLnBheW1lbnRNZXRob2Q7XHJcbiAgICBcclxuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgIC5mcm9tKCdvcmRlcnMnKVxyXG4gICAgICAudXBkYXRlKHVwZGF0ZURhdGEpXHJcbiAgICAgIC5lcSgnaWQnLCBpZClcclxuICAgICAgLnNlbGVjdCgpXHJcbiAgICAgIC5zaW5nbGUoKTtcclxuICAgIFxyXG4gICAgaWYgKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1N1cGFiYXNlIHVwZGF0ZU9yZGVyIGVycm9yOicsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNvbnNvbGUubG9nKCdTdXBhYmFzZTogVXBkYXRlZCBvcmRlcjonLCBpZCk7XHJcbiAgICByZXR1cm4gY29udmVydERiT3JkZXJUb09yZGVyKGRhdGEpO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdTdXBhYmFzZSB1cGRhdGVPcmRlciBlcnJvcjonLCBlcnJvcik7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZWxldGVPcmRlcihpZDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgIC5mcm9tKCdvcmRlcnMnKVxyXG4gICAgICAuZGVsZXRlKClcclxuICAgICAgLmVxKCdpZCcsIGlkKTtcclxuICAgIFxyXG4gICAgaWYgKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1N1cGFiYXNlIGRlbGV0ZU9yZGVyIGVycm9yOicsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjb25zb2xlLmxvZygnU3VwYWJhc2U6IERlbGV0ZWQgb3JkZXI6JywgaWQpO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ1N1cGFiYXNlIGRlbGV0ZU9yZGVyIGVycm9yOicsIGVycm9yKTtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbn1cclxuXHJcbi8vIEN1c3RvbWVycyBvcGVyYXRpb25zXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDdXN0b21lcnMoKTogUHJvbWlzZTxhbnlbXT4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxyXG4gICAgICAuZnJvbSgnY3VzdG9tZXJzJylcclxuICAgICAgLnNlbGVjdCgnKicpXHJcbiAgICAgIC5vcmRlcignY3JlYXRlZF9hdCcsIHsgYXNjZW5kaW5nOiBmYWxzZSB9KTtcclxuICAgIFxyXG4gICAgaWYgKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1N1cGFiYXNlIGdldEN1c3RvbWVycyBlcnJvcjonLCBlcnJvcik7XHJcbiAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIGRhdGEgfHwgW107XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ1N1cGFiYXNlIGdldEN1c3RvbWVycyBlcnJvcjonLCBlcnJvcik7XHJcbiAgICByZXR1cm4gW107XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYWRkQ3VzdG9tZXIoY3VzdG9tZXI6IGFueSk6IFByb21pc2U8YW55PiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgIC5mcm9tKCdjdXN0b21lcnMnKVxyXG4gICAgICAuaW5zZXJ0KFtjdXN0b21lcl0pXHJcbiAgICAgIC5zZWxlY3QoKVxyXG4gICAgICAuc2luZ2xlKCk7XHJcbiAgICBcclxuICAgIGlmIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdTdXBhYmFzZSBhZGRDdXN0b21lciBlcnJvcjonLCBlcnJvcik7XHJcbiAgICAgIHRocm93IGVycm9yO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gZGF0YTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignU3VwYWJhc2UgYWRkQ3VzdG9tZXIgZXJyb3I6JywgZXJyb3IpO1xyXG4gICAgdGhyb3cgZXJyb3I7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBXaWxheWEgb3BlcmF0aW9uc1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0V2lsYXlhVGFyaWZmcygpOiBQcm9taXNlPGFueVtdPiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgIC5mcm9tKCd3aWxheWFfdGFyaWZmcycpXHJcbiAgICAgIC5zZWxlY3QoJyonKVxyXG4gICAgICAub3JkZXIoJ29yZGVyJywgeyBhc2NlbmRpbmc6IHRydWUgfSk7XHJcbiAgICBcclxuICAgIGlmIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdTdXBhYmFzZSBnZXRXaWxheWFUYXJpZmZzIGVycm9yOicsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gZGF0YSB8fCBbXTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignU3VwYWJhc2UgZ2V0V2lsYXlhVGFyaWZmcyBlcnJvcjonLCBlcnJvcik7XHJcbiAgICByZXR1cm4gW107XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBkYXRlV2lsYXlhVGFyaWZmcyh0YXJpZmZzOiBhbnlbXSk6IFByb21pc2U8dm9pZD4ge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBEZWxldGUgYWxsIGV4aXN0aW5nIHRhcmlmZnNcclxuICAgIGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgIC5mcm9tKCd3aWxheWFfdGFyaWZmcycpXHJcbiAgICAgIC5kZWxldGUoKVxyXG4gICAgICAubmVxKCdpZCcsIDApOyAvLyBEZWxldGUgYWxsIHJlY29yZHNcclxuICAgIFxyXG4gICAgLy8gSW5zZXJ0IG5ldyB0YXJpZmZzXHJcbiAgICBpZiAodGFyaWZmcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgICAgLmZyb20oJ3dpbGF5YV90YXJpZmZzJylcclxuICAgICAgICAuaW5zZXJ0KHRhcmlmZnMpO1xyXG4gICAgICBcclxuICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignU3VwYWJhc2UgdXBkYXRlV2lsYXlhVGFyaWZmcyBlcnJvcjonLCBlcnJvcik7XHJcbiAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgY29uc29sZS5sb2coJ1N1cGFiYXNlOiBVcGRhdGVkIHdpbGF5YSB0YXJpZmZzJyk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ1N1cGFiYXNlIHVwZGF0ZVdpbGF5YVRhcmlmZnMgZXJyb3I6JywgZXJyb3IpO1xyXG4gICAgdGhyb3cgZXJyb3I7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBJbnZlbnRvcnkgb3BlcmF0aW9uc1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0SW52ZW50b3J5KCk6IFByb21pc2U8YW55W10+IHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcclxuICAgICAgLmZyb20oJ3Byb2R1Y3RzJylcclxuICAgICAgLnNlbGVjdCgnaWQsIG5hbWUsIHNrdSwgc3RvY2ssIHNpemVzLCBjb2xvcnMsIGluX3N0b2NrLCBjYXRlZ29yeScpXHJcbiAgICAgIC5vcmRlcignbmFtZScpO1xyXG4gICAgXHJcbiAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignU3VwYWJhc2UgZ2V0SW52ZW50b3J5IGVycm9yOicsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBUcmFuc2Zvcm0gZGF0YSBmb3IgaW52ZW50b3J5IG1hbmFnZW1lbnRcclxuICAgIHJldHVybiAoZGF0YSB8fCBbXSkubWFwKHByb2R1Y3QgPT4gKHtcclxuICAgICAgaWQ6IHByb2R1Y3QuaWQsXHJcbiAgICAgIG5hbWU6IHByb2R1Y3QubmFtZSxcclxuICAgICAgc2t1OiBwcm9kdWN0LnNrdSxcclxuICAgICAgY2F0ZWdvcnk6IHByb2R1Y3QuY2F0ZWdvcnksXHJcbiAgICAgIGluU3RvY2s6IHByb2R1Y3QuaW5fc3RvY2ssXHJcbiAgICAgIHN0b2NrOiBwcm9kdWN0LnN0b2NrIHx8IHt9LFxyXG4gICAgICBzaXplczogcHJvZHVjdC5zaXplcyB8fCBbXSxcclxuICAgICAgY29sb3JzOiBwcm9kdWN0LmNvbG9ycyB8fCBbXSxcclxuICAgICAgdG90YWxTdG9jazogY2FsY3VsYXRlVG90YWxTdG9jayhwcm9kdWN0LnN0b2NrIHx8IHt9KSxcclxuICAgICAgc3RvY2tCeVNpemU6IGNhbGN1bGF0ZVN0b2NrQnlTaXplKHByb2R1Y3Quc3RvY2sgfHwge30sIHByb2R1Y3Quc2l6ZXMgfHwgW10sIHByb2R1Y3QuY29sb3JzIHx8IFtdKVxyXG4gICAgfSkpO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdTdXBhYmFzZSBnZXRJbnZlbnRvcnkgZXJyb3I6JywgZXJyb3IpO1xyXG4gICAgcmV0dXJuIFtdO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUludmVudG9yeShwcm9kdWN0SWQ6IHN0cmluZywgc3RvY2tEYXRhOiBhbnkpOiBQcm9taXNlPGFueT4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCB1cGRhdGVPYmo6IGFueSA9IHtcclxuICAgICAgdXBkYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICBpZiAoc3RvY2tEYXRhLnN0b2NrKSB7XHJcbiAgICAgIHVwZGF0ZU9iai5zdG9jayA9IHN0b2NrRGF0YS5zdG9jaztcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKHN0b2NrRGF0YS5pblN0b2NrICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgdXBkYXRlT2JqLmluX3N0b2NrID0gc3RvY2tEYXRhLmluU3RvY2s7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgIC5mcm9tKCdwcm9kdWN0cycpXHJcbiAgICAgIC51cGRhdGUodXBkYXRlT2JqKVxyXG4gICAgICAuZXEoJ2lkJywgcHJvZHVjdElkKVxyXG4gICAgICAuc2VsZWN0KClcclxuICAgICAgLnNpbmdsZSgpO1xyXG4gICAgXHJcbiAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignU3VwYWJhc2UgdXBkYXRlSW52ZW50b3J5IGVycm9yOicsIGVycm9yKTtcclxuICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNvbnNvbGUubG9nKCdTdXBhYmFzZTogVXBkYXRlZCBpbnZlbnRvcnkgZm9yIHByb2R1Y3Q6JywgcHJvZHVjdElkKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGlkOiBkYXRhLmlkLFxyXG4gICAgICBuYW1lOiBkYXRhLm5hbWUsXHJcbiAgICAgIHN0b2NrOiBkYXRhLnN0b2NrLFxyXG4gICAgICBpblN0b2NrOiBkYXRhLmluX3N0b2NrLFxyXG4gICAgICB0b3RhbFN0b2NrOiBjYWxjdWxhdGVUb3RhbFN0b2NrKGRhdGEuc3RvY2spXHJcbiAgICB9O1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdTdXBhYmFzZSB1cGRhdGVJbnZlbnRvcnkgZXJyb3I6JywgZXJyb3IpO1xyXG4gICAgdGhyb3cgZXJyb3I7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBIZWxwZXIgZnVuY3Rpb25zIGZvciBpbnZlbnRvcnkgY2FsY3VsYXRpb25zXHJcbmZ1bmN0aW9uIGNhbGN1bGF0ZVRvdGFsU3RvY2soc3RvY2s6IGFueSk6IG51bWJlciB7XHJcbiAgaWYgKCFzdG9jayB8fCB0eXBlb2Ygc3RvY2sgIT09ICdvYmplY3QnKSByZXR1cm4gMDtcclxuICBcclxuICBsZXQgdG90YWwgPSAwO1xyXG4gIGZvciAoY29uc3Qgc2l6ZSBpbiBzdG9jaykge1xyXG4gICAgaWYgKHR5cGVvZiBzdG9ja1tzaXplXSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgZm9yIChjb25zdCBjb2xvciBpbiBzdG9ja1tzaXplXSkge1xyXG4gICAgICAgIHRvdGFsICs9IE51bWJlcihzdG9ja1tzaXplXVtjb2xvcl0pIHx8IDA7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHRvdGFsO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjYWxjdWxhdGVTdG9ja0J5U2l6ZShzdG9jazogYW55LCBzaXplczogc3RyaW5nW10sIGNvbG9yczogc3RyaW5nW10pOiBhbnkge1xyXG4gIGNvbnN0IHJlc3VsdDogYW55ID0ge307XHJcbiAgXHJcbiAgc2l6ZXMuZm9yRWFjaChzaXplID0+IHtcclxuICAgIHJlc3VsdFtzaXplXSA9IHt9O1xyXG4gICAgY29sb3JzLmZvckVhY2goY29sb3IgPT4ge1xyXG4gICAgICByZXN1bHRbc2l6ZV1bY29sb3JdID0gTnVtYmVyKHN0b2NrW3NpemVdPy5bY29sb3JdKSB8fCAwO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbiAgXHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuLy8gU3RvY2sgZGVkdWN0aW9uIGZ1bmN0aW9uIGZvciBvcmRlcnNcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlZHVjdFN0b2NrRnJvbU9yZGVyKG9yZGVyOiBPcmRlcik6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zb2xlLmxvZygnU3VwYWJhc2U6IERlZHVjdGluZyBzdG9jayBmb3Igb3JkZXI6Jywgb3JkZXIuaWQpO1xyXG4gICAgXHJcbiAgICAvLyBHZXQgdGhlIHByb2R1Y3RcclxuICAgIGNvbnN0IHByb2R1Y3QgPSBhd2FpdCBnZXRQcm9kdWN0KG9yZGVyLnByb2R1Y3RJZCk7XHJcbiAgICBpZiAoIXByb2R1Y3QpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignU3VwYWJhc2U6IFByb2R1Y3Qgbm90IGZvdW5kIGZvciBvcmRlcjonLCBvcmRlci5wcm9kdWN0SWQpO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIENoZWNrIGlmIHdlIGhhdmUgZW5vdWdoIHN0b2NrXHJcbiAgICBjb25zdCBjdXJyZW50U3RvY2sgPSBwcm9kdWN0LnN0b2NrPy5bb3JkZXIuc2VsZWN0ZWRTaXplXT8uW29yZGVyLnNlbGVjdGVkQ29sb3JdIHx8IDA7XHJcbiAgICBpZiAoY3VycmVudFN0b2NrIDwgb3JkZXIucXVhbnRpdHkpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignU3VwYWJhc2U6IEluc3VmZmljaWVudCBzdG9jayBmb3Igb3JkZXI6Jywge1xyXG4gICAgICAgIHByb2R1Y3RJZDogb3JkZXIucHJvZHVjdElkLFxyXG4gICAgICAgIHNpemU6IG9yZGVyLnNlbGVjdGVkU2l6ZSxcclxuICAgICAgICBjb2xvcjogb3JkZXIuc2VsZWN0ZWRDb2xvcixcclxuICAgICAgICByZXF1ZXN0ZWQ6IG9yZGVyLnF1YW50aXR5LFxyXG4gICAgICAgIGF2YWlsYWJsZTogY3VycmVudFN0b2NrXHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIERlZHVjdCB0aGUgc3RvY2tcclxuICAgIGNvbnN0IG5ld1N0b2NrID0ge1xyXG4gICAgICAuLi5wcm9kdWN0LnN0b2NrLFxyXG4gICAgICBbb3JkZXIuc2VsZWN0ZWRTaXplXToge1xyXG4gICAgICAgIC4uLnByb2R1Y3Quc3RvY2s/LltvcmRlci5zZWxlY3RlZFNpemVdLFxyXG4gICAgICAgIFtvcmRlci5zZWxlY3RlZENvbG9yXTogY3VycmVudFN0b2NrIC0gb3JkZXIucXVhbnRpdHlcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgLy8gVXBkYXRlIHRoZSBwcm9kdWN0IHN0b2NrXHJcbiAgICBjb25zdCB1cGRhdGVkUHJvZHVjdCA9IGF3YWl0IHVwZGF0ZVByb2R1Y3Qob3JkZXIucHJvZHVjdElkLCB7XHJcbiAgICAgIHN0b2NrOiBuZXdTdG9jayxcclxuICAgICAgaW5TdG9jazogY2FsY3VsYXRlVG90YWxTdG9jayhuZXdTdG9jaykgPiAwXHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgaWYgKHVwZGF0ZWRQcm9kdWN0KSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdTdXBhYmFzZTogU3VjY2Vzc2Z1bGx5IGRlZHVjdGVkIHN0b2NrIGZvciBvcmRlcjonLCBvcmRlci5pZCk7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5lcnJvcignU3VwYWJhc2U6IEZhaWxlZCB0byB1cGRhdGUgcHJvZHVjdCBzdG9jayBmb3Igb3JkZXI6Jywgb3JkZXIuaWQpO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ1N1cGFiYXNlOiBFcnJvciBkZWR1Y3Rpbmcgc3RvY2sgZm9yIG9yZGVyOicsIGVycm9yKTtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbn1cclxuXHJcbi8vIFN0b2NrIHJldHVybiBmdW5jdGlvbiBmb3IgY2FuY2VsbGVkL2RlbGV0ZWQgb3JkZXJzXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZXR1cm5TdG9ja0Zyb21PcmRlcihvcmRlcjogT3JkZXIpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICB0cnkge1xyXG4gICAgY29uc29sZS5sb2coJ1N1cGFiYXNlOiBSZXR1cm5pbmcgc3RvY2sgZm9yIG9yZGVyOicsIG9yZGVyLmlkKTtcclxuICAgIFxyXG4gICAgLy8gR2V0IHRoZSBwcm9kdWN0XHJcbiAgICBjb25zdCBwcm9kdWN0ID0gYXdhaXQgZ2V0UHJvZHVjdChvcmRlci5wcm9kdWN0SWQpO1xyXG4gICAgaWYgKCFwcm9kdWN0KSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1N1cGFiYXNlOiBQcm9kdWN0IG5vdCBmb3VuZCBmb3Igb3JkZXI6Jywgb3JkZXIucHJvZHVjdElkKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBHZXQgY3VycmVudCBzdG9ja1xyXG4gICAgY29uc3QgY3VycmVudFN0b2NrID0gcHJvZHVjdC5zdG9jaz8uW29yZGVyLnNlbGVjdGVkU2l6ZV0/LltvcmRlci5zZWxlY3RlZENvbG9yXSB8fCAwO1xyXG4gICAgXHJcbiAgICAvLyBSZXR1cm4gdGhlIHN0b2NrXHJcbiAgICBjb25zdCBuZXdTdG9jayA9IHtcclxuICAgICAgLi4ucHJvZHVjdC5zdG9jayxcclxuICAgICAgW29yZGVyLnNlbGVjdGVkU2l6ZV06IHtcclxuICAgICAgICAuLi5wcm9kdWN0LnN0b2NrPy5bb3JkZXIuc2VsZWN0ZWRTaXplXSxcclxuICAgICAgICBbb3JkZXIuc2VsZWN0ZWRDb2xvcl06IGN1cnJlbnRTdG9jayArIG9yZGVyLnF1YW50aXR5XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICBcclxuICAgIC8vIFVwZGF0ZSB0aGUgcHJvZHVjdCBzdG9ja1xyXG4gICAgY29uc3QgdXBkYXRlZFByb2R1Y3QgPSBhd2FpdCB1cGRhdGVQcm9kdWN0KG9yZGVyLnByb2R1Y3RJZCwge1xyXG4gICAgICBzdG9jazogbmV3U3RvY2ssXHJcbiAgICAgIGluU3RvY2s6IGNhbGN1bGF0ZVRvdGFsU3RvY2sobmV3U3RvY2spID4gMFxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIGlmICh1cGRhdGVkUHJvZHVjdCkge1xyXG4gICAgICBjb25zb2xlLmxvZygnU3VwYWJhc2U6IFN1Y2Nlc3NmdWxseSByZXR1cm5lZCBzdG9jayBmb3Igb3JkZXI6Jywgb3JkZXIuaWQsIHtcclxuICAgICAgICBwcm9kdWN0SWQ6IG9yZGVyLnByb2R1Y3RJZCxcclxuICAgICAgICBzaXplOiBvcmRlci5zZWxlY3RlZFNpemUsXHJcbiAgICAgICAgY29sb3I6IG9yZGVyLnNlbGVjdGVkQ29sb3IsXHJcbiAgICAgICAgcXVhbnRpdHk6IG9yZGVyLnF1YW50aXR5LFxyXG4gICAgICAgIG5ld1RvdGFsU3RvY2s6IGNhbGN1bGF0ZVRvdGFsU3RvY2sobmV3U3RvY2spXHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1N1cGFiYXNlOiBGYWlsZWQgdG8gcmV0dXJuIHByb2R1Y3Qgc3RvY2sgZm9yIG9yZGVyOicsIG9yZGVyLmlkKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdTdXBhYmFzZTogRXJyb3IgcmV0dXJuaW5nIHN0b2NrIGZvciBvcmRlcjonLCBlcnJvcik7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6WyJjcmVhdGVDbGllbnQiLCJzdXBhYmFzZVVybCIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwiLCJzdXBhYmFzZUtleSIsIk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZIiwiRXJyb3IiLCJzdXBhYmFzZSIsImNvbnZlcnREYlByb2R1Y3RUb1Byb2R1Y3QiLCJkYlByb2R1Y3QiLCJpZCIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsInByaWNlIiwib3JpZ2luYWxQcmljZSIsIm9yaWdpbmFsX3ByaWNlIiwiaW1hZ2UiLCJpbWFnZXMiLCJzdG9jayIsImNhdGVnb3J5Iiwic2l6ZXMiLCJjb2xvcnMiLCJpblN0b2NrIiwiaW5fc3RvY2siLCJzdGF0dXMiLCJyYXRpbmciLCJyZXZpZXdzIiwic2t1Iiwid2VpZ2h0IiwiZGltZW5zaW9ucyIsInRhZ3MiLCJmZWF0dXJlZCIsImNyZWF0ZWRBdCIsIkRhdGUiLCJjcmVhdGVkX2F0IiwidXBkYXRlZEF0IiwidXBkYXRlZF9hdCIsInByb2R1Y3RzQ2FjaGUiLCJwcm9kdWN0c0NhY2hlVGltZSIsIkNBQ0hFX0RVUkFUSU9OIiwiZ2V0UHJvZHVjdHMiLCJub3ciLCJjb25zb2xlIiwibG9nIiwiZGF0YSIsImVycm9yIiwiZnJvbSIsInNlbGVjdCIsIm9yZGVyIiwiYXNjZW5kaW5nIiwicHJvZHVjdHMiLCJtYXAiLCJnZXRQcm9kdWN0IiwiZXEiLCJzaW5nbGUiLCJhZGRQcm9kdWN0IiwicHJvZHVjdCIsImluc2VydCIsInVwZGF0ZVByb2R1Y3QiLCJ1bmRlZmluZWQiLCJ1cGRhdGUiLCJkZWxldGVQcm9kdWN0IiwiZGVsZXRlIiwiY29udmVydERiT3JkZXJUb09yZGVyIiwiZGJPcmRlciIsImlzT2xkU2NoZW1hIiwiaXRlbXMiLCJBcnJheSIsImlzQXJyYXkiLCJmaXJzdEl0ZW0iLCJsZW5ndGgiLCJwcm9kdWN0SWQiLCJwcm9kdWN0TmFtZSIsInByb2R1Y3RJbWFnZSIsImN1c3RvbWVyTmFtZSIsImN1c3RvbWVyUGhvbmUiLCJjdXN0b21lckVtYWlsIiwiY3VzdG9tZXJBZGRyZXNzIiwid2lsYXlhSWQiLCJ3aWxheWFOYW1lIiwic2hpcHBpbmdUeXBlIiwic2hpcHBpbmdfdHlwZSIsInNoaXBwaW5nQ29zdCIsIk51bWJlciIsInNoaXBwaW5nX2Nvc3QiLCJxdWFudGl0eSIsInNlbGVjdGVkU2l6ZSIsInNlbGVjdGVkQ29sb3IiLCJzdWJ0b3RhbCIsInRvdGFsIiwib3JkZXJEYXRlIiwib3JkZXJfZGF0ZSIsInRyYWNraW5nTnVtYmVyIiwidHJhY2tpbmdfbnVtYmVyIiwibm90ZXMiLCJwYXltZW50TWV0aG9kIiwicGF5bWVudF9tZXRob2QiLCJwYXltZW50U3RhdHVzIiwicGF5bWVudF9zdGF0dXMiLCJlc3RpbWF0ZWREZWxpdmVyeSIsInByb2R1Y3RfaWQiLCJwcm9kdWN0X25hbWUiLCJwcm9kdWN0X2ltYWdlIiwiY3VzdG9tZXJfbmFtZSIsImN1c3RvbWVyX3Bob25lIiwiY3VzdG9tZXJfZW1haWwiLCJjdXN0b21lcl9hZGRyZXNzIiwid2lsYXlhX2lkIiwid2lsYXlhX25hbWUiLCJzZWxlY3RlZF9zaXplIiwic2VsZWN0ZWRfY29sb3IiLCJlc3RpbWF0ZWRfZGVsaXZlcnkiLCJvcmRlcnNDYWNoZSIsIm9yZGVyc0NhY2hlVGltZSIsImdldE9yZGVycyIsIm9yZGVycyIsImdldE9yZGVyIiwiYWRkT3JkZXIiLCJ0b0lTT1N0cmluZyIsInVwZGF0ZU9yZGVyIiwidXBkYXRlRGF0YSIsImRlbGV0ZU9yZGVyIiwiZ2V0Q3VzdG9tZXJzIiwiYWRkQ3VzdG9tZXIiLCJjdXN0b21lciIsImdldFdpbGF5YVRhcmlmZnMiLCJ1cGRhdGVXaWxheWFUYXJpZmZzIiwidGFyaWZmcyIsIm5lcSIsImdldEludmVudG9yeSIsInRvdGFsU3RvY2siLCJjYWxjdWxhdGVUb3RhbFN0b2NrIiwic3RvY2tCeVNpemUiLCJjYWxjdWxhdGVTdG9ja0J5U2l6ZSIsInVwZGF0ZUludmVudG9yeSIsInN0b2NrRGF0YSIsInVwZGF0ZU9iaiIsInNpemUiLCJjb2xvciIsInJlc3VsdCIsImZvckVhY2giLCJkZWR1Y3RTdG9ja0Zyb21PcmRlciIsImN1cnJlbnRTdG9jayIsInJlcXVlc3RlZCIsImF2YWlsYWJsZSIsIm5ld1N0b2NrIiwidXBkYXRlZFByb2R1Y3QiLCJyZXR1cm5TdG9ja0Zyb21PcmRlciIsIm5ld1RvdGFsU3RvY2siXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/supabaseDatabase.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/next","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fproducts%2Froute&page=%2Fapi%2Fproducts%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fproducts%2Froute.ts&appDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();