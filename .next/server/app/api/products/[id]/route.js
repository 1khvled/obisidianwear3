"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/products/[id]/route";
exports.ids = ["app/api/products/[id]/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fproducts%2F%5Bid%5D%2Froute&page=%2Fapi%2Fproducts%2F%5Bid%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fproducts%2F%5Bid%5D%2Froute.ts&appDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fproducts%2F%5Bid%5D%2Froute&page=%2Fapi%2Fproducts%2F%5Bid%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fproducts%2F%5Bid%5D%2Froute.ts&appDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_HP_Desktop_projectt_src_app_api_products_id_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/products/[id]/route.ts */ \"(rsc)/./src/app/api/products/[id]/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/products/[id]/route\",\n        pathname: \"/api/products/[id]\",\n        filename: \"route\",\n        bundlePath: \"app/api/products/[id]/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projectt\\\\src\\\\app\\\\api\\\\products\\\\[id]\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_HP_Desktop_projectt_src_app_api_products_id_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/products/[id]/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZwcm9kdWN0cyUyRiU1QmlkJTVEJTJGcm91dGUmcGFnZT0lMkZhcGklMkZwcm9kdWN0cyUyRiU1QmlkJTVEJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGcHJvZHVjdHMlMkYlNUJpZCU1RCUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNIUCU1Q0Rlc2t0b3AlNUNwcm9qZWN0dCU1Q3NyYyU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q1VzZXJzJTVDSFAlNUNEZXNrdG9wJTVDcHJvamVjdHQmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9c3RhbmRhbG9uZSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ3lCO0FBQ3RHO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsdUdBQXVHO0FBQy9HO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDNko7O0FBRTdKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2JzaWRpYW4td2Vhci8/OWI0NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxIUFxcXFxEZXNrdG9wXFxcXHByb2plY3R0XFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXHByb2R1Y3RzXFxcXFtpZF1cXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwic3RhbmRhbG9uZVwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9wcm9kdWN0cy9baWRdL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvcHJvZHVjdHMvW2lkXVwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvcHJvZHVjdHMvW2lkXS9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkM6XFxcXFVzZXJzXFxcXEhQXFxcXERlc2t0b3BcXFxccHJvamVjdHRcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxccHJvZHVjdHNcXFxcW2lkXVxcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBoZWFkZXJIb29rcywgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9wcm9kdWN0cy9baWRdL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCwgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fproducts%2F%5Bid%5D%2Froute&page=%2Fapi%2Fproducts%2F%5Bid%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fproducts%2F%5Bid%5D%2Froute.ts&appDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/products/[id]/route.ts":
/*!********************************************!*\
  !*** ./src/app/api/products/[id]/route.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DELETE: () => (/* binding */ DELETE),\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   PUT: () => (/* binding */ PUT),\n/* harmony export */   runtime: () => (/* binding */ runtime)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var _lib_supabaseDatabase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/supabaseDatabase */ \"(rsc)/./src/lib/supabaseDatabase.ts\");\n/* harmony import */ var _lib_authMiddleware__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/authMiddleware */ \"(rsc)/./src/lib/authMiddleware.ts\");\n\n\n\n// Ensure we use Node.js runtime for Supabase compatibility\nconst runtime = \"nodejs\";\n// GET /api/products/[id] - Get single product\nasync function GET(request, { params }) {\n    try {\n        const { id } = params;\n        // Check if Supabase is available\n        if (false) {}\n        const product = await (0,_lib_supabaseDatabase__WEBPACK_IMPORTED_MODULE_1__.getProduct)(id);\n        if (!product) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: \"Product not found\"\n            }, {\n                status: 404\n            });\n        }\n        console.log(\"Products API: GET single product:\", id);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: true,\n            data: product,\n            timestamp: Date.now()\n        });\n    } catch (error) {\n        console.error(\"Products API: GET single error:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: false,\n            error: \"Failed to fetch product\"\n        }, {\n            status: 500\n        });\n    }\n}\n// PUT /api/products/[id] - Update product (PROTECTED)\nconst PUT = (0,_lib_authMiddleware__WEBPACK_IMPORTED_MODULE_2__.withAuth)(async (request, { params })=>{\n    try {\n        const { id } = params;\n        const updateData = await request.json();\n        // Check if Supabase is available\n        if (false) {}\n        const updatedProduct = await (0,_lib_supabaseDatabase__WEBPACK_IMPORTED_MODULE_1__.updateProduct)(id, {\n            ...updateData,\n            updatedAt: new Date()\n        });\n        if (!updatedProduct) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: \"Product not found\"\n            }, {\n                status: 404\n            });\n        }\n        console.log(\"Products API: PUT request - updated product:\", id);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: true,\n            data: updatedProduct,\n            message: \"Product updated successfully\",\n            timestamp: Date.now()\n        });\n    } catch (error) {\n        console.error(\"Products API: PUT error:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: false,\n            error: \"Failed to update product\"\n        }, {\n            status: 500\n        });\n    }\n});\n// DELETE /api/products/[id] - Delete product (PROTECTED)\nconst DELETE = (0,_lib_authMiddleware__WEBPACK_IMPORTED_MODULE_2__.withAuth)(async (request, { params })=>{\n    try {\n        const { id } = params;\n        // Check if Supabase is available\n        if (false) {}\n        const deletedProduct = await (0,_lib_supabaseDatabase__WEBPACK_IMPORTED_MODULE_1__.getProduct)(id);\n        if (!deletedProduct) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: \"Product not found\"\n            }, {\n                status: 404\n            });\n        }\n        const success = await (0,_lib_supabaseDatabase__WEBPACK_IMPORTED_MODULE_1__.deleteProduct)(id);\n        if (!success) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: \"Failed to delete product\"\n            }, {\n                status: 500\n            });\n        }\n        console.log(\"Products API: DELETE request - deleted product:\", id);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: true,\n            data: deletedProduct,\n            message: \"Product deleted successfully\",\n            timestamp: Date.now()\n        });\n    } catch (error) {\n        console.error(\"Products API: DELETE error:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: false,\n            error: \"Failed to delete product\"\n        }, {\n            status: 500\n        });\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/products/[id]/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/authMiddleware.ts":
/*!***********************************!*\
  !*** ./src/lib/authMiddleware.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authenticateRequest: () => (/* binding */ authenticateRequest),\n/* harmony export */   generateApiToken: () => (/* binding */ generateApiToken),\n/* harmony export */   withAuth: () => (/* binding */ withAuth)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var _rateLimiter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rateLimiter */ \"(rsc)/./src/lib/rateLimiter.ts\");\n\n\n// Simple authentication middleware for API routes\nfunction authenticateRequest(request) {\n    // Get authorization header\n    const authHeader = request.headers.get(\"authorization\");\n    if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n        return false;\n    }\n    // Extract token\n    const token = authHeader.substring(7);\n    // Simple token validation (in production, use JWT or proper session validation)\n    const expectedToken = process.env.API_AUTH_TOKEN || \"obsidian-api-token-2025\";\n    return token === expectedToken;\n}\n// Middleware wrapper for protected API routes\nfunction withAuth(handler) {\n    return async (request, ...args)=>{\n        // Skip auth for public routes\n        const url = new URL(request.url);\n        const publicRoutes = [\n            \"/api/maintenance\",\n            \"/api/test-db\",\n            \"/api/test-supabase\"\n        ];\n        if (publicRoutes.some((route)=>url.pathname.startsWith(route))) {\n            return handler(request, ...args);\n        }\n        // Get client IP for rate limiting\n        const clientIP = request.ip || request.headers.get(\"x-forwarded-for\") || \"unknown\";\n        // Check rate limit\n        const rateLimitResult = (0,_rateLimiter__WEBPACK_IMPORTED_MODULE_1__.checkRateLimit)(clientIP, _rateLimiter__WEBPACK_IMPORTED_MODULE_1__.apiRateLimiter);\n        if (!rateLimitResult.allowed) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: \"Too Many Requests\",\n                message: \"Rate limit exceeded. Please try again later.\"\n            }, {\n                status: 429,\n                headers: rateLimitResult.headers\n            });\n        }\n        // Check authentication\n        if (!authenticateRequest(request)) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: \"Unauthorized\",\n                message: \"Authentication required\"\n            }, {\n                status: 401,\n                headers: rateLimitResult.headers\n            });\n        }\n        return handler(request, ...args);\n    };\n}\n// Generate API token for admin\nfunction generateApiToken() {\n    return process.env.API_AUTH_TOKEN || \"obsidian-api-token-2025\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2F1dGhNaWRkbGV3YXJlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXdEO0FBQ087QUFFL0Qsa0RBQWtEO0FBQzNDLFNBQVNHLG9CQUFvQkMsT0FBb0I7SUFDdEQsMkJBQTJCO0lBQzNCLE1BQU1DLGFBQWFELFFBQVFFLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDO0lBRXZDLElBQUksQ0FBQ0YsY0FBYyxDQUFDQSxXQUFXRyxVQUFVLENBQUMsWUFBWTtRQUNwRCxPQUFPO0lBQ1Q7SUFFQSxnQkFBZ0I7SUFDaEIsTUFBTUMsUUFBUUosV0FBV0ssU0FBUyxDQUFDO0lBRW5DLGdGQUFnRjtJQUNoRixNQUFNQyxnQkFBZ0JDLFFBQVFDLEdBQUcsQ0FBQ0MsY0FBYyxJQUFJO0lBRXBELE9BQU9MLFVBQVVFO0FBQ25CO0FBRUEsOENBQThDO0FBQ3ZDLFNBQVNJLFNBQVNDLE9BQWlCO0lBQ3hDLE9BQU8sT0FBT1osU0FBc0IsR0FBR2E7UUFDckMsOEJBQThCO1FBQzlCLE1BQU1DLE1BQU0sSUFBSUMsSUFBSWYsUUFBUWMsR0FBRztRQUMvQixNQUFNRSxlQUFlO1lBQUM7WUFBb0I7WUFBZ0I7U0FBcUI7UUFFL0UsSUFBSUEsYUFBYUMsSUFBSSxDQUFDQyxDQUFBQSxRQUFTSixJQUFJSyxRQUFRLENBQUNmLFVBQVUsQ0FBQ2MsU0FBUztZQUM5RCxPQUFPTixRQUFRWixZQUFZYTtRQUM3QjtRQUVBLGtDQUFrQztRQUNsQyxNQUFNTyxXQUFXcEIsUUFBUXFCLEVBQUUsSUFBSXJCLFFBQVFFLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLHNCQUFzQjtRQUV6RSxtQkFBbUI7UUFDbkIsTUFBTW1CLGtCQUFrQnpCLDREQUFjQSxDQUFDdUIsVUFBVXRCLHdEQUFjQTtRQUMvRCxJQUFJLENBQUN3QixnQkFBZ0JDLE9BQU8sRUFBRTtZQUM1QixPQUFPM0Isa0ZBQVlBLENBQUM0QixJQUFJLENBQ3RCO2dCQUNFQyxTQUFTO2dCQUNUQyxPQUFPO2dCQUNQQyxTQUFTO1lBQ1gsR0FDQTtnQkFDRUMsUUFBUTtnQkFDUjFCLFNBQVNvQixnQkFBZ0JwQixPQUFPO1lBQ2xDO1FBRUo7UUFFQSx1QkFBdUI7UUFDdkIsSUFBSSxDQUFDSCxvQkFBb0JDLFVBQVU7WUFDakMsT0FBT0osa0ZBQVlBLENBQUM0QixJQUFJLENBQ3RCO2dCQUNFQyxTQUFTO2dCQUNUQyxPQUFPO2dCQUNQQyxTQUFTO1lBQ1gsR0FDQTtnQkFDRUMsUUFBUTtnQkFDUjFCLFNBQVNvQixnQkFBZ0JwQixPQUFPO1lBQ2xDO1FBRUo7UUFFQSxPQUFPVSxRQUFRWixZQUFZYTtJQUM3QjtBQUNGO0FBRUEsK0JBQStCO0FBQ3hCLFNBQVNnQjtJQUNkLE9BQU9yQixRQUFRQyxHQUFHLENBQUNDLGNBQWMsSUFBSTtBQUN2QyIsInNvdXJjZXMiOlsid2VicGFjazovL29ic2lkaWFuLXdlYXIvLi9zcmMvbGliL2F1dGhNaWRkbGV3YXJlLnRzP2IyNjEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcclxuaW1wb3J0IHsgY2hlY2tSYXRlTGltaXQsIGFwaVJhdGVMaW1pdGVyIH0gZnJvbSAnLi9yYXRlTGltaXRlcic7XHJcblxyXG4vLyBTaW1wbGUgYXV0aGVudGljYXRpb24gbWlkZGxld2FyZSBmb3IgQVBJIHJvdXRlc1xyXG5leHBvcnQgZnVuY3Rpb24gYXV0aGVudGljYXRlUmVxdWVzdChyZXF1ZXN0OiBOZXh0UmVxdWVzdCk6IGJvb2xlYW4ge1xyXG4gIC8vIEdldCBhdXRob3JpemF0aW9uIGhlYWRlclxyXG4gIGNvbnN0IGF1dGhIZWFkZXIgPSByZXF1ZXN0LmhlYWRlcnMuZ2V0KCdhdXRob3JpemF0aW9uJyk7XHJcbiAgXHJcbiAgaWYgKCFhdXRoSGVhZGVyIHx8ICFhdXRoSGVhZGVyLnN0YXJ0c1dpdGgoJ0JlYXJlciAnKSkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgLy8gRXh0cmFjdCB0b2tlblxyXG4gIGNvbnN0IHRva2VuID0gYXV0aEhlYWRlci5zdWJzdHJpbmcoNyk7XHJcbiAgXHJcbiAgLy8gU2ltcGxlIHRva2VuIHZhbGlkYXRpb24gKGluIHByb2R1Y3Rpb24sIHVzZSBKV1Qgb3IgcHJvcGVyIHNlc3Npb24gdmFsaWRhdGlvbilcclxuICBjb25zdCBleHBlY3RlZFRva2VuID0gcHJvY2Vzcy5lbnYuQVBJX0FVVEhfVE9LRU4gfHwgJ29ic2lkaWFuLWFwaS10b2tlbi0yMDI1JztcclxuICBcclxuICByZXR1cm4gdG9rZW4gPT09IGV4cGVjdGVkVG9rZW47XHJcbn1cclxuXHJcbi8vIE1pZGRsZXdhcmUgd3JhcHBlciBmb3IgcHJvdGVjdGVkIEFQSSByb3V0ZXNcclxuZXhwb3J0IGZ1bmN0aW9uIHdpdGhBdXRoKGhhbmRsZXI6IEZ1bmN0aW9uKSB7XHJcbiAgcmV0dXJuIGFzeW5jIChyZXF1ZXN0OiBOZXh0UmVxdWVzdCwgLi4uYXJnczogYW55W10pID0+IHtcclxuICAgIC8vIFNraXAgYXV0aCBmb3IgcHVibGljIHJvdXRlc1xyXG4gICAgY29uc3QgdXJsID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XHJcbiAgICBjb25zdCBwdWJsaWNSb3V0ZXMgPSBbJy9hcGkvbWFpbnRlbmFuY2UnLCAnL2FwaS90ZXN0LWRiJywgJy9hcGkvdGVzdC1zdXBhYmFzZSddO1xyXG4gICAgXHJcbiAgICBpZiAocHVibGljUm91dGVzLnNvbWUocm91dGUgPT4gdXJsLnBhdGhuYW1lLnN0YXJ0c1dpdGgocm91dGUpKSkge1xyXG4gICAgICByZXR1cm4gaGFuZGxlcihyZXF1ZXN0LCAuLi5hcmdzKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBHZXQgY2xpZW50IElQIGZvciByYXRlIGxpbWl0aW5nXHJcbiAgICBjb25zdCBjbGllbnRJUCA9IHJlcXVlc3QuaXAgfHwgcmVxdWVzdC5oZWFkZXJzLmdldCgneC1mb3J3YXJkZWQtZm9yJykgfHwgJ3Vua25vd24nO1xyXG4gICAgXHJcbiAgICAvLyBDaGVjayByYXRlIGxpbWl0XHJcbiAgICBjb25zdCByYXRlTGltaXRSZXN1bHQgPSBjaGVja1JhdGVMaW1pdChjbGllbnRJUCwgYXBpUmF0ZUxpbWl0ZXIpO1xyXG4gICAgaWYgKCFyYXRlTGltaXRSZXN1bHQuYWxsb3dlZCkge1xyXG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXHJcbiAgICAgICAgeyBcclxuICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLCBcclxuICAgICAgICAgIGVycm9yOiAnVG9vIE1hbnkgUmVxdWVzdHMnLFxyXG4gICAgICAgICAgbWVzc2FnZTogJ1JhdGUgbGltaXQgZXhjZWVkZWQuIFBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIuJyBcclxuICAgICAgICB9LFxyXG4gICAgICAgIHsgXHJcbiAgICAgICAgICBzdGF0dXM6IDQyOSxcclxuICAgICAgICAgIGhlYWRlcnM6IHJhdGVMaW1pdFJlc3VsdC5oZWFkZXJzXHJcbiAgICAgICAgfVxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENoZWNrIGF1dGhlbnRpY2F0aW9uXHJcbiAgICBpZiAoIWF1dGhlbnRpY2F0ZVJlcXVlc3QocmVxdWVzdCkpIHtcclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICAgIHsgXHJcbiAgICAgICAgICBzdWNjZXNzOiBmYWxzZSwgXHJcbiAgICAgICAgICBlcnJvcjogJ1VuYXV0aG9yaXplZCcsXHJcbiAgICAgICAgICBtZXNzYWdlOiAnQXV0aGVudGljYXRpb24gcmVxdWlyZWQnIFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgeyBcclxuICAgICAgICAgIHN0YXR1czogNDAxLFxyXG4gICAgICAgICAgaGVhZGVyczogcmF0ZUxpbWl0UmVzdWx0LmhlYWRlcnNcclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGhhbmRsZXIocmVxdWVzdCwgLi4uYXJncyk7XHJcbiAgfTtcclxufVxyXG5cclxuLy8gR2VuZXJhdGUgQVBJIHRva2VuIGZvciBhZG1pblxyXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVBcGlUb2tlbigpOiBzdHJpbmcge1xyXG4gIHJldHVybiBwcm9jZXNzLmVudi5BUElfQVVUSF9UT0tFTiB8fCAnb2JzaWRpYW4tYXBpLXRva2VuLTIwMjUnO1xyXG59XHJcbiJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJjaGVja1JhdGVMaW1pdCIsImFwaVJhdGVMaW1pdGVyIiwiYXV0aGVudGljYXRlUmVxdWVzdCIsInJlcXVlc3QiLCJhdXRoSGVhZGVyIiwiaGVhZGVycyIsImdldCIsInN0YXJ0c1dpdGgiLCJ0b2tlbiIsInN1YnN0cmluZyIsImV4cGVjdGVkVG9rZW4iLCJwcm9jZXNzIiwiZW52IiwiQVBJX0FVVEhfVE9LRU4iLCJ3aXRoQXV0aCIsImhhbmRsZXIiLCJhcmdzIiwidXJsIiwiVVJMIiwicHVibGljUm91dGVzIiwic29tZSIsInJvdXRlIiwicGF0aG5hbWUiLCJjbGllbnRJUCIsImlwIiwicmF0ZUxpbWl0UmVzdWx0IiwiYWxsb3dlZCIsImpzb24iLCJzdWNjZXNzIiwiZXJyb3IiLCJtZXNzYWdlIiwic3RhdHVzIiwiZ2VuZXJhdGVBcGlUb2tlbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/authMiddleware.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/rateLimiter.ts":
/*!********************************!*\
  !*** ./src/lib/rateLimiter.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiRateLimiter: () => (/* binding */ apiRateLimiter),\n/* harmony export */   authRateLimiter: () => (/* binding */ authRateLimiter),\n/* harmony export */   checkRateLimit: () => (/* binding */ checkRateLimit)\n/* harmony export */ });\n// Simple in-memory rate limiter\nclass RateLimiter {\n    constructor(windowMs = 60000, maxRequests = 100){\n        this.requests = new Map();\n        this.windowMs = windowMs;\n        this.maxRequests = maxRequests;\n    }\n    // Check if request is allowed\n    isAllowed(identifier) {\n        const now = Date.now();\n        const entry = this.requests.get(identifier);\n        if (!entry || now > entry.resetTime) {\n            // Create new entry or reset expired entry\n            this.requests.set(identifier, {\n                count: 1,\n                resetTime: now + this.windowMs\n            });\n            return {\n                allowed: true,\n                remaining: this.maxRequests - 1,\n                resetTime: now + this.windowMs\n            };\n        }\n        if (entry.count >= this.maxRequests) {\n            return {\n                allowed: false,\n                remaining: 0,\n                resetTime: entry.resetTime\n            };\n        }\n        // Increment count\n        entry.count++;\n        this.requests.set(identifier, entry);\n        return {\n            allowed: true,\n            remaining: this.maxRequests - entry.count,\n            resetTime: entry.resetTime\n        };\n    }\n    // Clean up expired entries\n    cleanup() {\n        const now = Date.now();\n        for (const [key, entry] of this.requests.entries()){\n            if (now > entry.resetTime) {\n                this.requests.delete(key);\n            }\n        }\n    }\n}\n// Create rate limiter instances\nconst apiRateLimiter = new RateLimiter(60000, 100); // 100 requests per minute\nconst authRateLimiter = new RateLimiter(300000, 5); // 5 login attempts per 5 minutes\n// Rate limiting middleware\nfunction checkRateLimit(identifier, limiter) {\n    const result = limiter.isAllowed(identifier);\n    // Clean up expired entries periodically\n    if (Math.random() < 0.01) {\n        limiter.cleanup();\n    }\n    const headers = {\n        \"X-RateLimit-Limit\": limiter[\"maxRequests\"].toString(),\n        \"X-RateLimit-Remaining\": result.remaining.toString(),\n        \"X-RateLimit-Reset\": new Date(result.resetTime).toISOString()\n    };\n    return {\n        allowed: result.allowed,\n        headers\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3JhdGVMaW1pdGVyLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGdDQUFnQztBQU1oQyxNQUFNQTtJQUtKQyxZQUFZQyxXQUFtQixLQUFLLEVBQUVDLGNBQXNCLEdBQUcsQ0FBRTthQUp6REMsV0FBd0MsSUFBSUM7UUFLbEQsSUFBSSxDQUFDSCxRQUFRLEdBQUdBO1FBQ2hCLElBQUksQ0FBQ0MsV0FBVyxHQUFHQTtJQUNyQjtJQUVBLDhCQUE4QjtJQUM5QkcsVUFBVUMsVUFBa0IsRUFBOEQ7UUFDeEYsTUFBTUMsTUFBTUMsS0FBS0QsR0FBRztRQUNwQixNQUFNRSxRQUFRLElBQUksQ0FBQ04sUUFBUSxDQUFDTyxHQUFHLENBQUNKO1FBRWhDLElBQUksQ0FBQ0csU0FBU0YsTUFBTUUsTUFBTUUsU0FBUyxFQUFFO1lBQ25DLDBDQUEwQztZQUMxQyxJQUFJLENBQUNSLFFBQVEsQ0FBQ1MsR0FBRyxDQUFDTixZQUFZO2dCQUM1Qk8sT0FBTztnQkFDUEYsV0FBV0osTUFBTSxJQUFJLENBQUNOLFFBQVE7WUFDaEM7WUFFQSxPQUFPO2dCQUNMYSxTQUFTO2dCQUNUQyxXQUFXLElBQUksQ0FBQ2IsV0FBVyxHQUFHO2dCQUM5QlMsV0FBV0osTUFBTSxJQUFJLENBQUNOLFFBQVE7WUFDaEM7UUFDRjtRQUVBLElBQUlRLE1BQU1JLEtBQUssSUFBSSxJQUFJLENBQUNYLFdBQVcsRUFBRTtZQUNuQyxPQUFPO2dCQUNMWSxTQUFTO2dCQUNUQyxXQUFXO2dCQUNYSixXQUFXRixNQUFNRSxTQUFTO1lBQzVCO1FBQ0Y7UUFFQSxrQkFBa0I7UUFDbEJGLE1BQU1JLEtBQUs7UUFDWCxJQUFJLENBQUNWLFFBQVEsQ0FBQ1MsR0FBRyxDQUFDTixZQUFZRztRQUU5QixPQUFPO1lBQ0xLLFNBQVM7WUFDVEMsV0FBVyxJQUFJLENBQUNiLFdBQVcsR0FBR08sTUFBTUksS0FBSztZQUN6Q0YsV0FBV0YsTUFBTUUsU0FBUztRQUM1QjtJQUNGO0lBRUEsMkJBQTJCO0lBQzNCSyxVQUFnQjtRQUNkLE1BQU1ULE1BQU1DLEtBQUtELEdBQUc7UUFDcEIsS0FBSyxNQUFNLENBQUNVLEtBQUtSLE1BQU0sSUFBSSxJQUFJLENBQUNOLFFBQVEsQ0FBQ2UsT0FBTyxHQUFJO1lBQ2xELElBQUlYLE1BQU1FLE1BQU1FLFNBQVMsRUFBRTtnQkFDekIsSUFBSSxDQUFDUixRQUFRLENBQUNnQixNQUFNLENBQUNGO1lBQ3ZCO1FBQ0Y7SUFDRjtBQUNGO0FBRUEsZ0NBQWdDO0FBQ3pCLE1BQU1HLGlCQUFpQixJQUFJckIsWUFBWSxPQUFPLEtBQUssQ0FBQywwQkFBMEI7QUFDOUUsTUFBTXNCLGtCQUFrQixJQUFJdEIsWUFBWSxRQUFRLEdBQUcsQ0FBQyxpQ0FBaUM7QUFFNUYsMkJBQTJCO0FBQ3BCLFNBQVN1QixlQUFlaEIsVUFBa0IsRUFBRWlCLE9BQW9CO0lBQ3JFLE1BQU1DLFNBQVNELFFBQVFsQixTQUFTLENBQUNDO0lBRWpDLHdDQUF3QztJQUN4QyxJQUFJbUIsS0FBS0MsTUFBTSxLQUFLLE1BQU07UUFDeEJILFFBQVFQLE9BQU87SUFDakI7SUFFQSxNQUFNVyxVQUFVO1FBQ2QscUJBQXFCSixPQUFPLENBQUMsY0FBYyxDQUFDSyxRQUFRO1FBQ3BELHlCQUF5QkosT0FBT1QsU0FBUyxDQUFDYSxRQUFRO1FBQ2xELHFCQUFxQixJQUFJcEIsS0FBS2dCLE9BQU9iLFNBQVMsRUFBRWtCLFdBQVc7SUFDN0Q7SUFFQSxPQUFPO1FBQ0xmLFNBQVNVLE9BQU9WLE9BQU87UUFDdkJhO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL29ic2lkaWFuLXdlYXIvLi9zcmMvbGliL3JhdGVMaW1pdGVyLnRzP2Y4MWIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU2ltcGxlIGluLW1lbW9yeSByYXRlIGxpbWl0ZXJcclxuaW50ZXJmYWNlIFJhdGVMaW1pdEVudHJ5IHtcclxuICBjb3VudDogbnVtYmVyO1xyXG4gIHJlc2V0VGltZTogbnVtYmVyO1xyXG59XHJcblxyXG5jbGFzcyBSYXRlTGltaXRlciB7XHJcbiAgcHJpdmF0ZSByZXF1ZXN0czogTWFwPHN0cmluZywgUmF0ZUxpbWl0RW50cnk+ID0gbmV3IE1hcCgpO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgd2luZG93TXM6IG51bWJlcjtcclxuICBwcml2YXRlIHJlYWRvbmx5IG1heFJlcXVlc3RzOiBudW1iZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHdpbmRvd01zOiBudW1iZXIgPSA2MDAwMCwgbWF4UmVxdWVzdHM6IG51bWJlciA9IDEwMCkge1xyXG4gICAgdGhpcy53aW5kb3dNcyA9IHdpbmRvd01zO1xyXG4gICAgdGhpcy5tYXhSZXF1ZXN0cyA9IG1heFJlcXVlc3RzO1xyXG4gIH1cclxuXHJcbiAgLy8gQ2hlY2sgaWYgcmVxdWVzdCBpcyBhbGxvd2VkXHJcbiAgaXNBbGxvd2VkKGlkZW50aWZpZXI6IHN0cmluZyk6IHsgYWxsb3dlZDogYm9vbGVhbjsgcmVtYWluaW5nOiBudW1iZXI7IHJlc2V0VGltZTogbnVtYmVyIH0ge1xyXG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcclxuICAgIGNvbnN0IGVudHJ5ID0gdGhpcy5yZXF1ZXN0cy5nZXQoaWRlbnRpZmllcik7XHJcblxyXG4gICAgaWYgKCFlbnRyeSB8fCBub3cgPiBlbnRyeS5yZXNldFRpbWUpIHtcclxuICAgICAgLy8gQ3JlYXRlIG5ldyBlbnRyeSBvciByZXNldCBleHBpcmVkIGVudHJ5XHJcbiAgICAgIHRoaXMucmVxdWVzdHMuc2V0KGlkZW50aWZpZXIsIHtcclxuICAgICAgICBjb3VudDogMSxcclxuICAgICAgICByZXNldFRpbWU6IG5vdyArIHRoaXMud2luZG93TXNcclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGFsbG93ZWQ6IHRydWUsXHJcbiAgICAgICAgcmVtYWluaW5nOiB0aGlzLm1heFJlcXVlc3RzIC0gMSxcclxuICAgICAgICByZXNldFRpbWU6IG5vdyArIHRoaXMud2luZG93TXNcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZW50cnkuY291bnQgPj0gdGhpcy5tYXhSZXF1ZXN0cykge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGFsbG93ZWQ6IGZhbHNlLFxyXG4gICAgICAgIHJlbWFpbmluZzogMCxcclxuICAgICAgICByZXNldFRpbWU6IGVudHJ5LnJlc2V0VGltZVxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEluY3JlbWVudCBjb3VudFxyXG4gICAgZW50cnkuY291bnQrKztcclxuICAgIHRoaXMucmVxdWVzdHMuc2V0KGlkZW50aWZpZXIsIGVudHJ5KTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBhbGxvd2VkOiB0cnVlLFxyXG4gICAgICByZW1haW5pbmc6IHRoaXMubWF4UmVxdWVzdHMgLSBlbnRyeS5jb3VudCxcclxuICAgICAgcmVzZXRUaW1lOiBlbnRyeS5yZXNldFRpbWVcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvLyBDbGVhbiB1cCBleHBpcmVkIGVudHJpZXNcclxuICBjbGVhbnVwKCk6IHZvaWQge1xyXG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcclxuICAgIGZvciAoY29uc3QgW2tleSwgZW50cnldIG9mIHRoaXMucmVxdWVzdHMuZW50cmllcygpKSB7XHJcbiAgICAgIGlmIChub3cgPiBlbnRyeS5yZXNldFRpbWUpIHtcclxuICAgICAgICB0aGlzLnJlcXVlc3RzLmRlbGV0ZShrZXkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vLyBDcmVhdGUgcmF0ZSBsaW1pdGVyIGluc3RhbmNlc1xyXG5leHBvcnQgY29uc3QgYXBpUmF0ZUxpbWl0ZXIgPSBuZXcgUmF0ZUxpbWl0ZXIoNjAwMDAsIDEwMCk7IC8vIDEwMCByZXF1ZXN0cyBwZXIgbWludXRlXHJcbmV4cG9ydCBjb25zdCBhdXRoUmF0ZUxpbWl0ZXIgPSBuZXcgUmF0ZUxpbWl0ZXIoMzAwMDAwLCA1KTsgLy8gNSBsb2dpbiBhdHRlbXB0cyBwZXIgNSBtaW51dGVzXHJcblxyXG4vLyBSYXRlIGxpbWl0aW5nIG1pZGRsZXdhcmVcclxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrUmF0ZUxpbWl0KGlkZW50aWZpZXI6IHN0cmluZywgbGltaXRlcjogUmF0ZUxpbWl0ZXIpOiB7IGFsbG93ZWQ6IGJvb2xlYW47IGhlYWRlcnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gfSB7XHJcbiAgY29uc3QgcmVzdWx0ID0gbGltaXRlci5pc0FsbG93ZWQoaWRlbnRpZmllcik7XHJcbiAgXHJcbiAgLy8gQ2xlYW4gdXAgZXhwaXJlZCBlbnRyaWVzIHBlcmlvZGljYWxseVxyXG4gIGlmIChNYXRoLnJhbmRvbSgpIDwgMC4wMSkgeyAvLyAxJSBjaGFuY2VcclxuICAgIGxpbWl0ZXIuY2xlYW51cCgpO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgaGVhZGVycyA9IHtcclxuICAgICdYLVJhdGVMaW1pdC1MaW1pdCc6IGxpbWl0ZXJbJ21heFJlcXVlc3RzJ10udG9TdHJpbmcoKSxcclxuICAgICdYLVJhdGVMaW1pdC1SZW1haW5pbmcnOiByZXN1bHQucmVtYWluaW5nLnRvU3RyaW5nKCksXHJcbiAgICAnWC1SYXRlTGltaXQtUmVzZXQnOiBuZXcgRGF0ZShyZXN1bHQucmVzZXRUaW1lKS50b0lTT1N0cmluZygpXHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGFsbG93ZWQ6IHJlc3VsdC5hbGxvd2VkLFxyXG4gICAgaGVhZGVyc1xyXG4gIH07XHJcbn1cclxuIl0sIm5hbWVzIjpbIlJhdGVMaW1pdGVyIiwiY29uc3RydWN0b3IiLCJ3aW5kb3dNcyIsIm1heFJlcXVlc3RzIiwicmVxdWVzdHMiLCJNYXAiLCJpc0FsbG93ZWQiLCJpZGVudGlmaWVyIiwibm93IiwiRGF0ZSIsImVudHJ5IiwiZ2V0IiwicmVzZXRUaW1lIiwic2V0IiwiY291bnQiLCJhbGxvd2VkIiwicmVtYWluaW5nIiwiY2xlYW51cCIsImtleSIsImVudHJpZXMiLCJkZWxldGUiLCJhcGlSYXRlTGltaXRlciIsImF1dGhSYXRlTGltaXRlciIsImNoZWNrUmF0ZUxpbWl0IiwibGltaXRlciIsInJlc3VsdCIsIk1hdGgiLCJyYW5kb20iLCJoZWFkZXJzIiwidG9TdHJpbmciLCJ0b0lTT1N0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/rateLimiter.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/supabaseDatabase.ts":
/*!*************************************!*\
  !*** ./src/lib/supabaseDatabase.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addCustomer: () => (/* binding */ addCustomer),\n/* harmony export */   addOrder: () => (/* binding */ addOrder),\n/* harmony export */   addProduct: () => (/* binding */ addProduct),\n/* harmony export */   clearProductsCache: () => (/* binding */ clearProductsCache),\n/* harmony export */   deductStockFromOrder: () => (/* binding */ deductStockFromOrder),\n/* harmony export */   deleteOrder: () => (/* binding */ deleteOrder),\n/* harmony export */   deleteProduct: () => (/* binding */ deleteProduct),\n/* harmony export */   getCustomers: () => (/* binding */ getCustomers),\n/* harmony export */   getInventory: () => (/* binding */ getInventory),\n/* harmony export */   getMaintenanceSettings: () => (/* binding */ getMaintenanceSettings),\n/* harmony export */   getOrder: () => (/* binding */ getOrder),\n/* harmony export */   getOrders: () => (/* binding */ getOrders),\n/* harmony export */   getProduct: () => (/* binding */ getProduct),\n/* harmony export */   getProducts: () => (/* binding */ getProducts),\n/* harmony export */   getWilayaTariffs: () => (/* binding */ getWilayaTariffs),\n/* harmony export */   supabase: () => (/* binding */ supabase),\n/* harmony export */   updateInventory: () => (/* binding */ updateInventory),\n/* harmony export */   updateMaintenanceSettings: () => (/* binding */ updateMaintenanceSettings),\n/* harmony export */   updateOrder: () => (/* binding */ updateOrder),\n/* harmony export */   updateProduct: () => (/* binding */ updateProduct),\n/* harmony export */   updateWilayaTariffs: () => (/* binding */ updateWilayaTariffs)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n// Database service using Supabase (free tier)\n// This provides persistent storage with a real database\n\n// Supabase configuration - MUST use environment variables\nconst supabaseUrl = \"https://twlegtqcyydgjkycxngw.supabase.co\";\nconst supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InR3bGVndHFjeXlkZ2preWN4bmd3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTcxNzQ2MDAsImV4cCI6MjA3Mjc1MDYwMH0.uD9GD_ksHCDgmmPAgR7fcLUAJHRJtTkT-J-SVjU-WR0\";\nif (!supabaseUrl || !supabaseKey) {\n    throw new Error(\"Missing Supabase environment variables. Please set NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY\");\n}\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseKey);\n// Export the supabase client for direct use\n\n// Helper function to convert database product to Product interface\nfunction convertDbProductToProduct(dbProduct) {\n    // Debug logging\n    console.log(\"\\uD83D\\uDD0D DEBUG: Raw price from DB:\", dbProduct.price, \"Type:\", typeof dbProduct.price);\n    console.log(\"\\uD83D\\uDD0D DEBUG: Parsed price:\", parseFloat(dbProduct.price), \"Type:\", typeof parseFloat(dbProduct.price));\n    const convertedProduct = {\n        id: dbProduct.id,\n        name: dbProduct.name,\n        description: dbProduct.description,\n        price: parseFloat(dbProduct.price),\n        originalPrice: dbProduct.original_price ? parseFloat(dbProduct.original_price) : undefined,\n        image: dbProduct.image,\n        images: dbProduct.images || [],\n        stock: dbProduct.stock || {},\n        category: dbProduct.category,\n        sizes: dbProduct.sizes || [],\n        colors: dbProduct.colors || [],\n        inStock: dbProduct.in_stock,\n        rating: parseFloat(dbProduct.rating || 0),\n        reviews: dbProduct.reviews || 0,\n        sku: dbProduct.sku,\n        weight: dbProduct.weight ? parseFloat(dbProduct.weight) : undefined,\n        dimensions: dbProduct.dimensions,\n        tags: dbProduct.tags || [],\n        featured: dbProduct.featured || false,\n        sizeChartCategory: dbProduct.size_chart_category || \"T-Shirts\",\n        customSizeChart: dbProduct.custom_size_chart || undefined,\n        useCustomSizeChart: dbProduct.use_custom_size_chart || false,\n        createdAt: new Date(dbProduct.created_at),\n        updatedAt: new Date(dbProduct.updated_at)\n    };\n    console.log(\"\\uD83D\\uDD0D DEBUG: Final converted product price:\", convertedProduct.price, \"Type:\", typeof convertedProduct.price);\n    return convertedProduct;\n}\n// Cache for products to reduce database calls\nlet productsCache = null;\nlet productsCacheTime = 0;\nconst CACHE_DURATION = 30000; // 30 seconds\n// Clear cache function\nfunction clearProductsCache() {\n    productsCache = null;\n    productsCacheTime = 0;\n    console.log(\"Supabase: Products cache cleared\");\n}\n// Force clear cache immediately to fix price formatting issue\nclearProductsCache();\n// Add timestamp to force cache invalidation\nconst CACHE_BUSTER = Date.now();\nconsole.log(\"\\uD83D\\uDE80 Cache buster timestamp:\", CACHE_BUSTER);\n// Products operations\nasync function getProducts() {\n    try {\n        // Return cached data if still fresh\n        if (productsCache && Date.now() - productsCacheTime < CACHE_DURATION) {\n            console.log(\"Supabase: Returning cached products\");\n            return productsCache;\n        }\n        const { data, error } = await supabase.from(\"products\").select(\"*\").order(\"created_at\", {\n            ascending: false\n        });\n        if (error) {\n            console.error(\"Supabase getProducts error:\", error);\n            return productsCache || [];\n        }\n        const products = (data || []).map(convertDbProductToProduct);\n        // Update cache\n        productsCache = products;\n        productsCacheTime = Date.now();\n        return products;\n    } catch (error) {\n        console.error(\"Supabase getProducts error:\", error);\n        return productsCache || [];\n    }\n}\nasync function getProduct(id) {\n    try {\n        const { data, error } = await supabase.from(\"products\").select(\"*\").eq(\"id\", id).single();\n        if (error) {\n            console.error(\"Supabase getProduct error:\", error);\n            return null;\n        }\n        return convertDbProductToProduct(data);\n    } catch (error) {\n        console.error(\"Supabase getProduct error:\", error);\n        return null;\n    }\n}\nasync function addProduct(product) {\n    try {\n        // Convert camelCase to snake_case for database\n        const dbProduct = {\n            id: product.id,\n            name: product.name,\n            description: product.description,\n            price: product.price,\n            original_price: product.originalPrice,\n            image: product.image,\n            images: product.images || [],\n            stock: product.stock,\n            category: product.category,\n            sizes: product.sizes || [],\n            colors: product.colors || [],\n            in_stock: product.inStock,\n            rating: product.rating,\n            reviews: product.reviews,\n            sku: product.sku,\n            weight: product.weight,\n            dimensions: product.dimensions,\n            tags: product.tags || [],\n            featured: product.featured || false,\n            size_chart_category: product.sizeChartCategory || \"T-Shirts\",\n            custom_size_chart: product.customSizeChart || null,\n            use_custom_size_chart: product.useCustomSizeChart || false\n        };\n        const { data, error } = await supabase.from(\"products\").insert([\n            dbProduct\n        ]).select().single();\n        if (error) {\n            console.error(\"Supabase addProduct error:\", error);\n            throw error;\n        }\n        console.log(\"Supabase: Added product:\", product.id);\n        // Initialize inventory for the new product\n        try {\n            const { initializeProductInventory } = await __webpack_require__.e(/*! import() */ \"_rsc_src_lib_inventoryService_ts\").then(__webpack_require__.bind(__webpack_require__, /*! ./inventoryService */ \"(rsc)/./src/lib/inventoryService.ts\"));\n            await initializeProductInventory(product.id);\n            console.log(\"Supabase: Initialized inventory for product:\", product.id);\n        } catch (inventoryError) {\n            console.error(\"Supabase: Failed to initialize inventory for product:\", product.id, inventoryError);\n        // Don't throw error here, product creation should still succeed\n        }\n        // Invalidate cache\n        productsCache = null;\n        // Convert back to camelCase\n        return convertDbProductToProduct(data);\n    } catch (error) {\n        console.error(\"Supabase addProduct error:\", error);\n        throw error;\n    }\n}\nasync function updateProduct(id, product) {\n    try {\n        // Convert camelCase to snake_case for database\n        const dbProduct = {};\n        if (product.name !== undefined) dbProduct.name = product.name;\n        if (product.description !== undefined) dbProduct.description = product.description;\n        if (product.price !== undefined) dbProduct.price = product.price;\n        if (product.originalPrice !== undefined) dbProduct.original_price = product.originalPrice;\n        if (product.image !== undefined) dbProduct.image = product.image;\n        if (product.images !== undefined) dbProduct.images = product.images;\n        if (product.stock !== undefined) dbProduct.stock = product.stock;\n        if (product.category !== undefined) dbProduct.category = product.category;\n        if (product.sizes !== undefined) dbProduct.sizes = product.sizes;\n        if (product.colors !== undefined) dbProduct.colors = product.colors;\n        if (product.inStock !== undefined) dbProduct.in_stock = product.inStock;\n        if (product.rating !== undefined) dbProduct.rating = product.rating;\n        if (product.reviews !== undefined) dbProduct.reviews = product.reviews;\n        if (product.sku !== undefined) dbProduct.sku = product.sku;\n        if (product.weight !== undefined) dbProduct.weight = product.weight;\n        if (product.dimensions !== undefined) dbProduct.dimensions = product.dimensions;\n        if (product.tags !== undefined) dbProduct.tags = product.tags;\n        if (product.featured !== undefined) dbProduct.featured = product.featured;\n        if (product.sizeChartCategory !== undefined) dbProduct.size_chart_category = product.sizeChartCategory;\n        if (product.customSizeChart !== undefined) dbProduct.custom_size_chart = product.customSizeChart;\n        if (product.useCustomSizeChart !== undefined) dbProduct.use_custom_size_chart = product.useCustomSizeChart;\n        const { data, error } = await supabase.from(\"products\").update(dbProduct).eq(\"id\", id).select().single();\n        if (error) {\n            console.error(\"Supabase updateProduct error:\", error);\n            return null;\n        }\n        console.log(\"Supabase: Updated product:\", id);\n        // Invalidate cache\n        productsCache = null;\n        return convertDbProductToProduct(data);\n    } catch (error) {\n        console.error(\"Supabase updateProduct error:\", error);\n        return null;\n    }\n}\nasync function deleteProduct(id) {\n    try {\n        const { error } = await supabase.from(\"products\").delete().eq(\"id\", id);\n        if (error) {\n            console.error(\"Supabase deleteProduct error:\", error);\n            return false;\n        }\n        console.log(\"Supabase: Deleted product:\", id);\n        // Invalidate cache\n        productsCache = null;\n        return true;\n    } catch (error) {\n        console.error(\"Supabase deleteProduct error:\", error);\n        return false;\n    }\n}\n// Helper function to convert database order to Order interface\nfunction convertDbOrderToOrder(dbOrder) {\n    // Extract customer info from items or use defaults\n    const firstItem = dbOrder.items && dbOrder.items.length > 0 ? dbOrder.items[0] : {};\n    return {\n        id: dbOrder.id,\n        productId: firstItem.productId || \"\",\n        productName: firstItem.productName || \"\",\n        productImage: firstItem.productImage || \"\",\n        customerName: firstItem.customerName || \"\",\n        customerPhone: firstItem.customerPhone || \"\",\n        customerEmail: firstItem.customerEmail || \"\",\n        customerAddress: firstItem.customerAddress || \"\",\n        wilayaId: firstItem.wilayaId || 0,\n        wilayaName: firstItem.wilayaName || \"\",\n        shippingType: dbOrder.shipping_type || \"homeDelivery\",\n        shippingCost: Number(dbOrder.shipping_cost) || 0,\n        quantity: firstItem.quantity || 1,\n        selectedSize: firstItem.selectedSize || \"\",\n        selectedColor: firstItem.selectedColor || \"\",\n        subtotal: Number(dbOrder.total) - Number(dbOrder.shipping_cost) || 0,\n        total: Number(dbOrder.total) || 0,\n        orderDate: new Date(dbOrder.order_date),\n        status: dbOrder.status || \"pending\",\n        trackingNumber: dbOrder.tracking_number,\n        notes: firstItem.notes,\n        paymentMethod: dbOrder.payment_method || \"cod\",\n        paymentStatus: dbOrder.payment_status || \"pending\",\n        estimatedDelivery: firstItem.estimatedDelivery,\n        createdAt: new Date(dbOrder.created_at),\n        updatedAt: new Date(dbOrder.updated_at)\n    };\n}\n// Cache for orders to reduce database calls\nlet ordersCache = null;\nlet ordersCacheTime = 0;\n// Orders operations\nasync function getOrders() {\n    try {\n        // Return cached data if still fresh\n        if (ordersCache && Date.now() - ordersCacheTime < CACHE_DURATION) {\n            console.log(\"Supabase: Returning cached orders\");\n            return ordersCache;\n        }\n        const { data, error } = await supabase.from(\"orders\").select(\"*\").order(\"order_date\", {\n            ascending: false\n        });\n        if (error) {\n            console.error(\"Supabase getOrders error:\", error);\n            return ordersCache || [];\n        }\n        const orders = (data || []).map(convertDbOrderToOrder);\n        // Update cache\n        ordersCache = orders;\n        ordersCacheTime = Date.now();\n        return orders;\n    } catch (error) {\n        console.error(\"Supabase getOrders error:\", error);\n        return ordersCache || [];\n    }\n}\nasync function getOrder(id) {\n    try {\n        const { data, error } = await supabase.from(\"orders\").select(\"*\").eq(\"id\", id).single();\n        if (error) {\n            console.error(\"Supabase getOrder error:\", error);\n            return null;\n        }\n        return convertDbOrderToOrder(data);\n    } catch (error) {\n        console.error(\"Supabase getOrder error:\", error);\n        return null;\n    }\n}\nasync function addOrder(order) {\n    try {\n        // Convert Order interface to database format\n        const dbOrder = {\n            id: order.id,\n            customer_id: `CUST-${Date.now()}`,\n            items: [\n                {\n                    productId: order.productId,\n                    productName: order.productName,\n                    productImage: order.productImage,\n                    customerName: order.customerName,\n                    customerPhone: order.customerPhone,\n                    customerEmail: order.customerEmail,\n                    customerAddress: order.customerAddress,\n                    wilayaId: order.wilayaId,\n                    wilayaName: order.wilayaName,\n                    quantity: order.quantity,\n                    selectedSize: order.selectedSize,\n                    selectedColor: order.selectedColor,\n                    notes: order.notes,\n                    estimatedDelivery: order.estimatedDelivery\n                }\n            ],\n            total: order.total,\n            shipping_cost: order.shippingCost,\n            shipping_type: order.shippingType,\n            payment_method: order.paymentMethod,\n            payment_status: order.paymentStatus,\n            status: order.status,\n            tracking_number: order.trackingNumber,\n            order_date: order.orderDate.toISOString(),\n            created_at: order.createdAt.toISOString(),\n            updated_at: order.updatedAt.toISOString()\n        };\n        const { data, error } = await supabase.from(\"orders\").insert([\n            dbOrder\n        ]).select().single();\n        if (error) {\n            console.error(\"Supabase addOrder error:\", error);\n            throw error;\n        }\n        console.log(\"Supabase: Added order:\", order.id);\n        return convertDbOrderToOrder(data);\n    } catch (error) {\n        console.error(\"Supabase addOrder error:\", error);\n        throw error;\n    }\n}\nasync function updateOrder(id, order) {\n    try {\n        // Convert partial Order to database format\n        const updateData = {\n            updated_at: new Date().toISOString()\n        };\n        if (order.status !== undefined) updateData.status = order.status;\n        if (order.paymentStatus !== undefined) updateData.payment_status = order.paymentStatus;\n        if (order.trackingNumber !== undefined) updateData.tracking_number = order.trackingNumber;\n        if (order.shippingType !== undefined) updateData.shipping_type = order.shippingType;\n        if (order.shippingCost !== undefined) updateData.shipping_cost = order.shippingCost;\n        if (order.total !== undefined) updateData.total = order.total;\n        if (order.paymentMethod !== undefined) updateData.payment_method = order.paymentMethod;\n        const { data, error } = await supabase.from(\"orders\").update(updateData).eq(\"id\", id).select().single();\n        if (error) {\n            console.error(\"Supabase updateOrder error:\", error);\n            return null;\n        }\n        console.log(\"Supabase: Updated order:\", id);\n        return convertDbOrderToOrder(data);\n    } catch (error) {\n        console.error(\"Supabase updateOrder error:\", error);\n        return null;\n    }\n}\nasync function deleteOrder(id) {\n    try {\n        // First, get the order details to restore inventory\n        const order = await getOrder(id);\n        if (!order) {\n            console.error(\"Supabase deleteOrder: Order not found:\", id);\n            return false;\n        }\n        // Restore inventory quantity\n        if (order.productId && order.selectedSize && order.selectedColor && order.quantity) {\n            try {\n                const { addInventory } = await __webpack_require__.e(/*! import() */ \"_rsc_src_lib_inventoryService_ts\").then(__webpack_require__.bind(__webpack_require__, /*! ./inventoryService */ \"(rsc)/./src/lib/inventoryService.ts\"));\n                const inventoryRestored = await addInventory(order.productId, order.selectedSize, order.selectedColor, order.quantity, `Order ${id} deleted - inventory restored`, \"admin\");\n                if (inventoryRestored) {\n                    console.log(\"Supabase deleteOrder: Inventory restored for order:\", id);\n                } else {\n                    console.warn(\"Supabase deleteOrder: Failed to restore inventory for order:\", id);\n                }\n            } catch (inventoryError) {\n                console.error(\"Supabase deleteOrder: Inventory restoration error:\", inventoryError);\n            // Continue with order deletion even if inventory restoration fails\n            }\n        }\n        // Delete the order\n        const { error } = await supabase.from(\"orders\").delete().eq(\"id\", id);\n        if (error) {\n            console.error(\"Supabase deleteOrder error:\", error);\n            return false;\n        }\n        console.log(\"Supabase: Deleted order:\", id);\n        return true;\n    } catch (error) {\n        console.error(\"Supabase deleteOrder error:\", error);\n        return false;\n    }\n}\n// Wilaya operations\nasync function getWilayaTariffs() {\n    try {\n        const { data, error } = await supabase.from(\"wilaya_tariffs\").select(\"*\").order(\"order\", {\n            ascending: true\n        });\n        if (error) {\n            console.error(\"Supabase getWilayaTariffs error:\", error);\n            return [];\n        }\n        // Transform the data to match the expected format\n        const transformedData = (data || []).map((tariff)=>({\n                id: tariff.id.toString(),\n                wilaya_id: tariff.wilaya_id,\n                name: tariff.name,\n                domicile_ecommerce: tariff.domicile_ecommerce,\n                stop_desk_ecommerce: tariff.stop_desk_ecommerce,\n                order: tariff.order,\n                // Legacy compatibility for backward compatibility\n                home_delivery: tariff.domicile_ecommerce,\n                stop_desk: tariff.stop_desk_ecommerce,\n                homeDelivery: tariff.domicile_ecommerce,\n                stopDesk: tariff.stop_desk_ecommerce,\n                domicileEcommerce: tariff.domicile_ecommerce,\n                stopDeskEcommerce: tariff.stop_desk_ecommerce\n            }));\n        return transformedData;\n    } catch (error) {\n        console.error(\"Supabase getWilayaTariffs error:\", error);\n        return [];\n    }\n}\nasync function updateWilayaTariffs(tariffs) {\n    try {\n        // Delete all existing tariffs\n        await supabase.from(\"wilaya_tariffs\").delete().neq(\"id\", 0); // Delete all records\n        // Insert new tariffs\n        if (tariffs.length > 0) {\n            // Transform the data to match database structure\n            const transformedTariffs = tariffs.map((tariff)=>({\n                    wilaya_id: tariff.wilaya_id || tariff.id,\n                    name: tariff.name,\n                    domicile_ecommerce: tariff.domicile_ecommerce || tariff.domicileEcommerce || tariff.home_delivery || tariff.homeDelivery || 0,\n                    stop_desk_ecommerce: tariff.stop_desk_ecommerce || tariff.stopDeskEcommerce || tariff.stop_desk || tariff.stopDesk || 0,\n                    order: tariff.order || 1\n                }));\n            const { error } = await supabase.from(\"wilaya_tariffs\").insert(transformedTariffs);\n            if (error) {\n                console.error(\"Supabase updateWilayaTariffs error:\", error);\n                throw error;\n            }\n        }\n        console.log(\"Supabase: Updated wilaya tariffs\");\n    } catch (error) {\n        console.error(\"Supabase updateWilayaTariffs error:\", error);\n        throw error;\n    }\n}\n// Inventory operations\nasync function getInventory() {\n    try {\n        const { data, error } = await supabase.from(\"products\").select(\"id, name, sku, stock, sizes, colors, in_stock, category\").order(\"name\");\n        if (error) {\n            console.error(\"Supabase getInventory error:\", error);\n            return [];\n        }\n        // Transform data for inventory management\n        return (data || []).map((product)=>({\n                id: product.id,\n                name: product.name,\n                sku: product.sku,\n                category: product.category,\n                inStock: product.in_stock,\n                stock: product.stock || {},\n                sizes: product.sizes || [],\n                colors: product.colors || [],\n                totalStock: calculateTotalStock(product.stock || {}),\n                stockBySize: calculateStockBySize(product.stock || {}, product.sizes || [], product.colors || [])\n            }));\n    } catch (error) {\n        console.error(\"Supabase getInventory error:\", error);\n        return [];\n    }\n}\nasync function updateInventory(productId, stockData) {\n    try {\n        const updateObj = {\n            updated_at: new Date().toISOString()\n        };\n        if (stockData.stock) {\n            updateObj.stock = stockData.stock;\n        }\n        if (stockData.inStock !== undefined) {\n            updateObj.in_stock = stockData.inStock;\n        }\n        const { data, error } = await supabase.from(\"products\").update(updateObj).eq(\"id\", productId).select().single();\n        if (error) {\n            console.error(\"Supabase updateInventory error:\", error);\n            throw error;\n        }\n        console.log(\"Supabase: Updated inventory for product:\", productId);\n        return {\n            id: data.id,\n            name: data.name,\n            stock: data.stock,\n            inStock: data.in_stock,\n            totalStock: calculateTotalStock(data.stock)\n        };\n    } catch (error) {\n        console.error(\"Supabase updateInventory error:\", error);\n        throw error;\n    }\n}\n// Helper functions for inventory calculations\nfunction calculateTotalStock(stock) {\n    if (!stock || typeof stock !== \"object\") return 0;\n    let total = 0;\n    for(const size in stock){\n        if (typeof stock[size] === \"object\") {\n            for(const color in stock[size]){\n                total += Number(stock[size][color]) || 0;\n            }\n        }\n    }\n    return total;\n}\nfunction calculateStockBySize(stock, sizes, colors) {\n    const result = {};\n    sizes.forEach((size)=>{\n        result[size] = {};\n        colors.forEach((color)=>{\n            result[size][color] = Number(stock[size]?.[color]) || 0;\n        });\n    });\n    return result;\n}\n// Stock deduction function for orders\nasync function deductStockFromOrder(order) {\n    try {\n        console.log(\"Supabase: Deducting stock for order:\", order.id);\n        // Get the product\n        const product = await getProduct(order.productId);\n        if (!product) {\n            console.error(\"Supabase: Product not found for order:\", order.productId);\n            return false;\n        }\n        // Check if we have enough stock\n        const currentStock = product.stock?.[order.selectedSize]?.[order.selectedColor] || 0;\n        if (currentStock < order.quantity) {\n            console.error(\"Supabase: Insufficient stock for order:\", {\n                productId: order.productId,\n                size: order.selectedSize,\n                color: order.selectedColor,\n                requested: order.quantity,\n                available: currentStock\n            });\n            return false;\n        }\n        // Deduct the stock from product\n        const newStock = {\n            ...product.stock,\n            [order.selectedSize]: {\n                ...product.stock?.[order.selectedSize],\n                [order.selectedColor]: currentStock - order.quantity\n            }\n        };\n        // Update the product stock\n        const updatedProduct = await updateProduct(order.productId, {\n            stock: newStock,\n            inStock: calculateTotalStock(newStock) > 0\n        });\n        if (!updatedProduct) {\n            console.error(\"Supabase: Failed to update product stock for order:\", order.id);\n            return false;\n        }\n        // Also deduct from inventory system\n        try {\n            const { addInventory } = await __webpack_require__.e(/*! import() */ \"_rsc_src_lib_inventoryService_ts\").then(__webpack_require__.bind(__webpack_require__, /*! ./inventoryService */ \"(rsc)/./src/lib/inventoryService.ts\"));\n            const inventoryDeducted = await addInventory(order.productId, order.selectedSize, order.selectedColor, -order.quantity, `Order ${order.id} created - stock deducted`, \"system\");\n            if (inventoryDeducted) {\n                console.log(\"Supabase: Successfully deducted inventory for order:\", order.id);\n            } else {\n                console.warn(\"Supabase: Failed to deduct inventory for order:\", order.id);\n            }\n        } catch (inventoryError) {\n            console.error(\"Supabase: Inventory deduction error:\", inventoryError);\n        // Continue even if inventory update fails\n        }\n        console.log(\"Supabase: Successfully deducted stock for order:\", order.id);\n        return true;\n    } catch (error) {\n        console.error(\"Supabase: Error deducting stock for order:\", error);\n        return false;\n    }\n}\n// Maintenance settings operations\nasync function getMaintenanceSettings() {\n    try {\n        const { data, error } = await supabase.from(\"maintenance_settings\").select(\"*\").eq(\"id\", \"maintenance\").single();\n        if (error) {\n            console.error(\"Supabase getMaintenanceSettings error:\", error);\n            // If table doesn't exist, return default settings\n            if (error.code === \"PGRST205\") {\n                console.log(\"Maintenance settings table not found, using default settings\");\n            }\n            // Return default settings if no data exists\n            return {\n                id: \"maintenance\",\n                is_maintenance_mode: false,\n                drop_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n                maintenance_message: \"We are currently performing maintenance. Please check back later.\",\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            };\n        }\n        return data || {\n            id: \"maintenance\",\n            is_maintenance_mode: false,\n            drop_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n            maintenance_message: \"We are currently performing maintenance. Please check back later.\",\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n        };\n    } catch (error) {\n        console.error(\"Supabase getMaintenanceSettings error:\", error);\n        return {\n            id: \"maintenance\",\n            is_maintenance_mode: false,\n            drop_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n            maintenance_message: \"We are currently performing maintenance. Please check back later.\",\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n        };\n    }\n}\nasync function updateMaintenanceSettings(settings) {\n    try {\n        const updateData = {\n            updated_at: new Date().toISOString()\n        };\n        if (settings.is_maintenance_mode !== undefined) {\n            updateData.is_maintenance_mode = settings.is_maintenance_mode;\n        }\n        if (settings.drop_date !== undefined) {\n            updateData.drop_date = settings.drop_date;\n        }\n        if (settings.maintenance_message !== undefined) {\n            updateData.maintenance_message = settings.maintenance_message;\n        }\n        console.log(\"Updating maintenance settings with:\", updateData);\n        // Try update first\n        const { data: updateResult, error: updateError } = await supabase.from(\"maintenance_settings\").update(updateData).eq(\"id\", \"maintenance\").select().single();\n        if (updateError) {\n            console.error(\"Update error:\", updateError);\n            // If update fails, try insert\n            const { data: insertResult, error: insertError } = await supabase.from(\"maintenance_settings\").insert([\n                {\n                    id: \"maintenance\",\n                    is_maintenance_mode: settings.is_maintenance_mode ?? false,\n                    drop_date: settings.drop_date ?? new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n                    maintenance_message: settings.maintenance_message ?? \"We are currently performing maintenance. Please check back later.\",\n                    created_at: new Date().toISOString(),\n                    updated_at: new Date().toISOString()\n                }\n            ]).select().single();\n            if (insertError) {\n                console.error(\"Insert error:\", insertError);\n                throw insertError;\n            }\n            console.log(\"Supabase: Created maintenance settings\");\n            return insertResult;\n        }\n        console.log(\"Supabase: Updated maintenance settings\");\n        return updateResult;\n    } catch (error) {\n        console.error(\"Supabase updateMaintenanceSettings error:\", error);\n        throw error;\n    }\n}\n// Customers methods\nasync function getCustomers() {\n    try {\n        const { data, error } = await supabase.from(\"customers\").select(\"*\").order(\"created_at\", {\n            ascending: false\n        });\n        if (error) {\n            console.error(\"Supabase getCustomers error:\", error);\n            throw error;\n        }\n        console.log(\"Supabase: Fetched\", data?.length || 0, \"customers\");\n        return data || [];\n    } catch (error) {\n        console.error(\"Supabase getCustomers error:\", error);\n        throw error;\n    }\n}\nasync function addCustomer(customerData) {\n    try {\n        const now = new Date().toISOString();\n        const customer = {\n            ...customerData,\n            id: `customer_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n            created_at: now,\n            updated_at: now\n        };\n        const { data, error } = await supabase.from(\"customers\").insert([\n            customer\n        ]).select().single();\n        if (error) {\n            console.error(\"Supabase addCustomer error:\", error);\n            throw error;\n        }\n        console.log(\"Supabase: Created customer:\", data.id);\n        return {\n            id: data.id,\n            name: data.name,\n            email: data.email,\n            phone: data.phone,\n            address: data.address,\n            city: data.city,\n            wilaya: data.wilaya,\n            createdAt: new Date(data.created_at),\n            updatedAt: new Date(data.updated_at)\n        };\n    } catch (error) {\n        console.error(\"Supabase addCustomer error:\", error);\n        throw error;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/supabaseDatabase.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fproducts%2F%5Bid%5D%2Froute&page=%2Fapi%2Fproducts%2F%5Bid%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fproducts%2F%5Bid%5D%2Froute.ts&appDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();