"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/maintenance/route";
exports.ids = ["app/api/maintenance/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fmaintenance%2Froute&page=%2Fapi%2Fmaintenance%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmaintenance%2Froute.ts&appDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fmaintenance%2Froute&page=%2Fapi%2Fmaintenance%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmaintenance%2Froute.ts&appDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_HP_Desktop_projectt_src_app_api_maintenance_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/maintenance/route.ts */ \"(rsc)/./src/app/api/maintenance/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/maintenance/route\",\n        pathname: \"/api/maintenance\",\n        filename: \"route\",\n        bundlePath: \"app/api/maintenance/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projectt\\\\src\\\\app\\\\api\\\\maintenance\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_HP_Desktop_projectt_src_app_api_maintenance_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/maintenance/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZtYWludGVuYW5jZSUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGbWFpbnRlbmFuY2UlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZtYWludGVuYW5jZSUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNIUCU1Q0Rlc2t0b3AlNUNwcm9qZWN0dCU1Q3NyYyU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q1VzZXJzJTVDSFAlNUNEZXNrdG9wJTVDcHJvamVjdHQmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9c3RhbmRhbG9uZSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ3NCO0FBQ25HO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsdUdBQXVHO0FBQy9HO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDNko7O0FBRTdKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2JzaWRpYW4td2Vhci8/NzE5OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxIUFxcXFxEZXNrdG9wXFxcXHByb2plY3R0XFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXG1haW50ZW5hbmNlXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcInN0YW5kYWxvbmVcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvbWFpbnRlbmFuY2Uvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9tYWludGVuYW5jZVwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvbWFpbnRlbmFuY2Uvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJDOlxcXFxVc2Vyc1xcXFxIUFxcXFxEZXNrdG9wXFxcXHByb2plY3R0XFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXG1haW50ZW5hbmNlXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL21haW50ZW5hbmNlL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCwgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fmaintenance%2Froute&page=%2Fapi%2Fmaintenance%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmaintenance%2Froute.ts&appDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/maintenance/route.ts":
/*!******************************************!*\
  !*** ./src/app/api/maintenance/route.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var _lib_maintenanceService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/maintenanceService */ \"(rsc)/./src/lib/maintenanceService.ts\");\n\n\nasync function GET() {\n    try {\n        const status = await _lib_maintenanceService__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMaintenanceStatus();\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(status);\n    } catch (error) {\n        console.error(\"Error fetching maintenance status:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: \"Failed to fetch maintenance status\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        console.log(\"Maintenance API received:\", body);\n        // Handle different parameter names\n        const isMaintenance = body.isMaintenance || body.is_maintenance;\n        const dropDate = body.dropDate || body.drop_date;\n        const success = await _lib_maintenanceService__WEBPACK_IMPORTED_MODULE_1__[\"default\"].setMaintenanceStatus(isMaintenance, dropDate);\n        if (success) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: true\n            });\n        } else {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Failed to update maintenance status\"\n            }, {\n                status: 500\n            });\n        }\n    } catch (error) {\n        console.error(\"Error updating maintenance status:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: \"Failed to update maintenance status\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9tYWludGVuYW5jZS9yb3V0ZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXdEO0FBQ0U7QUFFbkQsZUFBZUU7SUFDcEIsSUFBSTtRQUNGLE1BQU1DLFNBQVMsTUFBTUYsK0RBQWtCQSxDQUFDRyxvQkFBb0I7UUFDNUQsT0FBT0osa0ZBQVlBLENBQUNLLElBQUksQ0FBQ0Y7SUFDM0IsRUFBRSxPQUFPRyxPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQyxzQ0FBc0NBO1FBQ3BELE9BQU9OLGtGQUFZQSxDQUFDSyxJQUFJLENBQUM7WUFBRUMsT0FBTztRQUFxQyxHQUFHO1lBQUVILFFBQVE7UUFBSTtJQUMxRjtBQUNGO0FBRU8sZUFBZUssS0FBS0MsT0FBb0I7SUFDN0MsSUFBSTtRQUNGLE1BQU1DLE9BQU8sTUFBTUQsUUFBUUosSUFBSTtRQUMvQkUsUUFBUUksR0FBRyxDQUFDLDZCQUE2QkQ7UUFFekMsbUNBQW1DO1FBQ25DLE1BQU1FLGdCQUFnQkYsS0FBS0UsYUFBYSxJQUFJRixLQUFLRyxjQUFjO1FBQy9ELE1BQU1DLFdBQVdKLEtBQUtJLFFBQVEsSUFBSUosS0FBS0ssU0FBUztRQUVoRCxNQUFNQyxVQUFVLE1BQU1mLCtEQUFrQkEsQ0FBQ2dCLG9CQUFvQixDQUFDTCxlQUFlRTtRQUU3RSxJQUFJRSxTQUFTO1lBQ1gsT0FBT2hCLGtGQUFZQSxDQUFDSyxJQUFJLENBQUM7Z0JBQUVXLFNBQVM7WUFBSztRQUMzQyxPQUFPO1lBQ0wsT0FBT2hCLGtGQUFZQSxDQUFDSyxJQUFJLENBQUM7Z0JBQUVDLE9BQU87WUFBc0MsR0FBRztnQkFBRUgsUUFBUTtZQUFJO1FBQzNGO0lBQ0YsRUFBRSxPQUFPRyxPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQyxzQ0FBc0NBO1FBQ3BELE9BQU9OLGtGQUFZQSxDQUFDSyxJQUFJLENBQUM7WUFBRUMsT0FBTztRQUFzQyxHQUFHO1lBQUVILFFBQVE7UUFBSTtJQUMzRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2JzaWRpYW4td2Vhci8uL3NyYy9hcHAvYXBpL21haW50ZW5hbmNlL3JvdXRlLnRzP2M5ZGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcclxuaW1wb3J0IG1haW50ZW5hbmNlU2VydmljZSBmcm9tICdAL2xpYi9tYWludGVuYW5jZVNlcnZpY2UnO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVCgpIHtcclxuICB0cnkge1xyXG4gICAgY29uc3Qgc3RhdHVzID0gYXdhaXQgbWFpbnRlbmFuY2VTZXJ2aWNlLmdldE1haW50ZW5hbmNlU3RhdHVzKCk7XHJcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oc3RhdHVzKTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgbWFpbnRlbmFuY2Ugc3RhdHVzOicsIGVycm9yKTtcclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IGVycm9yOiAnRmFpbGVkIHRvIGZldGNoIG1haW50ZW5hbmNlIHN0YXR1cycgfSwgeyBzdGF0dXM6IDUwMCB9KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKTtcclxuICAgIGNvbnNvbGUubG9nKCdNYWludGVuYW5jZSBBUEkgcmVjZWl2ZWQ6JywgYm9keSk7XHJcbiAgICBcclxuICAgIC8vIEhhbmRsZSBkaWZmZXJlbnQgcGFyYW1ldGVyIG5hbWVzXHJcbiAgICBjb25zdCBpc01haW50ZW5hbmNlID0gYm9keS5pc01haW50ZW5hbmNlIHx8IGJvZHkuaXNfbWFpbnRlbmFuY2U7XHJcbiAgICBjb25zdCBkcm9wRGF0ZSA9IGJvZHkuZHJvcERhdGUgfHwgYm9keS5kcm9wX2RhdGU7XHJcbiAgICBcclxuICAgIGNvbnN0IHN1Y2Nlc3MgPSBhd2FpdCBtYWludGVuYW5jZVNlcnZpY2Uuc2V0TWFpbnRlbmFuY2VTdGF0dXMoaXNNYWludGVuYW5jZSwgZHJvcERhdGUpO1xyXG4gICAgXHJcbiAgICBpZiAoc3VjY2Vzcykge1xyXG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBzdWNjZXNzOiB0cnVlIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgZXJyb3I6ICdGYWlsZWQgdG8gdXBkYXRlIG1haW50ZW5hbmNlIHN0YXR1cycgfSwgeyBzdGF0dXM6IDUwMCB9KTtcclxuICAgIH1cclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgdXBkYXRpbmcgbWFpbnRlbmFuY2Ugc3RhdHVzOicsIGVycm9yKTtcclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IGVycm9yOiAnRmFpbGVkIHRvIHVwZGF0ZSBtYWludGVuYW5jZSBzdGF0dXMnIH0sIHsgc3RhdHVzOiA1MDAgfSk7XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJtYWludGVuYW5jZVNlcnZpY2UiLCJHRVQiLCJzdGF0dXMiLCJnZXRNYWludGVuYW5jZVN0YXR1cyIsImpzb24iLCJlcnJvciIsImNvbnNvbGUiLCJQT1NUIiwicmVxdWVzdCIsImJvZHkiLCJsb2ciLCJpc01haW50ZW5hbmNlIiwiaXNfbWFpbnRlbmFuY2UiLCJkcm9wRGF0ZSIsImRyb3BfZGF0ZSIsInN1Y2Nlc3MiLCJzZXRNYWludGVuYW5jZVN0YXR1cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/maintenance/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/maintenanceService.ts":
/*!***************************************!*\
  !*** ./src/lib/maintenanceService.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _optimizedDatabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./optimizedDatabase */ \"(rsc)/./src/lib/optimizedDatabase.ts\");\n// Maintenance service that stores status in database for all users\n\nclass MaintenanceService {\n    static getInstance() {\n        if (!MaintenanceService.instance) {\n            MaintenanceService.instance = new MaintenanceService();\n        }\n        return MaintenanceService.instance;\n    }\n    async getMaintenanceStatus() {\n        // Check cache first\n        const now = Date.now();\n        if (this.cache && now - this.cacheTime < this.CACHE_DURATION) {\n            return this.cache;\n        }\n        try {\n            const data = await (0,_optimizedDatabase__WEBPACK_IMPORTED_MODULE_0__.getMaintenanceStatus)();\n            if (data) {\n                this.cache = data;\n                this.cacheTime = now;\n            }\n            return data;\n        } catch (error) {\n            console.error(\"Error fetching maintenance status:\", error);\n            return null;\n        }\n    }\n    async setMaintenanceStatus(isMaintenance, dropDate) {\n        try {\n            console.log(\"Setting maintenance status:\", {\n                isMaintenance,\n                dropDate\n            });\n            const success = await (0,_optimizedDatabase__WEBPACK_IMPORTED_MODULE_0__.setMaintenanceStatus)(isMaintenance, dropDate);\n            if (success) {\n                // Clear cache to force refresh\n                this.cache = null;\n                this.cacheTime = 0;\n                console.log(\"Maintenance status updated successfully\");\n            } else {\n                console.error(\"Failed to update maintenance status\");\n            }\n            return success;\n        } catch (error) {\n            console.error(\"Error updating maintenance status:\", error);\n            return false;\n        }\n    }\n    async isMaintenanceMode() {\n        const status = await this.getMaintenanceStatus();\n        return status?.is_maintenance || false;\n    }\n    async getDropDate() {\n        const status = await this.getMaintenanceStatus();\n        return status?.drop_date || null;\n    }\n    constructor(){\n        this.cache = null;\n        this.cacheTime = 0;\n        this.CACHE_DURATION = 30000 // 30 seconds\n        ;\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MaintenanceService.getInstance());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL21haW50ZW5hbmNlU2VydmljZS50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLG1FQUFtRTtBQUM0RDtBQVMvSCxNQUFNSTtJQU1KLE9BQU9DLGNBQWtDO1FBQ3ZDLElBQUksQ0FBQ0QsbUJBQW1CRSxRQUFRLEVBQUU7WUFDaENGLG1CQUFtQkUsUUFBUSxHQUFHLElBQUlGO1FBQ3BDO1FBQ0EsT0FBT0EsbUJBQW1CRSxRQUFRO0lBQ3BDO0lBRUEsTUFBTU4sdUJBQTBEO1FBQzlELG9CQUFvQjtRQUNwQixNQUFNTyxNQUFNQyxLQUFLRCxHQUFHO1FBQ3BCLElBQUksSUFBSSxDQUFDRSxLQUFLLElBQUksTUFBTyxJQUFJLENBQUNDLFNBQVMsR0FBSSxJQUFJLENBQUNDLGNBQWMsRUFBRTtZQUM5RCxPQUFPLElBQUksQ0FBQ0YsS0FBSztRQUNuQjtRQUVBLElBQUk7WUFDRixNQUFNRyxPQUFPLE1BQU1YLHdFQUFvQkE7WUFFdkMsSUFBSVcsTUFBTTtnQkFDUixJQUFJLENBQUNILEtBQUssR0FBR0c7Z0JBQ2IsSUFBSSxDQUFDRixTQUFTLEdBQUdIO1lBQ25CO1lBRUEsT0FBT0s7UUFDVCxFQUFFLE9BQU9DLE9BQU87WUFDZEMsUUFBUUQsS0FBSyxDQUFDLHNDQUFzQ0E7WUFDcEQsT0FBTztRQUNUO0lBQ0Y7SUFFQSxNQUFNWCxxQkFBcUJhLGFBQXNCLEVBQUVDLFFBQWlCLEVBQW9CO1FBQ3RGLElBQUk7WUFDRkYsUUFBUUcsR0FBRyxDQUFDLCtCQUErQjtnQkFBRUY7Z0JBQWVDO1lBQVM7WUFFckUsTUFBTUUsVUFBVSxNQUFNZix3RUFBa0JBLENBQUNZLGVBQWVDO1lBRXhELElBQUlFLFNBQVM7Z0JBQ1gsK0JBQStCO2dCQUMvQixJQUFJLENBQUNULEtBQUssR0FBRztnQkFDYixJQUFJLENBQUNDLFNBQVMsR0FBRztnQkFDakJJLFFBQVFHLEdBQUcsQ0FBQztZQUNkLE9BQU87Z0JBQ0xILFFBQVFELEtBQUssQ0FBQztZQUNoQjtZQUVBLE9BQU9LO1FBQ1QsRUFBRSxPQUFPTCxPQUFPO1lBQ2RDLFFBQVFELEtBQUssQ0FBQyxzQ0FBc0NBO1lBQ3BELE9BQU87UUFDVDtJQUNGO0lBRUEsTUFBTU0sb0JBQXNDO1FBQzFDLE1BQU1DLFNBQVMsTUFBTSxJQUFJLENBQUNwQixvQkFBb0I7UUFDOUMsT0FBT29CLFFBQVFDLGtCQUFrQjtJQUNuQztJQUVBLE1BQU1DLGNBQXNDO1FBQzFDLE1BQU1GLFNBQVMsTUFBTSxJQUFJLENBQUNwQixvQkFBb0I7UUFDOUMsT0FBT29CLFFBQVFHLGFBQWE7SUFDOUI7O2FBL0RRZCxRQUFrQzthQUNsQ0MsWUFBb0I7YUFDWEMsaUJBQWlCLE1BQU8sYUFBYTs7O0FBOER4RDtBQUVBLGlFQUFlUCxtQkFBbUJDLFdBQVcsRUFBRSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2JzaWRpYW4td2Vhci8uL3NyYy9saWIvbWFpbnRlbmFuY2VTZXJ2aWNlLnRzPzMyZjEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTWFpbnRlbmFuY2Ugc2VydmljZSB0aGF0IHN0b3JlcyBzdGF0dXMgaW4gZGF0YWJhc2UgZm9yIGFsbCB1c2Vyc1xyXG5pbXBvcnQgeyBnZXRNYWludGVuYW5jZVN0YXR1cyBhcyBnZXRNYWludGVuYW5jZUZyb21EQiwgc2V0TWFpbnRlbmFuY2VTdGF0dXMgYXMgc2V0TWFpbnRlbmFuY2VUb0RCIH0gZnJvbSAnLi9vcHRpbWl6ZWREYXRhYmFzZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE1haW50ZW5hbmNlU3RhdHVzIHtcclxuICBpZDogc3RyaW5nO1xyXG4gIGlzX21haW50ZW5hbmNlOiBib29sZWFuO1xyXG4gIGRyb3BfZGF0ZTogc3RyaW5nO1xyXG4gIHVwZGF0ZWRfYXQ6IHN0cmluZztcclxufVxyXG5cclxuY2xhc3MgTWFpbnRlbmFuY2VTZXJ2aWNlIHtcclxuICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogTWFpbnRlbmFuY2VTZXJ2aWNlO1xyXG4gIHByaXZhdGUgY2FjaGU6IE1haW50ZW5hbmNlU3RhdHVzIHwgbnVsbCA9IG51bGw7XHJcbiAgcHJpdmF0ZSBjYWNoZVRpbWU6IG51bWJlciA9IDA7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBDQUNIRV9EVVJBVElPTiA9IDMwMDAwOyAvLyAzMCBzZWNvbmRzXHJcblxyXG4gIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBNYWludGVuYW5jZVNlcnZpY2Uge1xyXG4gICAgaWYgKCFNYWludGVuYW5jZVNlcnZpY2UuaW5zdGFuY2UpIHtcclxuICAgICAgTWFpbnRlbmFuY2VTZXJ2aWNlLmluc3RhbmNlID0gbmV3IE1haW50ZW5hbmNlU2VydmljZSgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIE1haW50ZW5hbmNlU2VydmljZS5pbnN0YW5jZTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGdldE1haW50ZW5hbmNlU3RhdHVzKCk6IFByb21pc2U8TWFpbnRlbmFuY2VTdGF0dXMgfCBudWxsPiB7XHJcbiAgICAvLyBDaGVjayBjYWNoZSBmaXJzdFxyXG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcclxuICAgIGlmICh0aGlzLmNhY2hlICYmIChub3cgLSB0aGlzLmNhY2hlVGltZSkgPCB0aGlzLkNBQ0hFX0RVUkFUSU9OKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlO1xyXG4gICAgfVxyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBnZXRNYWludGVuYW5jZUZyb21EQigpO1xyXG4gICAgICBcclxuICAgICAgaWYgKGRhdGEpIHtcclxuICAgICAgICB0aGlzLmNhY2hlID0gZGF0YTtcclxuICAgICAgICB0aGlzLmNhY2hlVGltZSA9IG5vdztcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBtYWludGVuYW5jZSBzdGF0dXM6JywgZXJyb3IpO1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIHNldE1haW50ZW5hbmNlU3RhdHVzKGlzTWFpbnRlbmFuY2U6IGJvb2xlYW4sIGRyb3BEYXRlPzogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zb2xlLmxvZygnU2V0dGluZyBtYWludGVuYW5jZSBzdGF0dXM6JywgeyBpc01haW50ZW5hbmNlLCBkcm9wRGF0ZSB9KTtcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IHN1Y2Nlc3MgPSBhd2FpdCBzZXRNYWludGVuYW5jZVRvREIoaXNNYWludGVuYW5jZSwgZHJvcERhdGUpO1xyXG4gICAgICBcclxuICAgICAgaWYgKHN1Y2Nlc3MpIHtcclxuICAgICAgICAvLyBDbGVhciBjYWNoZSB0byBmb3JjZSByZWZyZXNoXHJcbiAgICAgICAgdGhpcy5jYWNoZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jYWNoZVRpbWUgPSAwO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdNYWludGVuYW5jZSBzdGF0dXMgdXBkYXRlZCBzdWNjZXNzZnVsbHknKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gdXBkYXRlIG1haW50ZW5hbmNlIHN0YXR1cycpO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gc3VjY2VzcztcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHVwZGF0aW5nIG1haW50ZW5hbmNlIHN0YXR1czonLCBlcnJvcik7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIGlzTWFpbnRlbmFuY2VNb2RlKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgY29uc3Qgc3RhdHVzID0gYXdhaXQgdGhpcy5nZXRNYWludGVuYW5jZVN0YXR1cygpO1xyXG4gICAgcmV0dXJuIHN0YXR1cz8uaXNfbWFpbnRlbmFuY2UgfHwgZmFsc2U7XHJcbiAgfVxyXG5cclxuICBhc3luYyBnZXREcm9wRGF0ZSgpOiBQcm9taXNlPHN0cmluZyB8IG51bGw+IHtcclxuICAgIGNvbnN0IHN0YXR1cyA9IGF3YWl0IHRoaXMuZ2V0TWFpbnRlbmFuY2VTdGF0dXMoKTtcclxuICAgIHJldHVybiBzdGF0dXM/LmRyb3BfZGF0ZSB8fCBudWxsO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTWFpbnRlbmFuY2VTZXJ2aWNlLmdldEluc3RhbmNlKCk7XHJcbiJdLCJuYW1lcyI6WyJnZXRNYWludGVuYW5jZVN0YXR1cyIsImdldE1haW50ZW5hbmNlRnJvbURCIiwic2V0TWFpbnRlbmFuY2VTdGF0dXMiLCJzZXRNYWludGVuYW5jZVRvREIiLCJNYWludGVuYW5jZVNlcnZpY2UiLCJnZXRJbnN0YW5jZSIsImluc3RhbmNlIiwibm93IiwiRGF0ZSIsImNhY2hlIiwiY2FjaGVUaW1lIiwiQ0FDSEVfRFVSQVRJT04iLCJkYXRhIiwiZXJyb3IiLCJjb25zb2xlIiwiaXNNYWludGVuYW5jZSIsImRyb3BEYXRlIiwibG9nIiwic3VjY2VzcyIsImlzTWFpbnRlbmFuY2VNb2RlIiwic3RhdHVzIiwiaXNfbWFpbnRlbmFuY2UiLCJnZXREcm9wRGF0ZSIsImRyb3BfZGF0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/maintenanceService.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/optimizedDatabase.ts":
/*!**************************************!*\
  !*** ./src/lib/optimizedDatabase.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addOrder: () => (/* binding */ addOrder),\n/* harmony export */   addProduct: () => (/* binding */ addProduct),\n/* harmony export */   dbCache: () => (/* binding */ dbCache),\n/* harmony export */   deleteOrder: () => (/* binding */ deleteOrder),\n/* harmony export */   deleteProduct: () => (/* binding */ deleteProduct),\n/* harmony export */   getMaintenanceStatus: () => (/* binding */ getMaintenanceStatus),\n/* harmony export */   getOrder: () => (/* binding */ getOrder),\n/* harmony export */   getOrders: () => (/* binding */ getOrders),\n/* harmony export */   getProduct: () => (/* binding */ getProduct),\n/* harmony export */   getProducts: () => (/* binding */ getProducts),\n/* harmony export */   returnStockFromOrder: () => (/* binding */ returnStockFromOrder),\n/* harmony export */   setMaintenanceStatus: () => (/* binding */ setMaintenanceStatus),\n/* harmony export */   supabase: () => (/* binding */ supabase),\n/* harmony export */   updateOrder: () => (/* binding */ updateOrder),\n/* harmony export */   updateProduct: () => (/* binding */ updateProduct)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n// Optimized database service with aggressive caching and connection optimization\n\n// Supabase configuration\nconst supabaseUrl = \"https://zrmxcjklkthpyanfslsw.supabase.co\" || 0;\nconst supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpybXhjamtsa3RocHlhbmZzbHN3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY5MDYxMzAsImV4cCI6MjA3MjQ4MjEzMH0.2Tjh9pPzc6BUGoV3lDUBymXzE_dvAGs1O_WewTdetE0\" || 0;\nif (!supabaseUrl || !supabaseKey) {\n    throw new Error(\"Missing Supabase environment variables\");\n}\n// Create optimized Supabase client with better connection settings\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseKey, {\n    db: {\n        schema: \"public\"\n    },\n    auth: {\n        persistSession: false,\n        autoRefreshToken: false\n    },\n    global: {\n        headers: {\n            \"Cache-Control\": \"max-age=60\"\n        }\n    }\n});\n// Aggressive caching system\nclass DatabaseCache {\n    set(key, data, ttl = this.DEFAULT_TTL) {\n        this.cache.set(key, {\n            data,\n            timestamp: Date.now(),\n            ttl\n        });\n    }\n    get(key) {\n        const item = this.cache.get(key);\n        if (!item) return null;\n        const now = Date.now();\n        if (now - item.timestamp > item.ttl) {\n            this.cache.delete(key);\n            return null;\n        }\n        return item.data;\n    }\n    invalidate(pattern) {\n        if (pattern) {\n            const keysToDelete = [];\n            this.cache.forEach((_, key)=>{\n                if (key.includes(pattern)) {\n                    keysToDelete.push(key);\n                }\n            });\n            keysToDelete.forEach((key)=>this.cache.delete(key));\n        } else {\n            this.cache.clear();\n        }\n    }\n    // Preload critical data\n    async preloadCriticalData() {\n        try {\n            console.log(\"Preloading critical data...\");\n            // Preload products\n            const products = await this.getProducts();\n            this.set(\"products\", products, this.LONG_TTL);\n            // Preload maintenance status\n            const maintenance = await this.getMaintenanceStatus();\n            this.set(\"maintenance\", maintenance, this.DEFAULT_TTL);\n            console.log(\"Critical data preloaded successfully\");\n        } catch (error) {\n            console.error(\"Error preloading data:\", error);\n        }\n    }\n    async getProducts() {\n        const { data, error } = await supabase.from(\"products\").select(\"*\").order(\"created_at\", {\n            ascending: false\n        });\n        if (error) throw error;\n        return (data || []).map(convertDbProductToProduct);\n    }\n    async getMaintenanceStatus() {\n        const { data, error } = await supabase.from(\"maintenance_status\").select(\"*\").single();\n        if (error) throw error;\n        return data;\n    }\n    constructor(){\n        this.cache = new Map();\n        this.DEFAULT_TTL = 60000 // 1 minute default\n        ;\n        this.LONG_TTL = 300000 // 5 minutes for static data\n        ;\n    }\n}\nconst dbCache = new DatabaseCache();\n// Helper function to convert database product to Product interface\nfunction convertDbProductToProduct(dbProduct) {\n    return {\n        id: dbProduct.id,\n        name: dbProduct.name,\n        description: dbProduct.description,\n        price: dbProduct.price,\n        originalPrice: dbProduct.original_price,\n        image: dbProduct.image,\n        images: dbProduct.images || [],\n        stock: dbProduct.stock || {},\n        category: dbProduct.category,\n        sizes: dbProduct.sizes || [],\n        colors: dbProduct.colors || [],\n        inStock: dbProduct.in_stock,\n        status: dbProduct.status || \"available\",\n        rating: dbProduct.rating || 0,\n        reviews: dbProduct.reviews || 0,\n        sku: dbProduct.sku,\n        weight: dbProduct.weight,\n        dimensions: dbProduct.dimensions,\n        tags: dbProduct.tags || [],\n        featured: dbProduct.featured || false,\n        createdAt: new Date(dbProduct.created_at),\n        updatedAt: new Date(dbProduct.updated_at)\n    };\n}\n// Optimized Products operations\nasync function getProducts() {\n    try {\n        // Check cache first\n        const cached = dbCache.get(\"products\");\n        if (cached) {\n            console.log(\"Database: Returning cached products\");\n            return cached;\n        }\n        console.log(\"Database: Fetching products from Supabase\");\n        const { data, error } = await supabase.from(\"products\").select(\"*\").order(\"created_at\", {\n            ascending: false\n        });\n        if (error) {\n            console.error(\"Database getProducts error:\", error);\n            return [];\n        }\n        const products = (data || []).map(convertDbProductToProduct);\n        // Cache for 5 minutes (products don't change often)\n        dbCache.set(\"products\", products, 300000);\n        return products;\n    } catch (error) {\n        console.error(\"Database getProducts error:\", error);\n        return [];\n    }\n}\nasync function getProduct(id) {\n    try {\n        // Check cache first\n        const cached = dbCache.get(`product_${id}`);\n        if (cached) {\n            return cached;\n        }\n        const { data, error } = await supabase.from(\"products\").select(\"*\").eq(\"id\", id).single();\n        if (error) {\n            console.error(\"Database getProduct error:\", error);\n            return null;\n        }\n        const product = convertDbProductToProduct(data);\n        // Cache for 5 minutes\n        dbCache.set(`product_${id}`, product, 300000);\n        return product;\n    } catch (error) {\n        console.error(\"Database getProduct error:\", error);\n        return null;\n    }\n}\nasync function addProduct(product) {\n    try {\n        const dbProduct = {\n            id: product.id,\n            name: product.name,\n            description: product.description,\n            price: product.price,\n            original_price: product.originalPrice,\n            image: product.image,\n            images: product.images || [],\n            stock: product.stock,\n            category: product.category,\n            sizes: product.sizes || [],\n            colors: product.colors || [],\n            in_stock: product.inStock,\n            rating: product.rating,\n            reviews: product.reviews,\n            sku: product.sku,\n            weight: product.weight,\n            dimensions: product.dimensions,\n            tags: product.tags || [],\n            featured: product.featured || false\n        };\n        const { data, error } = await supabase.from(\"products\").insert([\n            dbProduct\n        ]).select().single();\n        if (error) {\n            console.error(\"Database addProduct error:\", error);\n            throw error;\n        }\n        const newProduct = convertDbProductToProduct(data);\n        // Invalidate products cache\n        dbCache.invalidate(\"products\");\n        return newProduct;\n    } catch (error) {\n        console.error(\"Database addProduct error:\", error);\n        throw error;\n    }\n}\nasync function updateProduct(id, updates) {\n    try {\n        const dbUpdates = {};\n        if (updates.name !== undefined) dbUpdates.name = updates.name;\n        if (updates.description !== undefined) dbUpdates.description = updates.description;\n        if (updates.price !== undefined) dbUpdates.price = updates.price;\n        if (updates.originalPrice !== undefined) dbUpdates.original_price = updates.originalPrice;\n        if (updates.image !== undefined) dbUpdates.image = updates.image;\n        if (updates.images !== undefined) dbUpdates.images = updates.images;\n        if (updates.stock !== undefined) dbUpdates.stock = updates.stock;\n        if (updates.category !== undefined) dbUpdates.category = updates.category;\n        if (updates.sizes !== undefined) dbUpdates.sizes = updates.sizes;\n        if (updates.colors !== undefined) dbUpdates.colors = updates.colors;\n        if (updates.inStock !== undefined) dbUpdates.in_stock = updates.inStock;\n        if (updates.rating !== undefined) dbUpdates.rating = updates.rating;\n        if (updates.reviews !== undefined) dbUpdates.reviews = updates.reviews;\n        if (updates.sku !== undefined) dbUpdates.sku = updates.sku;\n        if (updates.weight !== undefined) dbUpdates.weight = updates.weight;\n        if (updates.dimensions !== undefined) dbUpdates.dimensions = updates.dimensions;\n        if (updates.tags !== undefined) dbUpdates.tags = updates.tags;\n        if (updates.featured !== undefined) dbUpdates.featured = updates.featured;\n        const { data, error } = await supabase.from(\"products\").update(dbUpdates).eq(\"id\", id).select().single();\n        if (error) {\n            console.error(\"Database updateProduct error:\", error);\n            throw error;\n        }\n        const updatedProduct = convertDbProductToProduct(data);\n        // Invalidate caches\n        dbCache.invalidate(\"products\");\n        dbCache.invalidate(`product_${id}`);\n        return updatedProduct;\n    } catch (error) {\n        console.error(\"Database updateProduct error:\", error);\n        throw error;\n    }\n}\nasync function deleteProduct(id) {\n    try {\n        const { error } = await supabase.from(\"products\").delete().eq(\"id\", id);\n        if (error) {\n            console.error(\"Database deleteProduct error:\", error);\n            throw error;\n        }\n        // Invalidate caches\n        dbCache.invalidate(\"products\");\n        dbCache.invalidate(`product_${id}`);\n    } catch (error) {\n        console.error(\"Database deleteProduct error:\", error);\n        throw error;\n    }\n}\n// Optimized Orders operations\nasync function getOrders() {\n    try {\n        // Check cache first\n        const cached = dbCache.get(\"orders\");\n        if (cached) {\n            console.log(\"Database: Returning cached orders\");\n            return cached;\n        }\n        console.log(\"Database: Fetching orders from Supabase\");\n        const { data, error } = await supabase.from(\"orders\").select(\"*\").order(\"created_at\", {\n            ascending: false\n        });\n        if (error) {\n            console.error(\"Database getOrders error:\", error);\n            return [];\n        }\n        const orders = (data || []).map((order)=>({\n                ...order,\n                createdAt: new Date(order.created_at),\n                updatedAt: new Date(order.updated_at)\n            }));\n        // Cache for 1 minute (orders change more frequently)\n        dbCache.set(\"orders\", orders, 60000);\n        return orders;\n    } catch (error) {\n        console.error(\"Database getOrders error:\", error);\n        return [];\n    }\n}\nasync function getOrder(id) {\n    try {\n        // Check cache first\n        const cached = dbCache.get(`order_${id}`);\n        if (cached) {\n            return cached;\n        }\n        const { data, error } = await supabase.from(\"orders\").select(\"*\").eq(\"id\", id).single();\n        if (error) {\n            console.error(\"Database getOrder error:\", error);\n            return null;\n        }\n        const order = {\n            ...data,\n            createdAt: new Date(data.created_at),\n            updatedAt: new Date(data.updated_at)\n        };\n        // Cache for 1 minute\n        dbCache.set(`order_${id}`, order, 60000);\n        return order;\n    } catch (error) {\n        console.error(\"Database getOrder error:\", error);\n        return null;\n    }\n}\nasync function addOrder(order) {\n    try {\n        const dbOrder = {\n            id: order.id,\n            product_id: order.productId,\n            product_name: order.productName,\n            product_image: order.productImage,\n            customer_name: order.customerName,\n            customer_email: order.customerEmail,\n            customer_phone: order.customerPhone,\n            customer_address: order.customerAddress,\n            wilaya_id: order.wilayaId,\n            wilaya_name: order.wilayaName,\n            shipping_type: order.shippingType,\n            shipping_cost: order.shippingCost,\n            quantity: order.quantity,\n            selected_size: order.selectedSize,\n            selected_color: order.selectedColor,\n            subtotal: order.subtotal,\n            total: order.total,\n            status: order.status,\n            tracking_number: order.trackingNumber,\n            notes: order.notes,\n            payment_method: order.paymentMethod,\n            payment_status: order.paymentStatus,\n            estimated_delivery: order.estimatedDelivery,\n            order_date: order.orderDate,\n            created_at: order.createdAt,\n            updated_at: order.updatedAt\n        };\n        const { data, error } = await supabase.from(\"orders\").insert([\n            dbOrder\n        ]).select().single();\n        if (error) {\n            console.error(\"Database addOrder error:\", error);\n            throw error;\n        }\n        const newOrder = {\n            ...data,\n            createdAt: new Date(data.created_at),\n            updatedAt: new Date(data.updated_at)\n        };\n        // Invalidate orders cache\n        dbCache.invalidate(\"orders\");\n        return newOrder;\n    } catch (error) {\n        console.error(\"Database addOrder error:\", error);\n        throw error;\n    }\n}\nasync function updateOrder(id, updates) {\n    try {\n        const dbUpdates = {};\n        if (updates.status !== undefined) dbUpdates.status = updates.status;\n        if (updates.customerName !== undefined) dbUpdates.customer_name = updates.customerName;\n        if (updates.customerEmail !== undefined) dbUpdates.customer_email = updates.customerEmail;\n        if (updates.customerPhone !== undefined) dbUpdates.customer_phone = updates.customerPhone;\n        if (updates.customerAddress !== undefined) dbUpdates.customer_address = updates.customerAddress;\n        if (updates.total !== undefined) dbUpdates.total = updates.total;\n        if (updates.paymentMethod !== undefined) dbUpdates.payment_method = updates.paymentMethod;\n        if (updates.notes !== undefined) dbUpdates.notes = updates.notes;\n        const { data, error } = await supabase.from(\"orders\").update(dbUpdates).eq(\"id\", id).select().single();\n        if (error) {\n            console.error(\"Database updateOrder error:\", error);\n            throw error;\n        }\n        const updatedOrder = {\n            ...data,\n            createdAt: new Date(data.created_at),\n            updatedAt: new Date(data.updated_at)\n        };\n        // Invalidate caches\n        dbCache.invalidate(\"orders\");\n        dbCache.invalidate(`order_${id}`);\n        return updatedOrder;\n    } catch (error) {\n        console.error(\"Database updateOrder error:\", error);\n        throw error;\n    }\n}\nasync function deleteOrder(id) {\n    try {\n        // First, get the order to return stock\n        const order = await getOrder(id);\n        if (order) {\n            // Return stock for the order\n            await returnStockFromOrder(order);\n        }\n        const { error } = await supabase.from(\"orders\").delete().eq(\"id\", id);\n        if (error) {\n            console.error(\"Database deleteOrder error:\", error);\n            throw error;\n        }\n        // Invalidate caches\n        dbCache.invalidate(\"orders\");\n        dbCache.invalidate(`order_${id}`);\n        dbCache.invalidate(\"products\"); // Invalidate products cache since stock changed\n    } catch (error) {\n        console.error(\"Database deleteOrder error:\", error);\n        throw error;\n    }\n}\n// Optimized Maintenance operations\nasync function getMaintenanceStatus() {\n    try {\n        // Check cache first\n        const cached = dbCache.get(\"maintenance\");\n        if (cached) {\n            return cached;\n        }\n        const { data, error } = await supabase.from(\"maintenance_status\").select(\"*\").single();\n        if (error) {\n            console.error(\"Database getMaintenanceStatus error:\", error);\n            return null;\n        }\n        // Cache for 30 seconds\n        dbCache.set(\"maintenance\", data, 30000);\n        return data;\n    } catch (error) {\n        console.error(\"Database getMaintenanceStatus error:\", error);\n        return null;\n    }\n}\nasync function setMaintenanceStatus(isMaintenance, dropDate) {\n    try {\n        const { error } = await supabase.from(\"maintenance_status\").upsert({\n            id: \"maintenance\",\n            is_maintenance: isMaintenance,\n            drop_date: dropDate || new Date().toISOString(),\n            updated_at: new Date().toISOString()\n        });\n        if (error) {\n            console.error(\"Database setMaintenanceStatus error:\", error);\n            return false;\n        }\n        // Invalidate maintenance cache\n        dbCache.invalidate(\"maintenance\");\n        return true;\n    } catch (error) {\n        console.error(\"Database setMaintenanceStatus error:\", error);\n        return false;\n    }\n}\n// Stock return function for cancelled/deleted orders\nasync function returnStockFromOrder(order) {\n    try {\n        console.log(\"Database: Returning stock for order:\", order.id);\n        // Get the product\n        const product = await getProduct(order.productId);\n        if (!product) {\n            console.error(\"Database: Product not found for order:\", order.productId);\n            return false;\n        }\n        // Get current stock\n        const currentStock = product.stock?.[order.selectedSize]?.[order.selectedColor] || 0;\n        // Return the stock\n        const newStock = {\n            ...product.stock,\n            [order.selectedSize]: {\n                ...product.stock?.[order.selectedSize],\n                [order.selectedColor]: currentStock + order.quantity\n            }\n        };\n        // Update the product stock\n        const updatedProduct = await updateProduct(order.productId, {\n            stock: newStock,\n            inStock: calculateTotalStock(newStock) > 0\n        });\n        if (updatedProduct) {\n            console.log(\"Database: Successfully returned stock for order:\", order.id, {\n                productId: order.productId,\n                size: order.selectedSize,\n                color: order.selectedColor,\n                quantity: order.quantity,\n                newTotalStock: calculateTotalStock(newStock)\n            });\n            // Invalidate product cache\n            dbCache.invalidate(\"products\");\n            dbCache.invalidate(`product_${order.productId}`);\n            return true;\n        } else {\n            console.error(\"Database: Failed to return product stock for order:\", order.id);\n            return false;\n        }\n    } catch (error) {\n        console.error(\"Database: Error returning stock for order:\", error);\n        return false;\n    }\n}\n// Helper function to calculate total stock\nfunction calculateTotalStock(stock) {\n    if (!stock || typeof stock !== \"object\") return 0;\n    let total = 0;\n    Object.values(stock).forEach((colorStock)=>{\n        if (colorStock && typeof colorStock === \"object\") {\n            Object.values(colorStock).forEach((qty)=>{\n                if (typeof qty === \"number\") {\n                    total += qty;\n                }\n            });\n        }\n    });\n    return total;\n}\n// Initialize cache on module load\nif (false) {}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QXVERyxNQUFNUSxFQUFFO1lBQzdFLE9BQU87UUFDVDtJQUNGLEVBQUUsT0FBT1gsT0FBTztRQUNkUCxRQUFRTyxLQUFLLENBQUMsOENBQThDQTtRQUM1RCxPQUFPO0lBQ1Q7QUFDRjtBQUVBLDJDQUEyQztBQUMzQyxTQUFTOEcsb0JBQW9CM0YsS0FBVTtJQUNyQyxJQUFJLENBQUNBLFNBQVMsT0FBT0EsVUFBVSxVQUFVLE9BQU87SUFFaEQsSUFBSWlFLFFBQVE7SUFDWjhCLE9BQU9DLE1BQU0sQ0FBQ2hHLE9BQU9oQyxPQUFPLENBQUMsQ0FBQ2lJO1FBQzVCLElBQUlBLGNBQWMsT0FBT0EsZUFBZSxVQUFVO1lBQ2hERixPQUFPQyxNQUFNLENBQUNDLFlBQVlqSSxPQUFPLENBQUMsQ0FBQ2tJO2dCQUNqQyxJQUFJLE9BQU9BLFFBQVEsVUFBVTtvQkFDM0JqQyxTQUFTaUM7Z0JBQ1g7WUFDRjtRQUNGO0lBQ0Y7SUFFQSxPQUFPakM7QUFDVDtBQUVBLGtDQUFrQztBQUNsQyxJQUFJLEtBQWtCLEVBQWEsRUFHbEM7QUFFNEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vYnNpZGlhbi13ZWFyLy4vc3JjL2xpYi9vcHRpbWl6ZWREYXRhYmFzZS50cz83ZmMwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIE9wdGltaXplZCBkYXRhYmFzZSBzZXJ2aWNlIHdpdGggYWdncmVzc2l2ZSBjYWNoaW5nIGFuZCBjb25uZWN0aW9uIG9wdGltaXphdGlvblxyXG5pbXBvcnQgeyBjcmVhdGVDbGllbnQgfSBmcm9tICdAc3VwYWJhc2Uvc3VwYWJhc2UtanMnO1xyXG5pbXBvcnQgeyBQcm9kdWN0LCBPcmRlciB9IGZyb20gJ0AvdHlwZXMnO1xyXG5cclxuLy8gU3VwYWJhc2UgY29uZmlndXJhdGlvblxyXG5jb25zdCBzdXBhYmFzZVVybCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCB8fCAnaHR0cHM6Ly96cm14Y2prbGt0aHB5YW5mc2xzdy5zdXBhYmFzZS5jbyc7XHJcbmNvbnN0IHN1cGFiYXNlS2V5ID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1VQQUJBU0VfQU5PTl9LRVkgfHwgJ2V5SmhiR2NpT2lKSVV6STFOaUlzSW5SNWNDSTZJa3BYVkNKOS5leUpwYzNNaU9pSnpkWEJoWW1GelpTSXNJbkpsWmlJNklucHliWGhqYW10c2EzUm9jSGxoYm1aemJITjNJaXdpY205c1pTSTZJbUZ1YjI0aUxDSnBZWFFpT2pFM05UWTVNRFl4TXpBc0ltVjRjQ0k2TWpBM01qUTRNakV6TUgwLjJUamg5cFB6YzZCVUdvVjNsRFVCeW1YekVfZHZBR3MxT19XZXdUZGV0RTAnO1xyXG5cclxuaWYgKCFzdXBhYmFzZVVybCB8fCAhc3VwYWJhc2VLZXkpIHtcclxuICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgU3VwYWJhc2UgZW52aXJvbm1lbnQgdmFyaWFibGVzJyk7XHJcbn1cclxuXHJcbi8vIENyZWF0ZSBvcHRpbWl6ZWQgU3VwYWJhc2UgY2xpZW50IHdpdGggYmV0dGVyIGNvbm5lY3Rpb24gc2V0dGluZ3NcclxuY29uc3Qgc3VwYWJhc2UgPSBjcmVhdGVDbGllbnQoc3VwYWJhc2VVcmwsIHN1cGFiYXNlS2V5LCB7XHJcbiAgZGI6IHtcclxuICAgIHNjaGVtYTogJ3B1YmxpYycsXHJcbiAgfSxcclxuICBhdXRoOiB7XHJcbiAgICBwZXJzaXN0U2Vzc2lvbjogZmFsc2UsIC8vIERvbid0IHBlcnNpc3QgYXV0aCBzZXNzaW9ucyBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlXHJcbiAgICBhdXRvUmVmcmVzaFRva2VuOiBmYWxzZSwgLy8gRGlzYWJsZSBhdXRvIHJlZnJlc2ggZm9yIGJldHRlciBwZXJmb3JtYW5jZVxyXG4gIH0sXHJcbiAgZ2xvYmFsOiB7XHJcbiAgICBoZWFkZXJzOiB7XHJcbiAgICAgICdDYWNoZS1Db250cm9sJzogJ21heC1hZ2U9NjAnLCAvLyBBZGQgY2FjaGUgaGVhZGVyc1xyXG4gICAgfSxcclxuICB9LFxyXG59KTtcclxuXHJcbi8vIEFnZ3Jlc3NpdmUgY2FjaGluZyBzeXN0ZW1cclxuY2xhc3MgRGF0YWJhc2VDYWNoZSB7XHJcbiAgcHJpdmF0ZSBjYWNoZSA9IG5ldyBNYXA8c3RyaW5nLCB7IGRhdGE6IGFueTsgdGltZXN0YW1wOiBudW1iZXI7IHR0bDogbnVtYmVyIH0+KCk7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBERUZBVUxUX1RUTCA9IDYwMDAwOyAvLyAxIG1pbnV0ZSBkZWZhdWx0XHJcbiAgcHJpdmF0ZSByZWFkb25seSBMT05HX1RUTCA9IDMwMDAwMDsgLy8gNSBtaW51dGVzIGZvciBzdGF0aWMgZGF0YVxyXG5cclxuICBzZXQoa2V5OiBzdHJpbmcsIGRhdGE6IGFueSwgdHRsOiBudW1iZXIgPSB0aGlzLkRFRkFVTFRfVFRMKSB7XHJcbiAgICB0aGlzLmNhY2hlLnNldChrZXksIHtcclxuICAgICAgZGF0YSxcclxuICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxyXG4gICAgICB0dGxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZ2V0KGtleTogc3RyaW5nKTogYW55IHwgbnVsbCB7XHJcbiAgICBjb25zdCBpdGVtID0gdGhpcy5jYWNoZS5nZXQoa2V5KTtcclxuICAgIGlmICghaXRlbSkgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcclxuICAgIGlmIChub3cgLSBpdGVtLnRpbWVzdGFtcCA+IGl0ZW0udHRsKSB7XHJcbiAgICAgIHRoaXMuY2FjaGUuZGVsZXRlKGtleSk7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBpdGVtLmRhdGE7XHJcbiAgfVxyXG5cclxuICBpbnZhbGlkYXRlKHBhdHRlcm4/OiBzdHJpbmcpIHtcclxuICAgIGlmIChwYXR0ZXJuKSB7XHJcbiAgICAgIGNvbnN0IGtleXNUb0RlbGV0ZTogc3RyaW5nW10gPSBbXTtcclxuICAgICAgdGhpcy5jYWNoZS5mb3JFYWNoKChfLCBrZXkpID0+IHtcclxuICAgICAgICBpZiAoa2V5LmluY2x1ZGVzKHBhdHRlcm4pKSB7XHJcbiAgICAgICAgICBrZXlzVG9EZWxldGUucHVzaChrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIGtleXNUb0RlbGV0ZS5mb3JFYWNoKGtleSA9PiB0aGlzLmNhY2hlLmRlbGV0ZShrZXkpKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuY2FjaGUuY2xlYXIoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFByZWxvYWQgY3JpdGljYWwgZGF0YVxyXG4gIGFzeW5jIHByZWxvYWRDcml0aWNhbERhdGEoKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zb2xlLmxvZygnUHJlbG9hZGluZyBjcml0aWNhbCBkYXRhLi4uJyk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBQcmVsb2FkIHByb2R1Y3RzXHJcbiAgICAgIGNvbnN0IHByb2R1Y3RzID0gYXdhaXQgdGhpcy5nZXRQcm9kdWN0cygpO1xyXG4gICAgICB0aGlzLnNldCgncHJvZHVjdHMnLCBwcm9kdWN0cywgdGhpcy5MT05HX1RUTCk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBQcmVsb2FkIG1haW50ZW5hbmNlIHN0YXR1c1xyXG4gICAgICBjb25zdCBtYWludGVuYW5jZSA9IGF3YWl0IHRoaXMuZ2V0TWFpbnRlbmFuY2VTdGF0dXMoKTtcclxuICAgICAgdGhpcy5zZXQoJ21haW50ZW5hbmNlJywgbWFpbnRlbmFuY2UsIHRoaXMuREVGQVVMVF9UVEwpO1xyXG4gICAgICBcclxuICAgICAgY29uc29sZS5sb2coJ0NyaXRpY2FsIGRhdGEgcHJlbG9hZGVkIHN1Y2Nlc3NmdWxseScpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcHJlbG9hZGluZyBkYXRhOicsIGVycm9yKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgYXN5bmMgZ2V0UHJvZHVjdHMoKTogUHJvbWlzZTxQcm9kdWN0W10+IHtcclxuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgIC5mcm9tKCdwcm9kdWN0cycpXHJcbiAgICAgIC5zZWxlY3QoJyonKVxyXG4gICAgICAub3JkZXIoJ2NyZWF0ZWRfYXQnLCB7IGFzY2VuZGluZzogZmFsc2UgfSk7XHJcblxyXG4gICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvcjtcclxuICAgIHJldHVybiAoZGF0YSB8fCBbXSkubWFwKGNvbnZlcnREYlByb2R1Y3RUb1Byb2R1Y3QpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhc3luYyBnZXRNYWludGVuYW5jZVN0YXR1cygpIHtcclxuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgIC5mcm9tKCdtYWludGVuYW5jZV9zdGF0dXMnKVxyXG4gICAgICAuc2VsZWN0KCcqJylcclxuICAgICAgLnNpbmdsZSgpO1xyXG5cclxuICAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3I7XHJcbiAgICByZXR1cm4gZGF0YTtcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IGRiQ2FjaGUgPSBuZXcgRGF0YWJhc2VDYWNoZSgpO1xyXG5cclxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNvbnZlcnQgZGF0YWJhc2UgcHJvZHVjdCB0byBQcm9kdWN0IGludGVyZmFjZVxyXG5mdW5jdGlvbiBjb252ZXJ0RGJQcm9kdWN0VG9Qcm9kdWN0KGRiUHJvZHVjdDogYW55KTogUHJvZHVjdCB7XHJcbiAgcmV0dXJuIHtcclxuICAgIGlkOiBkYlByb2R1Y3QuaWQsXHJcbiAgICBuYW1lOiBkYlByb2R1Y3QubmFtZSxcclxuICAgIGRlc2NyaXB0aW9uOiBkYlByb2R1Y3QuZGVzY3JpcHRpb24sXHJcbiAgICBwcmljZTogZGJQcm9kdWN0LnByaWNlLFxyXG4gICAgb3JpZ2luYWxQcmljZTogZGJQcm9kdWN0Lm9yaWdpbmFsX3ByaWNlLFxyXG4gICAgaW1hZ2U6IGRiUHJvZHVjdC5pbWFnZSxcclxuICAgIGltYWdlczogZGJQcm9kdWN0LmltYWdlcyB8fCBbXSxcclxuICAgIHN0b2NrOiBkYlByb2R1Y3Quc3RvY2sgfHwge30sXHJcbiAgICBjYXRlZ29yeTogZGJQcm9kdWN0LmNhdGVnb3J5LFxyXG4gICAgc2l6ZXM6IGRiUHJvZHVjdC5zaXplcyB8fCBbXSxcclxuICAgIGNvbG9yczogZGJQcm9kdWN0LmNvbG9ycyB8fCBbXSxcclxuICAgIGluU3RvY2s6IGRiUHJvZHVjdC5pbl9zdG9jayxcclxuICAgIHN0YXR1czogZGJQcm9kdWN0LnN0YXR1cyB8fCAnYXZhaWxhYmxlJyxcclxuICAgIHJhdGluZzogZGJQcm9kdWN0LnJhdGluZyB8fCAwLFxyXG4gICAgcmV2aWV3czogZGJQcm9kdWN0LnJldmlld3MgfHwgMCxcclxuICAgIHNrdTogZGJQcm9kdWN0LnNrdSxcclxuICAgIHdlaWdodDogZGJQcm9kdWN0LndlaWdodCxcclxuICAgIGRpbWVuc2lvbnM6IGRiUHJvZHVjdC5kaW1lbnNpb25zLFxyXG4gICAgdGFnczogZGJQcm9kdWN0LnRhZ3MgfHwgW10sXHJcbiAgICBmZWF0dXJlZDogZGJQcm9kdWN0LmZlYXR1cmVkIHx8IGZhbHNlLFxyXG4gICAgY3JlYXRlZEF0OiBuZXcgRGF0ZShkYlByb2R1Y3QuY3JlYXRlZF9hdCksXHJcbiAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKGRiUHJvZHVjdC51cGRhdGVkX2F0KVxyXG4gIH07XHJcbn1cclxuXHJcbi8vIE9wdGltaXplZCBQcm9kdWN0cyBvcGVyYXRpb25zXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRQcm9kdWN0cygpOiBQcm9taXNlPFByb2R1Y3RbXT4ge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBDaGVjayBjYWNoZSBmaXJzdFxyXG4gICAgY29uc3QgY2FjaGVkID0gZGJDYWNoZS5nZXQoJ3Byb2R1Y3RzJyk7XHJcbiAgICBpZiAoY2FjaGVkKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdEYXRhYmFzZTogUmV0dXJuaW5nIGNhY2hlZCBwcm9kdWN0cycpO1xyXG4gICAgICByZXR1cm4gY2FjaGVkO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnNvbGUubG9nKCdEYXRhYmFzZTogRmV0Y2hpbmcgcHJvZHVjdHMgZnJvbSBTdXBhYmFzZScpO1xyXG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcclxuICAgICAgLmZyb20oJ3Byb2R1Y3RzJylcclxuICAgICAgLnNlbGVjdCgnKicpXHJcbiAgICAgIC5vcmRlcignY3JlYXRlZF9hdCcsIHsgYXNjZW5kaW5nOiBmYWxzZSB9KTtcclxuICAgIFxyXG4gICAgaWYgKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0RhdGFiYXNlIGdldFByb2R1Y3RzIGVycm9yOicsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjb25zdCBwcm9kdWN0cyA9IChkYXRhIHx8IFtdKS5tYXAoY29udmVydERiUHJvZHVjdFRvUHJvZHVjdCk7XHJcbiAgICBcclxuICAgIC8vIENhY2hlIGZvciA1IG1pbnV0ZXMgKHByb2R1Y3RzIGRvbid0IGNoYW5nZSBvZnRlbilcclxuICAgIGRiQ2FjaGUuc2V0KCdwcm9kdWN0cycsIHByb2R1Y3RzLCAzMDAwMDApO1xyXG4gICAgXHJcbiAgICByZXR1cm4gcHJvZHVjdHM7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0RhdGFiYXNlIGdldFByb2R1Y3RzIGVycm9yOicsIGVycm9yKTtcclxuICAgIHJldHVybiBbXTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRQcm9kdWN0KGlkOiBzdHJpbmcpOiBQcm9taXNlPFByb2R1Y3QgfCBudWxsPiB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIENoZWNrIGNhY2hlIGZpcnN0XHJcbiAgICBjb25zdCBjYWNoZWQgPSBkYkNhY2hlLmdldChgcHJvZHVjdF8ke2lkfWApO1xyXG4gICAgaWYgKGNhY2hlZCkge1xyXG4gICAgICByZXR1cm4gY2FjaGVkO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgIC5mcm9tKCdwcm9kdWN0cycpXHJcbiAgICAgIC5zZWxlY3QoJyonKVxyXG4gICAgICAuZXEoJ2lkJywgaWQpXHJcbiAgICAgIC5zaW5nbGUoKTtcclxuICAgIFxyXG4gICAgaWYgKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0RhdGFiYXNlIGdldFByb2R1Y3QgZXJyb3I6JywgZXJyb3IpO1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgY29uc3QgcHJvZHVjdCA9IGNvbnZlcnREYlByb2R1Y3RUb1Byb2R1Y3QoZGF0YSk7XHJcbiAgICBcclxuICAgIC8vIENhY2hlIGZvciA1IG1pbnV0ZXNcclxuICAgIGRiQ2FjaGUuc2V0KGBwcm9kdWN0XyR7aWR9YCwgcHJvZHVjdCwgMzAwMDAwKTtcclxuICAgIFxyXG4gICAgcmV0dXJuIHByb2R1Y3Q7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0RhdGFiYXNlIGdldFByb2R1Y3QgZXJyb3I6JywgZXJyb3IpO1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYWRkUHJvZHVjdChwcm9kdWN0OiBQcm9kdWN0KTogUHJvbWlzZTxQcm9kdWN0PiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGRiUHJvZHVjdCA9IHtcclxuICAgICAgaWQ6IHByb2R1Y3QuaWQsXHJcbiAgICAgIG5hbWU6IHByb2R1Y3QubmFtZSxcclxuICAgICAgZGVzY3JpcHRpb246IHByb2R1Y3QuZGVzY3JpcHRpb24sXHJcbiAgICAgIHByaWNlOiBwcm9kdWN0LnByaWNlLFxyXG4gICAgICBvcmlnaW5hbF9wcmljZTogcHJvZHVjdC5vcmlnaW5hbFByaWNlLFxyXG4gICAgICBpbWFnZTogcHJvZHVjdC5pbWFnZSxcclxuICAgICAgaW1hZ2VzOiBwcm9kdWN0LmltYWdlcyB8fCBbXSxcclxuICAgICAgc3RvY2s6IHByb2R1Y3Quc3RvY2ssXHJcbiAgICAgIGNhdGVnb3J5OiBwcm9kdWN0LmNhdGVnb3J5LFxyXG4gICAgICBzaXplczogcHJvZHVjdC5zaXplcyB8fCBbXSxcclxuICAgICAgY29sb3JzOiBwcm9kdWN0LmNvbG9ycyB8fCBbXSxcclxuICAgICAgaW5fc3RvY2s6IHByb2R1Y3QuaW5TdG9jayxcclxuICAgICAgcmF0aW5nOiBwcm9kdWN0LnJhdGluZyxcclxuICAgICAgcmV2aWV3czogcHJvZHVjdC5yZXZpZXdzLFxyXG4gICAgICBza3U6IHByb2R1Y3Quc2t1LFxyXG4gICAgICB3ZWlnaHQ6IHByb2R1Y3Qud2VpZ2h0LFxyXG4gICAgICBkaW1lbnNpb25zOiBwcm9kdWN0LmRpbWVuc2lvbnMsXHJcbiAgICAgIHRhZ3M6IHByb2R1Y3QudGFncyB8fCBbXSxcclxuICAgICAgZmVhdHVyZWQ6IHByb2R1Y3QuZmVhdHVyZWQgfHwgZmFsc2VcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcclxuICAgICAgLmZyb20oJ3Byb2R1Y3RzJylcclxuICAgICAgLmluc2VydChbZGJQcm9kdWN0XSlcclxuICAgICAgLnNlbGVjdCgpXHJcbiAgICAgIC5zaW5nbGUoKTtcclxuICAgIFxyXG4gICAgaWYgKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0RhdGFiYXNlIGFkZFByb2R1Y3QgZXJyb3I6JywgZXJyb3IpO1xyXG4gICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH1cclxuICAgIFxyXG4gICAgY29uc3QgbmV3UHJvZHVjdCA9IGNvbnZlcnREYlByb2R1Y3RUb1Byb2R1Y3QoZGF0YSk7XHJcbiAgICBcclxuICAgIC8vIEludmFsaWRhdGUgcHJvZHVjdHMgY2FjaGVcclxuICAgIGRiQ2FjaGUuaW52YWxpZGF0ZSgncHJvZHVjdHMnKTtcclxuICAgIFxyXG4gICAgcmV0dXJuIG5ld1Byb2R1Y3Q7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0RhdGFiYXNlIGFkZFByb2R1Y3QgZXJyb3I6JywgZXJyb3IpO1xyXG4gICAgdGhyb3cgZXJyb3I7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBkYXRlUHJvZHVjdChpZDogc3RyaW5nLCB1cGRhdGVzOiBQYXJ0aWFsPFByb2R1Y3Q+KTogUHJvbWlzZTxQcm9kdWN0PiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGRiVXBkYXRlczogYW55ID0ge307XHJcbiAgICBcclxuICAgIGlmICh1cGRhdGVzLm5hbWUgIT09IHVuZGVmaW5lZCkgZGJVcGRhdGVzLm5hbWUgPSB1cGRhdGVzLm5hbWU7XHJcbiAgICBpZiAodXBkYXRlcy5kZXNjcmlwdGlvbiAhPT0gdW5kZWZpbmVkKSBkYlVwZGF0ZXMuZGVzY3JpcHRpb24gPSB1cGRhdGVzLmRlc2NyaXB0aW9uO1xyXG4gICAgaWYgKHVwZGF0ZXMucHJpY2UgIT09IHVuZGVmaW5lZCkgZGJVcGRhdGVzLnByaWNlID0gdXBkYXRlcy5wcmljZTtcclxuICAgIGlmICh1cGRhdGVzLm9yaWdpbmFsUHJpY2UgIT09IHVuZGVmaW5lZCkgZGJVcGRhdGVzLm9yaWdpbmFsX3ByaWNlID0gdXBkYXRlcy5vcmlnaW5hbFByaWNlO1xyXG4gICAgaWYgKHVwZGF0ZXMuaW1hZ2UgIT09IHVuZGVmaW5lZCkgZGJVcGRhdGVzLmltYWdlID0gdXBkYXRlcy5pbWFnZTtcclxuICAgIGlmICh1cGRhdGVzLmltYWdlcyAhPT0gdW5kZWZpbmVkKSBkYlVwZGF0ZXMuaW1hZ2VzID0gdXBkYXRlcy5pbWFnZXM7XHJcbiAgICBpZiAodXBkYXRlcy5zdG9jayAhPT0gdW5kZWZpbmVkKSBkYlVwZGF0ZXMuc3RvY2sgPSB1cGRhdGVzLnN0b2NrO1xyXG4gICAgaWYgKHVwZGF0ZXMuY2F0ZWdvcnkgIT09IHVuZGVmaW5lZCkgZGJVcGRhdGVzLmNhdGVnb3J5ID0gdXBkYXRlcy5jYXRlZ29yeTtcclxuICAgIGlmICh1cGRhdGVzLnNpemVzICE9PSB1bmRlZmluZWQpIGRiVXBkYXRlcy5zaXplcyA9IHVwZGF0ZXMuc2l6ZXM7XHJcbiAgICBpZiAodXBkYXRlcy5jb2xvcnMgIT09IHVuZGVmaW5lZCkgZGJVcGRhdGVzLmNvbG9ycyA9IHVwZGF0ZXMuY29sb3JzO1xyXG4gICAgaWYgKHVwZGF0ZXMuaW5TdG9jayAhPT0gdW5kZWZpbmVkKSBkYlVwZGF0ZXMuaW5fc3RvY2sgPSB1cGRhdGVzLmluU3RvY2s7XHJcbiAgICBpZiAodXBkYXRlcy5yYXRpbmcgIT09IHVuZGVmaW5lZCkgZGJVcGRhdGVzLnJhdGluZyA9IHVwZGF0ZXMucmF0aW5nO1xyXG4gICAgaWYgKHVwZGF0ZXMucmV2aWV3cyAhPT0gdW5kZWZpbmVkKSBkYlVwZGF0ZXMucmV2aWV3cyA9IHVwZGF0ZXMucmV2aWV3cztcclxuICAgIGlmICh1cGRhdGVzLnNrdSAhPT0gdW5kZWZpbmVkKSBkYlVwZGF0ZXMuc2t1ID0gdXBkYXRlcy5za3U7XHJcbiAgICBpZiAodXBkYXRlcy53ZWlnaHQgIT09IHVuZGVmaW5lZCkgZGJVcGRhdGVzLndlaWdodCA9IHVwZGF0ZXMud2VpZ2h0O1xyXG4gICAgaWYgKHVwZGF0ZXMuZGltZW5zaW9ucyAhPT0gdW5kZWZpbmVkKSBkYlVwZGF0ZXMuZGltZW5zaW9ucyA9IHVwZGF0ZXMuZGltZW5zaW9ucztcclxuICAgIGlmICh1cGRhdGVzLnRhZ3MgIT09IHVuZGVmaW5lZCkgZGJVcGRhdGVzLnRhZ3MgPSB1cGRhdGVzLnRhZ3M7XHJcbiAgICBpZiAodXBkYXRlcy5mZWF0dXJlZCAhPT0gdW5kZWZpbmVkKSBkYlVwZGF0ZXMuZmVhdHVyZWQgPSB1cGRhdGVzLmZlYXR1cmVkO1xyXG5cclxuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgIC5mcm9tKCdwcm9kdWN0cycpXHJcbiAgICAgIC51cGRhdGUoZGJVcGRhdGVzKVxyXG4gICAgICAuZXEoJ2lkJywgaWQpXHJcbiAgICAgIC5zZWxlY3QoKVxyXG4gICAgICAuc2luZ2xlKCk7XHJcbiAgICBcclxuICAgIGlmIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdEYXRhYmFzZSB1cGRhdGVQcm9kdWN0IGVycm9yOicsIGVycm9yKTtcclxuICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNvbnN0IHVwZGF0ZWRQcm9kdWN0ID0gY29udmVydERiUHJvZHVjdFRvUHJvZHVjdChkYXRhKTtcclxuICAgIFxyXG4gICAgLy8gSW52YWxpZGF0ZSBjYWNoZXNcclxuICAgIGRiQ2FjaGUuaW52YWxpZGF0ZSgncHJvZHVjdHMnKTtcclxuICAgIGRiQ2FjaGUuaW52YWxpZGF0ZShgcHJvZHVjdF8ke2lkfWApO1xyXG4gICAgXHJcbiAgICByZXR1cm4gdXBkYXRlZFByb2R1Y3Q7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0RhdGFiYXNlIHVwZGF0ZVByb2R1Y3QgZXJyb3I6JywgZXJyb3IpO1xyXG4gICAgdGhyb3cgZXJyb3I7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVsZXRlUHJvZHVjdChpZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgIC5mcm9tKCdwcm9kdWN0cycpXHJcbiAgICAgIC5kZWxldGUoKVxyXG4gICAgICAuZXEoJ2lkJywgaWQpO1xyXG4gICAgXHJcbiAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRGF0YWJhc2UgZGVsZXRlUHJvZHVjdCBlcnJvcjonLCBlcnJvcik7XHJcbiAgICAgIHRocm93IGVycm9yO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBJbnZhbGlkYXRlIGNhY2hlc1xyXG4gICAgZGJDYWNoZS5pbnZhbGlkYXRlKCdwcm9kdWN0cycpO1xyXG4gICAgZGJDYWNoZS5pbnZhbGlkYXRlKGBwcm9kdWN0XyR7aWR9YCk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0RhdGFiYXNlIGRlbGV0ZVByb2R1Y3QgZXJyb3I6JywgZXJyb3IpO1xyXG4gICAgdGhyb3cgZXJyb3I7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBPcHRpbWl6ZWQgT3JkZXJzIG9wZXJhdGlvbnNcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldE9yZGVycygpOiBQcm9taXNlPE9yZGVyW10+IHtcclxuICB0cnkge1xyXG4gICAgLy8gQ2hlY2sgY2FjaGUgZmlyc3RcclxuICAgIGNvbnN0IGNhY2hlZCA9IGRiQ2FjaGUuZ2V0KCdvcmRlcnMnKTtcclxuICAgIGlmIChjYWNoZWQpIHtcclxuICAgICAgY29uc29sZS5sb2coJ0RhdGFiYXNlOiBSZXR1cm5pbmcgY2FjaGVkIG9yZGVycycpO1xyXG4gICAgICByZXR1cm4gY2FjaGVkO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnNvbGUubG9nKCdEYXRhYmFzZTogRmV0Y2hpbmcgb3JkZXJzIGZyb20gU3VwYWJhc2UnKTtcclxuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgIC5mcm9tKCdvcmRlcnMnKVxyXG4gICAgICAuc2VsZWN0KCcqJylcclxuICAgICAgLm9yZGVyKCdjcmVhdGVkX2F0JywgeyBhc2NlbmRpbmc6IGZhbHNlIH0pO1xyXG4gICAgXHJcbiAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRGF0YWJhc2UgZ2V0T3JkZXJzIGVycm9yOicsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjb25zdCBvcmRlcnMgPSAoZGF0YSB8fCBbXSkubWFwKChvcmRlcjogYW55KSA9PiAoe1xyXG4gICAgICAuLi5vcmRlcixcclxuICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZShvcmRlci5jcmVhdGVkX2F0KSxcclxuICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZShvcmRlci51cGRhdGVkX2F0KVxyXG4gICAgfSkpO1xyXG4gICAgXHJcbiAgICAvLyBDYWNoZSBmb3IgMSBtaW51dGUgKG9yZGVycyBjaGFuZ2UgbW9yZSBmcmVxdWVudGx5KVxyXG4gICAgZGJDYWNoZS5zZXQoJ29yZGVycycsIG9yZGVycywgNjAwMDApO1xyXG4gICAgXHJcbiAgICByZXR1cm4gb3JkZXJzO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdEYXRhYmFzZSBnZXRPcmRlcnMgZXJyb3I6JywgZXJyb3IpO1xyXG4gICAgcmV0dXJuIFtdO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldE9yZGVyKGlkOiBzdHJpbmcpOiBQcm9taXNlPE9yZGVyIHwgbnVsbD4ge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBDaGVjayBjYWNoZSBmaXJzdFxyXG4gICAgY29uc3QgY2FjaGVkID0gZGJDYWNoZS5nZXQoYG9yZGVyXyR7aWR9YCk7XHJcbiAgICBpZiAoY2FjaGVkKSB7XHJcbiAgICAgIHJldHVybiBjYWNoZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcclxuICAgICAgLmZyb20oJ29yZGVycycpXHJcbiAgICAgIC5zZWxlY3QoJyonKVxyXG4gICAgICAuZXEoJ2lkJywgaWQpXHJcbiAgICAgIC5zaW5nbGUoKTtcclxuICAgIFxyXG4gICAgaWYgKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0RhdGFiYXNlIGdldE9yZGVyIGVycm9yOicsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNvbnN0IG9yZGVyID0ge1xyXG4gICAgICAuLi5kYXRhLFxyXG4gICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKGRhdGEuY3JlYXRlZF9hdCksXHJcbiAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoZGF0YS51cGRhdGVkX2F0KVxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgLy8gQ2FjaGUgZm9yIDEgbWludXRlXHJcbiAgICBkYkNhY2hlLnNldChgb3JkZXJfJHtpZH1gLCBvcmRlciwgNjAwMDApO1xyXG4gICAgXHJcbiAgICByZXR1cm4gb3JkZXI7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0RhdGFiYXNlIGdldE9yZGVyIGVycm9yOicsIGVycm9yKTtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFkZE9yZGVyKG9yZGVyOiBPcmRlcik6IFByb21pc2U8T3JkZXI+IHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgZGJPcmRlciA9IHtcclxuICAgICAgaWQ6IG9yZGVyLmlkLFxyXG4gICAgICBwcm9kdWN0X2lkOiBvcmRlci5wcm9kdWN0SWQsXHJcbiAgICAgIHByb2R1Y3RfbmFtZTogb3JkZXIucHJvZHVjdE5hbWUsXHJcbiAgICAgIHByb2R1Y3RfaW1hZ2U6IG9yZGVyLnByb2R1Y3RJbWFnZSxcclxuICAgICAgY3VzdG9tZXJfbmFtZTogb3JkZXIuY3VzdG9tZXJOYW1lLFxyXG4gICAgICBjdXN0b21lcl9lbWFpbDogb3JkZXIuY3VzdG9tZXJFbWFpbCxcclxuICAgICAgY3VzdG9tZXJfcGhvbmU6IG9yZGVyLmN1c3RvbWVyUGhvbmUsXHJcbiAgICAgIGN1c3RvbWVyX2FkZHJlc3M6IG9yZGVyLmN1c3RvbWVyQWRkcmVzcyxcclxuICAgICAgd2lsYXlhX2lkOiBvcmRlci53aWxheWFJZCxcclxuICAgICAgd2lsYXlhX25hbWU6IG9yZGVyLndpbGF5YU5hbWUsXHJcbiAgICAgIHNoaXBwaW5nX3R5cGU6IG9yZGVyLnNoaXBwaW5nVHlwZSxcclxuICAgICAgc2hpcHBpbmdfY29zdDogb3JkZXIuc2hpcHBpbmdDb3N0LFxyXG4gICAgICBxdWFudGl0eTogb3JkZXIucXVhbnRpdHksXHJcbiAgICAgIHNlbGVjdGVkX3NpemU6IG9yZGVyLnNlbGVjdGVkU2l6ZSxcclxuICAgICAgc2VsZWN0ZWRfY29sb3I6IG9yZGVyLnNlbGVjdGVkQ29sb3IsXHJcbiAgICAgIHN1YnRvdGFsOiBvcmRlci5zdWJ0b3RhbCxcclxuICAgICAgdG90YWw6IG9yZGVyLnRvdGFsLFxyXG4gICAgICBzdGF0dXM6IG9yZGVyLnN0YXR1cyxcclxuICAgICAgdHJhY2tpbmdfbnVtYmVyOiBvcmRlci50cmFja2luZ051bWJlcixcclxuICAgICAgbm90ZXM6IG9yZGVyLm5vdGVzLFxyXG4gICAgICBwYXltZW50X21ldGhvZDogb3JkZXIucGF5bWVudE1ldGhvZCxcclxuICAgICAgcGF5bWVudF9zdGF0dXM6IG9yZGVyLnBheW1lbnRTdGF0dXMsXHJcbiAgICAgIGVzdGltYXRlZF9kZWxpdmVyeTogb3JkZXIuZXN0aW1hdGVkRGVsaXZlcnksXHJcbiAgICAgIG9yZGVyX2RhdGU6IG9yZGVyLm9yZGVyRGF0ZSxcclxuICAgICAgY3JlYXRlZF9hdDogb3JkZXIuY3JlYXRlZEF0LFxyXG4gICAgICB1cGRhdGVkX2F0OiBvcmRlci51cGRhdGVkQXRcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcclxuICAgICAgLmZyb20oJ29yZGVycycpXHJcbiAgICAgIC5pbnNlcnQoW2RiT3JkZXJdKVxyXG4gICAgICAuc2VsZWN0KClcclxuICAgICAgLnNpbmdsZSgpO1xyXG4gICAgXHJcbiAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRGF0YWJhc2UgYWRkT3JkZXIgZXJyb3I6JywgZXJyb3IpO1xyXG4gICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH1cclxuICAgIFxyXG4gICAgY29uc3QgbmV3T3JkZXIgPSB7XHJcbiAgICAgIC4uLmRhdGEsXHJcbiAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoZGF0YS5jcmVhdGVkX2F0KSxcclxuICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZShkYXRhLnVwZGF0ZWRfYXQpXHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICAvLyBJbnZhbGlkYXRlIG9yZGVycyBjYWNoZVxyXG4gICAgZGJDYWNoZS5pbnZhbGlkYXRlKCdvcmRlcnMnKTtcclxuICAgIFxyXG4gICAgcmV0dXJuIG5ld09yZGVyO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdEYXRhYmFzZSBhZGRPcmRlciBlcnJvcjonLCBlcnJvcik7XHJcbiAgICB0aHJvdyBlcnJvcjtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVPcmRlcihpZDogc3RyaW5nLCB1cGRhdGVzOiBQYXJ0aWFsPE9yZGVyPik6IFByb21pc2U8T3JkZXI+IHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgZGJVcGRhdGVzOiBhbnkgPSB7fTtcclxuICAgIFxyXG4gICAgaWYgKHVwZGF0ZXMuc3RhdHVzICE9PSB1bmRlZmluZWQpIGRiVXBkYXRlcy5zdGF0dXMgPSB1cGRhdGVzLnN0YXR1cztcclxuICAgIGlmICh1cGRhdGVzLmN1c3RvbWVyTmFtZSAhPT0gdW5kZWZpbmVkKSBkYlVwZGF0ZXMuY3VzdG9tZXJfbmFtZSA9IHVwZGF0ZXMuY3VzdG9tZXJOYW1lO1xyXG4gICAgaWYgKHVwZGF0ZXMuY3VzdG9tZXJFbWFpbCAhPT0gdW5kZWZpbmVkKSBkYlVwZGF0ZXMuY3VzdG9tZXJfZW1haWwgPSB1cGRhdGVzLmN1c3RvbWVyRW1haWw7XHJcbiAgICBpZiAodXBkYXRlcy5jdXN0b21lclBob25lICE9PSB1bmRlZmluZWQpIGRiVXBkYXRlcy5jdXN0b21lcl9waG9uZSA9IHVwZGF0ZXMuY3VzdG9tZXJQaG9uZTtcclxuICAgIGlmICh1cGRhdGVzLmN1c3RvbWVyQWRkcmVzcyAhPT0gdW5kZWZpbmVkKSBkYlVwZGF0ZXMuY3VzdG9tZXJfYWRkcmVzcyA9IHVwZGF0ZXMuY3VzdG9tZXJBZGRyZXNzO1xyXG4gICAgaWYgKHVwZGF0ZXMudG90YWwgIT09IHVuZGVmaW5lZCkgZGJVcGRhdGVzLnRvdGFsID0gdXBkYXRlcy50b3RhbDtcclxuICAgIGlmICh1cGRhdGVzLnBheW1lbnRNZXRob2QgIT09IHVuZGVmaW5lZCkgZGJVcGRhdGVzLnBheW1lbnRfbWV0aG9kID0gdXBkYXRlcy5wYXltZW50TWV0aG9kO1xyXG4gICAgaWYgKHVwZGF0ZXMubm90ZXMgIT09IHVuZGVmaW5lZCkgZGJVcGRhdGVzLm5vdGVzID0gdXBkYXRlcy5ub3RlcztcclxuXHJcbiAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxyXG4gICAgICAuZnJvbSgnb3JkZXJzJylcclxuICAgICAgLnVwZGF0ZShkYlVwZGF0ZXMpXHJcbiAgICAgIC5lcSgnaWQnLCBpZClcclxuICAgICAgLnNlbGVjdCgpXHJcbiAgICAgIC5zaW5nbGUoKTtcclxuICAgIFxyXG4gICAgaWYgKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0RhdGFiYXNlIHVwZGF0ZU9yZGVyIGVycm9yOicsIGVycm9yKTtcclxuICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNvbnN0IHVwZGF0ZWRPcmRlciA9IHtcclxuICAgICAgLi4uZGF0YSxcclxuICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZShkYXRhLmNyZWF0ZWRfYXQpLFxyXG4gICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKGRhdGEudXBkYXRlZF9hdClcclxuICAgIH07XHJcbiAgICBcclxuICAgIC8vIEludmFsaWRhdGUgY2FjaGVzXHJcbiAgICBkYkNhY2hlLmludmFsaWRhdGUoJ29yZGVycycpO1xyXG4gICAgZGJDYWNoZS5pbnZhbGlkYXRlKGBvcmRlcl8ke2lkfWApO1xyXG4gICAgXHJcbiAgICByZXR1cm4gdXBkYXRlZE9yZGVyO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdEYXRhYmFzZSB1cGRhdGVPcmRlciBlcnJvcjonLCBlcnJvcik7XHJcbiAgICB0aHJvdyBlcnJvcjtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZWxldGVPcmRlcihpZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIEZpcnN0LCBnZXQgdGhlIG9yZGVyIHRvIHJldHVybiBzdG9ja1xyXG4gICAgY29uc3Qgb3JkZXIgPSBhd2FpdCBnZXRPcmRlcihpZCk7XHJcbiAgICBpZiAob3JkZXIpIHtcclxuICAgICAgLy8gUmV0dXJuIHN0b2NrIGZvciB0aGUgb3JkZXJcclxuICAgICAgYXdhaXQgcmV0dXJuU3RvY2tGcm9tT3JkZXIob3JkZXIpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxyXG4gICAgICAuZnJvbSgnb3JkZXJzJylcclxuICAgICAgLmRlbGV0ZSgpXHJcbiAgICAgIC5lcSgnaWQnLCBpZCk7XHJcbiAgICBcclxuICAgIGlmIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdEYXRhYmFzZSBkZWxldGVPcmRlciBlcnJvcjonLCBlcnJvcik7XHJcbiAgICAgIHRocm93IGVycm9yO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBJbnZhbGlkYXRlIGNhY2hlc1xyXG4gICAgZGJDYWNoZS5pbnZhbGlkYXRlKCdvcmRlcnMnKTtcclxuICAgIGRiQ2FjaGUuaW52YWxpZGF0ZShgb3JkZXJfJHtpZH1gKTtcclxuICAgIGRiQ2FjaGUuaW52YWxpZGF0ZSgncHJvZHVjdHMnKTsgLy8gSW52YWxpZGF0ZSBwcm9kdWN0cyBjYWNoZSBzaW5jZSBzdG9jayBjaGFuZ2VkXHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0RhdGFiYXNlIGRlbGV0ZU9yZGVyIGVycm9yOicsIGVycm9yKTtcclxuICAgIHRocm93IGVycm9yO1xyXG4gIH1cclxufVxyXG5cclxuLy8gT3B0aW1pemVkIE1haW50ZW5hbmNlIG9wZXJhdGlvbnNcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldE1haW50ZW5hbmNlU3RhdHVzKCkge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBDaGVjayBjYWNoZSBmaXJzdFxyXG4gICAgY29uc3QgY2FjaGVkID0gZGJDYWNoZS5nZXQoJ21haW50ZW5hbmNlJyk7XHJcbiAgICBpZiAoY2FjaGVkKSB7XHJcbiAgICAgIHJldHVybiBjYWNoZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcclxuICAgICAgLmZyb20oJ21haW50ZW5hbmNlX3N0YXR1cycpXHJcbiAgICAgIC5zZWxlY3QoJyonKVxyXG4gICAgICAuc2luZ2xlKCk7XHJcblxyXG4gICAgaWYgKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0RhdGFiYXNlIGdldE1haW50ZW5hbmNlU3RhdHVzIGVycm9yOicsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2FjaGUgZm9yIDMwIHNlY29uZHNcclxuICAgIGRiQ2FjaGUuc2V0KCdtYWludGVuYW5jZScsIGRhdGEsIDMwMDAwKTtcclxuICAgIFxyXG4gICAgcmV0dXJuIGRhdGE7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0RhdGFiYXNlIGdldE1haW50ZW5hbmNlU3RhdHVzIGVycm9yOicsIGVycm9yKTtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNldE1haW50ZW5hbmNlU3RhdHVzKGlzTWFpbnRlbmFuY2U6IGJvb2xlYW4sIGRyb3BEYXRlPzogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgIC5mcm9tKCdtYWludGVuYW5jZV9zdGF0dXMnKVxyXG4gICAgICAudXBzZXJ0KHtcclxuICAgICAgICBpZDogJ21haW50ZW5hbmNlJyxcclxuICAgICAgICBpc19tYWludGVuYW5jZTogaXNNYWludGVuYW5jZSxcclxuICAgICAgICBkcm9wX2RhdGU6IGRyb3BEYXRlIHx8IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcclxuICAgICAgICB1cGRhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcclxuICAgICAgfSk7XHJcblxyXG4gICAgaWYgKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0RhdGFiYXNlIHNldE1haW50ZW5hbmNlU3RhdHVzIGVycm9yOicsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEludmFsaWRhdGUgbWFpbnRlbmFuY2UgY2FjaGVcclxuICAgIGRiQ2FjaGUuaW52YWxpZGF0ZSgnbWFpbnRlbmFuY2UnKTtcclxuICAgIFxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0RhdGFiYXNlIHNldE1haW50ZW5hbmNlU3RhdHVzIGVycm9yOicsIGVycm9yKTtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbn1cclxuXHJcbi8vIFN0b2NrIHJldHVybiBmdW5jdGlvbiBmb3IgY2FuY2VsbGVkL2RlbGV0ZWQgb3JkZXJzXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZXR1cm5TdG9ja0Zyb21PcmRlcihvcmRlcjogT3JkZXIpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICB0cnkge1xyXG4gICAgY29uc29sZS5sb2coJ0RhdGFiYXNlOiBSZXR1cm5pbmcgc3RvY2sgZm9yIG9yZGVyOicsIG9yZGVyLmlkKTtcclxuICAgIFxyXG4gICAgLy8gR2V0IHRoZSBwcm9kdWN0XHJcbiAgICBjb25zdCBwcm9kdWN0ID0gYXdhaXQgZ2V0UHJvZHVjdChvcmRlci5wcm9kdWN0SWQpO1xyXG4gICAgaWYgKCFwcm9kdWN0KSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0RhdGFiYXNlOiBQcm9kdWN0IG5vdCBmb3VuZCBmb3Igb3JkZXI6Jywgb3JkZXIucHJvZHVjdElkKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBHZXQgY3VycmVudCBzdG9ja1xyXG4gICAgY29uc3QgY3VycmVudFN0b2NrID0gcHJvZHVjdC5zdG9jaz8uW29yZGVyLnNlbGVjdGVkU2l6ZV0/LltvcmRlci5zZWxlY3RlZENvbG9yXSB8fCAwO1xyXG4gICAgXHJcbiAgICAvLyBSZXR1cm4gdGhlIHN0b2NrXHJcbiAgICBjb25zdCBuZXdTdG9jayA9IHtcclxuICAgICAgLi4ucHJvZHVjdC5zdG9jayxcclxuICAgICAgW29yZGVyLnNlbGVjdGVkU2l6ZV06IHtcclxuICAgICAgICAuLi5wcm9kdWN0LnN0b2NrPy5bb3JkZXIuc2VsZWN0ZWRTaXplXSxcclxuICAgICAgICBbb3JkZXIuc2VsZWN0ZWRDb2xvcl06IGN1cnJlbnRTdG9jayArIG9yZGVyLnF1YW50aXR5XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICBcclxuICAgIC8vIFVwZGF0ZSB0aGUgcHJvZHVjdCBzdG9ja1xyXG4gICAgY29uc3QgdXBkYXRlZFByb2R1Y3QgPSBhd2FpdCB1cGRhdGVQcm9kdWN0KG9yZGVyLnByb2R1Y3RJZCwge1xyXG4gICAgICBzdG9jazogbmV3U3RvY2ssXHJcbiAgICAgIGluU3RvY2s6IGNhbGN1bGF0ZVRvdGFsU3RvY2sobmV3U3RvY2spID4gMFxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIGlmICh1cGRhdGVkUHJvZHVjdCkge1xyXG4gICAgICBjb25zb2xlLmxvZygnRGF0YWJhc2U6IFN1Y2Nlc3NmdWxseSByZXR1cm5lZCBzdG9jayBmb3Igb3JkZXI6Jywgb3JkZXIuaWQsIHtcclxuICAgICAgICBwcm9kdWN0SWQ6IG9yZGVyLnByb2R1Y3RJZCxcclxuICAgICAgICBzaXplOiBvcmRlci5zZWxlY3RlZFNpemUsXHJcbiAgICAgICAgY29sb3I6IG9yZGVyLnNlbGVjdGVkQ29sb3IsXHJcbiAgICAgICAgcXVhbnRpdHk6IG9yZGVyLnF1YW50aXR5LFxyXG4gICAgICAgIG5ld1RvdGFsU3RvY2s6IGNhbGN1bGF0ZVRvdGFsU3RvY2sobmV3U3RvY2spXHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgLy8gSW52YWxpZGF0ZSBwcm9kdWN0IGNhY2hlXHJcbiAgICAgIGRiQ2FjaGUuaW52YWxpZGF0ZSgncHJvZHVjdHMnKTtcclxuICAgICAgZGJDYWNoZS5pbnZhbGlkYXRlKGBwcm9kdWN0XyR7b3JkZXIucHJvZHVjdElkfWApO1xyXG4gICAgICBcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdEYXRhYmFzZTogRmFpbGVkIHRvIHJldHVybiBwcm9kdWN0IHN0b2NrIGZvciBvcmRlcjonLCBvcmRlci5pZCk7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRGF0YWJhc2U6IEVycm9yIHJldHVybmluZyBzdG9jayBmb3Igb3JkZXI6JywgZXJyb3IpO1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxufVxyXG5cclxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNhbGN1bGF0ZSB0b3RhbCBzdG9ja1xyXG5mdW5jdGlvbiBjYWxjdWxhdGVUb3RhbFN0b2NrKHN0b2NrOiBhbnkpOiBudW1iZXIge1xyXG4gIGlmICghc3RvY2sgfHwgdHlwZW9mIHN0b2NrICE9PSAnb2JqZWN0JykgcmV0dXJuIDA7XHJcbiAgXHJcbiAgbGV0IHRvdGFsID0gMDtcclxuICBPYmplY3QudmFsdWVzKHN0b2NrKS5mb3JFYWNoKChjb2xvclN0b2NrOiBhbnkpID0+IHtcclxuICAgIGlmIChjb2xvclN0b2NrICYmIHR5cGVvZiBjb2xvclN0b2NrID09PSAnb2JqZWN0Jykge1xyXG4gICAgICBPYmplY3QudmFsdWVzKGNvbG9yU3RvY2spLmZvckVhY2goKHF0eTogYW55KSA9PiB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBxdHkgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICB0b3RhbCArPSBxdHk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9KTtcclxuICBcclxuICByZXR1cm4gdG90YWw7XHJcbn1cclxuXHJcbi8vIEluaXRpYWxpemUgY2FjaGUgb24gbW9kdWxlIGxvYWRcclxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgLy8gT25seSBwcmVsb2FkIG9uIGNsaWVudCBzaWRlXHJcbiAgZGJDYWNoZS5wcmVsb2FkQ3JpdGljYWxEYXRhKCk7XHJcbn1cclxuXHJcbmV4cG9ydCB7IHN1cGFiYXNlLCBkYkNhY2hlIH07XHJcbiJdLCJuYW1lcyI6WyJjcmVhdGVDbGllbnQiLCJzdXBhYmFzZVVybCIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwiLCJzdXBhYmFzZUtleSIsIk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZIiwiRXJyb3IiLCJzdXBhYmFzZSIsImRiIiwic2NoZW1hIiwiYXV0aCIsInBlcnNpc3RTZXNzaW9uIiwiYXV0b1JlZnJlc2hUb2tlbiIsImdsb2JhbCIsImhlYWRlcnMiLCJEYXRhYmFzZUNhY2hlIiwic2V0Iiwia2V5IiwiZGF0YSIsInR0bCIsIkRFRkFVTFRfVFRMIiwiY2FjaGUiLCJ0aW1lc3RhbXAiLCJEYXRlIiwibm93IiwiZ2V0IiwiaXRlbSIsImRlbGV0ZSIsImludmFsaWRhdGUiLCJwYXR0ZXJuIiwia2V5c1RvRGVsZXRlIiwiZm9yRWFjaCIsIl8iLCJpbmNsdWRlcyIsInB1c2giLCJjbGVhciIsInByZWxvYWRDcml0aWNhbERhdGEiLCJjb25zb2xlIiwibG9nIiwicHJvZHVjdHMiLCJnZXRQcm9kdWN0cyIsIkxPTkdfVFRMIiwibWFpbnRlbmFuY2UiLCJnZXRNYWludGVuYW5jZVN0YXR1cyIsImVycm9yIiwiZnJvbSIsInNlbGVjdCIsIm9yZGVyIiwiYXNjZW5kaW5nIiwibWFwIiwiY29udmVydERiUHJvZHVjdFRvUHJvZHVjdCIsInNpbmdsZSIsIk1hcCIsImRiQ2FjaGUiLCJkYlByb2R1Y3QiLCJpZCIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsInByaWNlIiwib3JpZ2luYWxQcmljZSIsIm9yaWdpbmFsX3ByaWNlIiwiaW1hZ2UiLCJpbWFnZXMiLCJzdG9jayIsImNhdGVnb3J5Iiwic2l6ZXMiLCJjb2xvcnMiLCJpblN0b2NrIiwiaW5fc3RvY2siLCJzdGF0dXMiLCJyYXRpbmciLCJyZXZpZXdzIiwic2t1Iiwid2VpZ2h0IiwiZGltZW5zaW9ucyIsInRhZ3MiLCJmZWF0dXJlZCIsImNyZWF0ZWRBdCIsImNyZWF0ZWRfYXQiLCJ1cGRhdGVkQXQiLCJ1cGRhdGVkX2F0IiwiY2FjaGVkIiwiZ2V0UHJvZHVjdCIsImVxIiwicHJvZHVjdCIsImFkZFByb2R1Y3QiLCJpbnNlcnQiLCJuZXdQcm9kdWN0IiwidXBkYXRlUHJvZHVjdCIsInVwZGF0ZXMiLCJkYlVwZGF0ZXMiLCJ1bmRlZmluZWQiLCJ1cGRhdGUiLCJ1cGRhdGVkUHJvZHVjdCIsImRlbGV0ZVByb2R1Y3QiLCJnZXRPcmRlcnMiLCJvcmRlcnMiLCJnZXRPcmRlciIsImFkZE9yZGVyIiwiZGJPcmRlciIsInByb2R1Y3RfaWQiLCJwcm9kdWN0SWQiLCJwcm9kdWN0X25hbWUiLCJwcm9kdWN0TmFtZSIsInByb2R1Y3RfaW1hZ2UiLCJwcm9kdWN0SW1hZ2UiLCJjdXN0b21lcl9uYW1lIiwiY3VzdG9tZXJOYW1lIiwiY3VzdG9tZXJfZW1haWwiLCJjdXN0b21lckVtYWlsIiwiY3VzdG9tZXJfcGhvbmUiLCJjdXN0b21lclBob25lIiwiY3VzdG9tZXJfYWRkcmVzcyIsImN1c3RvbWVyQWRkcmVzcyIsIndpbGF5YV9pZCIsIndpbGF5YUlkIiwid2lsYXlhX25hbWUiLCJ3aWxheWFOYW1lIiwic2hpcHBpbmdfdHlwZSIsInNoaXBwaW5nVHlwZSIsInNoaXBwaW5nX2Nvc3QiLCJzaGlwcGluZ0Nvc3QiLCJxdWFudGl0eSIsInNlbGVjdGVkX3NpemUiLCJzZWxlY3RlZFNpemUiLCJzZWxlY3RlZF9jb2xvciIsInNlbGVjdGVkQ29sb3IiLCJzdWJ0b3RhbCIsInRvdGFsIiwidHJhY2tpbmdfbnVtYmVyIiwidHJhY2tpbmdOdW1iZXIiLCJub3RlcyIsInBheW1lbnRfbWV0aG9kIiwicGF5bWVudE1ldGhvZCIsInBheW1lbnRfc3RhdHVzIiwicGF5bWVudFN0YXR1cyIsImVzdGltYXRlZF9kZWxpdmVyeSIsImVzdGltYXRlZERlbGl2ZXJ5Iiwib3JkZXJfZGF0ZSIsIm9yZGVyRGF0ZSIsIm5ld09yZGVyIiwidXBkYXRlT3JkZXIiLCJ1cGRhdGVkT3JkZXIiLCJkZWxldGVPcmRlciIsInJldHVyblN0b2NrRnJvbU9yZGVyIiwic2V0TWFpbnRlbmFuY2VTdGF0dXMiLCJpc01haW50ZW5hbmNlIiwiZHJvcERhdGUiLCJ1cHNlcnQiLCJpc19tYWludGVuYW5jZSIsImRyb3BfZGF0ZSIsInRvSVNPU3RyaW5nIiwiY3VycmVudFN0b2NrIiwibmV3U3RvY2siLCJjYWxjdWxhdGVUb3RhbFN0b2NrIiwic2l6ZSIsImNvbG9yIiwibmV3VG90YWxTdG9jayIsIk9iamVjdCIsInZhbHVlcyIsImNvbG9yU3RvY2siLCJxdHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/optimizedDatabase.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fmaintenance%2Froute&page=%2Fapi%2Fmaintenance%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmaintenance%2Froute.ts&appDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CHP%5CDesktop%5Cprojectt&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();