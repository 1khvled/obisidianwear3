"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_src_lib_inventoryService_ts";
exports.ids = ["_rsc_src_lib_inventoryService_ts"];
exports.modules = {

/***/ "(rsc)/./src/lib/inventoryService.ts":
/*!*************************************!*\
  !*** ./src/lib/inventoryService.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addInventory: () => (/* binding */ addInventory),\n/* harmony export */   checkStock: () => (/* binding */ checkStock),\n/* harmony export */   getInventory: () => (/* binding */ getInventory),\n/* harmony export */   getInventoryTransactions: () => (/* binding */ getInventoryTransactions),\n/* harmony export */   getLowStockItems: () => (/* binding */ getLowStockItems),\n/* harmony export */   getProductInventory: () => (/* binding */ getProductInventory),\n/* harmony export */   initializeProductInventory: () => (/* binding */ initializeProductInventory),\n/* harmony export */   updateInventoryQuantity: () => (/* binding */ updateInventoryQuantity)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nconst supabaseUrl = \"https://twlegtqcyydgjkycxngw.supabase.co\";\nconst supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InR3bGVndHFjeXlkZ2preWN4bmd3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTcxNzQ2MDAsImV4cCI6MjA3Mjc1MDYwMH0.uD9GD_ksHCDgmmPAgR7fcLUAJHRJtTkT-J-SVjU-WR0\";\nif (!supabaseUrl || !supabaseKey) {\n    throw new Error(\"Missing Supabase environment variables\");\n}\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseKey);\n// Get all inventory records\nasync function getInventory() {\n    try {\n        const { data, error } = await supabase.from(\"inventory\").select(`\r\n        *,\r\n        products (\r\n          id,\r\n          name,\r\n          image,\r\n          price\r\n        )\r\n      `).order(\"created_at\", {\n            ascending: false\n        });\n        if (error) {\n            console.error(\"Inventory service: getInventory error:\", error);\n            return [];\n        }\n        return data || [];\n    } catch (error) {\n        console.error(\"Inventory service: getInventory error:\", error);\n        return [];\n    }\n}\n// Get inventory for a specific product\nasync function getProductInventory(productId) {\n    try {\n        const { data, error } = await supabase.from(\"inventory\").select(`\r\n        *,\r\n        products (\r\n          id,\r\n          name,\r\n          image,\r\n          price\r\n        )\r\n      `).eq(\"product_id\", productId).order(\"size\", {\n            ascending: true\n        });\n        if (error) {\n            console.error(\"Inventory service: getProductInventory error:\", error);\n            return [];\n        }\n        return data || [];\n    } catch (error) {\n        console.error(\"Inventory service: getProductInventory error:\", error);\n        return [];\n    }\n}\n// Update inventory quantity\nasync function updateInventoryQuantity(inventoryId, newQuantity, reason, createdBy) {\n    try {\n        // Get current record\n        const { data: currentRecord, error: fetchError } = await supabase.from(\"inventory\").select(\"*\").eq(\"id\", inventoryId).single();\n        if (fetchError || !currentRecord) {\n            console.error(\"Inventory service: Record not found:\", inventoryId);\n            return false;\n        }\n        // Update inventory\n        const { error: updateError } = await supabase.from(\"inventory\").update({\n            quantity: newQuantity,\n            updated_at: new Date().toISOString()\n        }).eq(\"id\", inventoryId);\n        if (updateError) {\n            console.error(\"Inventory service: updateInventoryQuantity error:\", updateError);\n            return false;\n        }\n        // Log transaction\n        const quantityChange = newQuantity - currentRecord.quantity;\n        if (quantityChange !== 0) {\n            await supabase.from(\"inventory_transactions\").insert([\n                {\n                    id: `TXN-${Date.now()}-${inventoryId}`,\n                    product_id: currentRecord.product_id,\n                    size: currentRecord.size,\n                    color: currentRecord.color,\n                    transaction_type: \"adjustment\",\n                    quantity_change: quantityChange,\n                    previous_quantity: currentRecord.quantity,\n                    new_quantity: newQuantity,\n                    reason: reason || \"Manual adjustment\",\n                    created_by: createdBy || \"admin\"\n                }\n            ]);\n        }\n        return true;\n    } catch (error) {\n        console.error(\"Inventory service: updateInventoryQuantity error:\", error);\n        return false;\n    }\n}\n// Add inventory (stock in)\nasync function addInventory(productId, size, color, quantity, reason, createdBy) {\n    try {\n        const inventoryId = `INV-${productId}-${size}-${color}`;\n        // Get current record\n        const { data: currentRecord, error: fetchError } = await supabase.from(\"inventory\").select(\"*\").eq(\"id\", inventoryId).single();\n        const currentQuantity = currentRecord?.quantity || 0;\n        const newQuantity = currentQuantity + quantity;\n        // Upsert inventory record\n        const { error: upsertError } = await supabase.from(\"inventory\").upsert([\n            {\n                id: inventoryId,\n                product_id: productId,\n                size,\n                color,\n                quantity: newQuantity,\n                reserved_quantity: currentRecord?.reserved_quantity || 0,\n                min_stock_level: currentRecord?.min_stock_level || 5,\n                max_stock_level: currentRecord?.max_stock_level || 100\n            }\n        ]);\n        if (upsertError) {\n            console.error(\"Inventory service: addInventory error:\", upsertError);\n            return false;\n        }\n        // Log transaction\n        await supabase.from(\"inventory_transactions\").insert([\n            {\n                id: `TXN-${Date.now()}-${inventoryId}`,\n                product_id: productId,\n                size,\n                color,\n                transaction_type: \"in\",\n                quantity_change: quantity,\n                previous_quantity: currentQuantity,\n                new_quantity: newQuantity,\n                reason: reason || \"Stock added\",\n                created_by: createdBy || \"admin\"\n            }\n        ]);\n        return true;\n    } catch (error) {\n        console.error(\"Inventory service: addInventory error:\", error);\n        return false;\n    }\n}\n// Check if product has sufficient stock\nasync function checkStock(productId, size, color, requestedQuantity) {\n    try {\n        const { data, error } = await supabase.from(\"inventory\").select(\"available_quantity\").eq(\"product_id\", productId).eq(\"size\", size).eq(\"color\", color).single();\n        if (error || !data) {\n            return {\n                available: false,\n                currentStock: 0\n            };\n        }\n        return {\n            available: data.available_quantity >= requestedQuantity,\n            currentStock: data.available_quantity\n        };\n    } catch (error) {\n        console.error(\"Inventory service: checkStock error:\", error);\n        return {\n            available: false,\n            currentStock: 0\n        };\n    }\n}\n// Get low stock items\nasync function getLowStockItems() {\n    try {\n        const { data, error } = await supabase.from(\"inventory\").select(`\r\n        *,\r\n        products (\r\n          id,\r\n          name,\r\n          image,\r\n          price\r\n        )\r\n      `).lte(\"available_quantity\", 10) // Simple threshold for now\n        .order(\"available_quantity\", {\n            ascending: true\n        });\n        if (error) {\n            console.error(\"Inventory service: getLowStockItems error:\", error);\n            return [];\n        }\n        return data || [];\n    } catch (error) {\n        console.error(\"Inventory service: getLowStockItems error:\", error);\n        return [];\n    }\n}\n// Get inventory transactions\nasync function getInventoryTransactions(productId, limit = 50) {\n    try {\n        let query = supabase.from(\"inventory_transactions\").select(\"*\").order(\"created_at\", {\n            ascending: false\n        }).limit(limit);\n        if (productId) {\n            query = query.eq(\"product_id\", productId);\n        }\n        const { data, error } = await query;\n        if (error) {\n            console.error(\"Inventory service: getInventoryTransactions error:\", error);\n            return [];\n        }\n        return data || [];\n    } catch (error) {\n        console.error(\"Inventory service: getInventoryTransactions error:\", error);\n        return [];\n    }\n}\n// Initialize inventory for a product\nasync function initializeProductInventory(productId) {\n    try {\n        // Get product details\n        const { data: product, error: productError } = await supabase.from(\"products\").select(\"sizes, colors, stock\").eq(\"id\", productId).single();\n        if (productError || !product) {\n            console.error(\"Inventory service: Product not found:\", productId);\n            return false;\n        }\n        const sizes = product.sizes || [];\n        const colors = product.colors || [];\n        const stock = product.stock || {};\n        // Create inventory records for each size/color combination\n        const inventoryRecords = [];\n        for (const size of sizes){\n            for (const color of colors){\n                const stockQuantity = stock[size]?.[color] || 0;\n                inventoryRecords.push({\n                    id: `INV-${productId}-${size}-${color}`,\n                    product_id: productId,\n                    size,\n                    color,\n                    quantity: stockQuantity,\n                    reserved_quantity: 0,\n                    min_stock_level: 5,\n                    max_stock_level: 100\n                });\n            }\n        }\n        if (inventoryRecords.length > 0) {\n            const { error: insertError } = await supabase.from(\"inventory\").upsert(inventoryRecords);\n            if (insertError) {\n                console.error(\"Inventory service: initializeProductInventory error:\", insertError);\n                return false;\n            }\n        }\n        return true;\n    } catch (error) {\n        console.error(\"Inventory service: initializeProductInventory error:\", error);\n        return false;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/inventoryService.ts\n");

/***/ })

};
;