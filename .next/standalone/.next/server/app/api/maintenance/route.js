"use strict";(()=>{var e={};e.id=986,e.ids=[986],e.modules={517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},3685:e=>{e.exports=require("http")},5687:e=>{e.exports=require("https")},5477:e=>{e.exports=require("punycode")},2781:e=>{e.exports=require("stream")},7310:e=>{e.exports=require("url")},9796:e=>{e.exports=require("zlib")},7711:(e,r,t)=>{t.r(r),t.d(r,{headerHooks:()=>f,originalPathname:()=>g,patchFetch:()=>x,requestAsyncStorage:()=>p,routeModule:()=>d,serverHooks:()=>h,staticGenerationAsyncStorage:()=>m,staticGenerationBailout:()=>v});var n={};t.r(n),t.d(n,{GET:()=>c,POST:()=>l});var s=t(5419),a=t(9108),i=t(9678),o=t(8070),u=t(4750);async function c(){try{let e=await (0,u.XK)();return o.Z.json(e)}catch(e){return console.error("Error fetching maintenance status:",e),o.Z.json({error:"Failed to fetch maintenance status"},{status:500})}}let l=(0,t(9372).x)(async e=>{try{let r=await e.json();console.log("Maintenance API received from user:",e.user?.username,r);let t=r.isMaintenance||r.is_maintenance,n=r.dropDate||r.drop_date;if(await (0,u.Vn)(t,n))return o.Z.json({success:!0});return o.Z.json({error:"Failed to update maintenance status"},{status:500})}catch(e){return console.error("Error updating maintenance status:",e),o.Z.json({error:"Failed to update maintenance status"},{status:500})}}),d=new s.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/maintenance/route",pathname:"/api/maintenance",filename:"route",bundlePath:"app/api/maintenance/route"},resolvedPagePath:"C:\\Users\\HP\\Desktop\\projectt\\src\\app\\api\\maintenance\\route.ts",nextConfigOutput:"standalone",userland:n}),{requestAsyncStorage:p,staticGenerationAsyncStorage:m,serverHooks:h,headerHooks:f,staticGenerationBailout:v}=d,g="/api/maintenance/route";function x(){return(0,i.patchFetch)({serverHooks:h,staticGenerationAsyncStorage:m})}},9372:(e,r,t)=>{t.d(r,{x:()=>o});var n=t(8070);async function s(e){try{let r=e.headers.get("x-session-id")||e.cookies.get("obsidian-admin-session-id")?.value;if(!r)return console.log("No session ID found in request"),n.Z.json({error:"Authentication required"},{status:401});console.log("Checking session:",r);let t=await a(r);if(!t||!t.isActive)return n.Z.json({error:"Invalid or expired session"},{status:401});let s=new Date,o=new Date(t.expiresAt);if(s>o)return await i(r),n.Z.json({error:"Session expired"},{status:401});return e.user={username:t.username,sessionId:t.sessionId},null}catch(e){return console.error("Authentication error:",e),n.Z.json({error:"Authentication failed"},{status:500})}}async function a(e){try{let{supabase:r}=await Promise.resolve().then(t.bind(t,4750));if(!r)return null;let{data:n,error:s}=await r.from("admin_sessions").select("*").eq("session_id",e).eq("is_active",!0).single();if(s&&"PGRST116"!==s.code)return console.error("Error fetching session:",s),null;return n}catch(e){return console.error("Error verifying session:",e),null}}async function i(e){try{let{supabase:r}=await Promise.resolve().then(t.bind(t,4750));if(!r)return!1;let{error:n}=await r.from("admin_sessions").update({is_active:!1}).eq("session_id",e);return!n}catch(e){return console.error("Error deactivating session:",e),!1}}function o(e){return async(r,t)=>await s(r)||e(r,t)}}};var r=require("../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),n=r.X(0,[638,206,409,750],()=>t(7711));module.exports=n})();